"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var TelegramBotService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramBotService = void 0;
const common_1 = require("@nestjs/common");
const config_1 = require("@nestjs/config");
const telegraf_1 = require("telegraf");
const client_1 = require("@prisma/client");
const user_service_1 = require("../services/user.service");
const openai_service_1 = require("../services/openai.service");
const task_service_1 = require("../services/task.service");
const habit_service_1 = require("../services/habit.service");
const billing_service_1 = require("../services/billing.service");
const ai_context_service_1 = require("../services/ai-context.service");
const payment_service_1 = require("../services/payment.service");
const prisma_service_1 = require("../database/prisma.service");
const notification_service_1 = require("../services/notification.service");
let TelegramBotService = TelegramBotService_1 = class TelegramBotService {
    configService;
    userService;
    openaiService;
    taskService;
    habitService;
    billingService;
    aiContextService;
    paymentService;
    prisma;
    notificationService;
    logger = new common_1.Logger(TelegramBotService_1.name);
    bot;
    activePomodoroSessions = new Map();
    activeIntervalReminders = new Map();
    constructor(configService, userService, openaiService, taskService, habitService, billingService, aiContextService, paymentService, prisma, notificationService) {
        this.configService = configService;
        this.userService = userService;
        this.openaiService = openaiService;
        this.taskService = taskService;
        this.habitService = habitService;
        this.billingService = billingService;
        this.aiContextService = aiContextService;
        this.paymentService = paymentService;
        this.prisma = prisma;
        this.notificationService = notificationService;
        const token = this.configService.get('bot.token');
        if (!token) {
            throw new Error('BOT_TOKEN is not provided');
        }
        this.bot = new telegraf_1.Telegraf(token);
        this.setupMiddleware();
        this.setupHandlers();
        this.setupErrorHandling();
    }
    setupMiddleware() {
        this.bot.use((0, telegraf_1.session)({
            defaultSession: () => ({
                step: undefined,
                data: {},
                waitingForInput: false,
                currentAction: undefined,
                tempData: {},
            }),
        }));
        this.bot.use(async (ctx, next) => {
            if (ctx.from) {
                ctx.userId = ctx.from.id.toString();
                const existingUser = await this.userService
                    .findByTelegramId(ctx.from.id.toString())
                    .catch(() => null);
                if (!existingUser) {
                    await this.userService.findOrCreateUser({
                        id: ctx.from.id.toString(),
                        username: ctx.from.username,
                        firstName: ctx.from.first_name,
                        lastName: ctx.from.last_name,
                    });
                    await this.billingService.initializeTrialForUser(ctx.from.id.toString());
                }
            }
            ctx.replyWithMarkdown = (text, extra = {}) => {
                return ctx.reply(text, { parse_mode: 'Markdown', ...extra });
            };
            ctx.editMessageTextWithMarkdown = (text, extra = {}) => {
                return ctx.editMessageText(text, { parse_mode: 'Markdown', ...extra });
            };
            return next();
        });
    }
    setupErrorHandling() {
        this.bot.catch(async (err, ctx) => {
            this.logger.error('Bot error for message:', err);
            try {
                const error = err;
                if (error.message &&
                    error.message.includes("message can't be edited")) {
                    await ctx.replyWithMarkdown('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
                }
                else {
                    await ctx.replyWithMarkdown('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
                }
            }
            catch (responseError) {
                this.logger.error('Failed to send error response:', responseError);
            }
        });
    }
    setupHandlers() {
        this.bot.start(async (ctx) => {
            try {
                const startPayload = ctx.startPayload;
                let referrerId;
                if (startPayload && startPayload.startsWith('ref_')) {
                    referrerId = startPayload.replace('ref_', '');
                    this.logger.log(`User started with referral from: ${referrerId}`);
                }
                const userData = {
                    id: ctx.from?.id.toString() || ctx.userId,
                    username: ctx.from?.username || undefined,
                    firstName: ctx.from?.first_name || undefined,
                    lastName: ctx.from?.last_name || undefined,
                };
                const user = await this.userService.findOrCreateUser(userData);
                if (referrerId && referrerId !== user.id) {
                    await this.handleReferralRegistration(ctx, user.id, referrerId);
                }
                this.logger.log(`User ${user.id} started bot. Onboarding passed: ${user.onboardingPassed}`);
                if (!user.onboardingPassed) {
                    this.logger.log(`Starting onboarding for user ${user.id}`);
                    await this.startOnboarding(ctx);
                }
                else {
                    this.logger.log(`Showing main menu for user ${user.id}`);
                    await this.showMainMenu(ctx);
                }
            }
            catch (error) {
                this.logger.error('Error in start command:', error);
                await ctx.replyWithMarkdown('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            }
        });
        this.bot.on('voice', async (ctx) => {
            try {
                await ctx.replyWithMarkdown('üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
                const userId = ctx.from.id.toString();
                const voiceMessage = ctx.message.voice;
                const taskTitle = `üìù –ó–∞–¥–∞—á–∞ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (${new Date().toLocaleTimeString('ru-RU')})`;
                const dueDate = new Date(Date.now() + 24 * 60 * 60 * 1000);
                const task = await this.taskService.createTask({
                    userId,
                    title: taskTitle,
                    description: '–°–æ–∑–¥–∞–Ω–æ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.',
                    priority: 'MEDIUM',
                    dueDate,
                });
                const keyboard = {
                    inline_keyboard: [
                        [
                            {
                                text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ',
                                callback_data: `task_complete_${task.id}`,
                            },
                            {
                                text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
                                callback_data: `task_edit_${task.id}`,
                            },
                        ],
                        [
                            { text: 'üìã –í—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'tasks_list' },
                            { text: 'üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
                        ],
                    ],
                };
                const intervalInfo = this.extractTimeIntervalFromText(taskTitle);
                let responseMessage = `‚úÖ *–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!*\n\n` +
                    `üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${task.title}\n` +
                    `üìÖ *–°—Ä–æ–∫:* ${task.dueDate ? task.dueDate.toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                    `üéØ *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${this.getPriorityEmoji(task.priority)} ${task.priority}`;
                if (intervalInfo) {
                    responseMessage += `\n\n‚è∞ **–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ${intervalInfo.nextTime}**`;
                }
                responseMessage += `\n\nüí° *–°–æ–≤–µ—Ç:* –ù–∞–∂–º–∏—Ç–µ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.`;
                await ctx.replyWithMarkdown(responseMessage, {
                    reply_markup: keyboard,
                });
                this.logger.log(`Task created from voice message for user ${userId}: ${task.id}`);
            }
            catch (error) {
                this.logger.error('Error handling voice message:', error);
                await ctx.replyWithMarkdown('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            }
        });
        this.bot.help(async (ctx) => {
            await ctx.replyWithMarkdown(`
ü§ñ *Ticky AI - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ
/tasks - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
/habits - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
/mood - –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
/focus - –°–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏

*–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*
üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É
üîÑ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
üòä –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
‚è∞ –°–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu
      `);
        });
        this.bot.command('menu', async (ctx) => {
            await this.showMainMenu(ctx);
        });
        this.bot.command('tasks', async (ctx) => {
            await this.showTasksMenu(ctx);
        });
        this.bot.command('habits', async (ctx) => {
            await this.showHabitsMenu(ctx);
        });
        this.bot.command('mood', async (ctx) => {
            await this.showMoodMenu(ctx);
        });
        this.bot.command('focus', async (ctx) => {
            await this.showFocusSession(ctx);
        });
        this.bot.command('help', async (ctx) => {
            const helpMessage = `
ü§ñ *Ticky AI - –°–ø—Ä–∞–≤–∫–∞*

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ
/tasks - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
/habits - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
/mood - –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
/focus - –°–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞
/reminders - –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/testnotify - –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
üòä –¢—Ä–µ–∫–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
üçÖ –¢–µ—Ö–Ω–∏–∫–∞ –ü–æ–º–æ–¥–æ—Ä–æ –¥–ª—è —Ñ–æ–∫—É—Å–∞
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚è∞ –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö
üíé –°–∏—Å—Ç–µ–º–∞ –±–∏–ª–ª–∏–Ω–≥–∞ —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu
      `;
            if (ctx.callbackQuery) {
                await ctx.editMessageTextWithMarkdown(helpMessage);
            }
            else {
                await ctx.replyWithMarkdown(helpMessage);
            }
        });
        this.bot.command('feedback', async (ctx) => {
            try {
                await this.showFeedbackSurvey(ctx);
            }
            catch (error) {
                this.logger.error('Error in feedback command:', error);
                await ctx.replyWithMarkdown('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        });
        this.bot.command('testnotify', async (ctx) => {
            try {
                const userId = ctx.from.id.toString();
                const habit = await this.prisma.habit.findFirst({
                    where: { userId, isActive: true },
                });
                if (!habit) {
                    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
                    return;
                }
                const message = `‚è∞ *–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*\n\nüéØ ${habit.title}\n\n–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–µ!`;
                const keyboard = {
                    inline_keyboard: [
                        [
                            {
                                text: '‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª',
                                callback_data: `complete_habit_${habit.id}`,
                            },
                            {
                                text: '‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 15 –º–∏–Ω',
                                callback_data: `snooze_habit_${habit.id}_15`,
                            },
                        ],
                        [
                            {
                                text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                                callback_data: `habit_stats_${habit.id}`,
                            },
                            {
                                text: '‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è',
                                callback_data: `skip_habit_${habit.id}`,
                            },
                        ],
                    ],
                };
                await ctx.reply(message, {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard,
                });
                this.logger.log(`Test notification sent to user ${userId} for habit ${habit.id}`);
            }
            catch (error) {
                this.logger.error('Error in test notification:', error);
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
            }
        });
        this.bot.command('reminders', async (ctx) => {
            try {
                const userId = ctx.from.id.toString();
                const habitsWithReminders = await this.prisma.habit.findMany({
                    where: {
                        userId,
                        isActive: true,
                        reminderTime: { not: null },
                    },
                    orderBy: { title: 'asc' },
                });
                if (habitsWithReminders.length === 0) {
                    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /habits –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.');
                    return;
                }
                let message = `‚è∞ *–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n`;
                for (const habit of habitsWithReminders) {
                    const nextTime = this.calculateNextReminderTime(habit.reminderTime || '');
                    message += `üéØ **${habit.title}**\n`;
                    message += `‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${habit.reminderTime}\n`;
                    message += `üïí –°–ª–µ–¥—É—é—â–µ–µ: ${nextTime}\n\n`;
                }
                message += `üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /testnotify –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`;
                await ctx.reply(message, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üîÑ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'habits_list' }],
                            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                        ],
                    },
                });
            }
            catch (error) {
                this.logger.error('Error showing reminders:', error);
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.');
            }
        });
        this.bot.command('billing', async (ctx) => {
            const subscriptionStatus = await this.billingService.getSubscriptionStatus(ctx.userId);
            const limitsText = subscriptionStatus.limits.dailyReminders === -1
                ? '‚àû (–±–µ–∑–ª–∏–º–∏—Ç)'
                : subscriptionStatus.limits.dailyReminders.toString();
            const aiLimitsText = subscriptionStatus.limits.dailyAiQueries === -1
                ? '‚àû (–±–µ–∑–ª–∏–º–∏—Ç)'
                : subscriptionStatus.limits.dailyAiQueries.toString();
            let statusMessage = '';
            if (subscriptionStatus.isTrialActive) {
                statusMessage = `üéÅ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:** ${subscriptionStatus.daysRemaining} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å`;
            }
            else {
                statusMessage = `üíé **–ü–æ–¥–ø–∏—Å–∫–∞:** ${subscriptionStatus.type === 'FREE'
                    ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è'
                    : subscriptionStatus.type === 'PREMIUM'
                        ? 'Premium'
                        : 'Premium Plus'}`;
            }
            await ctx.replyWithMarkdown(`üìä *–í–∞—à–∏ –ª–∏–º–∏—Ç—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ*

${statusMessage}

**–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:**
üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${subscriptionStatus.usage.dailyReminders}/${limitsText}
üß† –ò–ò-–∑–∞–ø—Ä–æ—Å—ã: ${subscriptionStatus.usage.dailyAiQueries}/${aiLimitsText}
üìù –ó–∞–¥–∞—á–∏: ${subscriptionStatus.usage.dailyTasks}/${subscriptionStatus.limits.dailyTasks === -1 ? '‚àû' : subscriptionStatus.limits.dailyTasks}
üîÑ –ü—Ä–∏–≤—ã—á–∫–∏: ${subscriptionStatus.usage.dailyHabits}/${subscriptionStatus.limits.dailyHabits === -1 ? '‚àû' : subscriptionStatus.limits.dailyHabits}

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: ${subscriptionStatus.limits.advancedAnalytics ? '‚úÖ' : '‚ùå'}
üé® –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–º—ã: ${subscriptionStatus.limits.customThemes ? '‚úÖ' : '‚ùå'}
üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: ${subscriptionStatus.limits.prioritySupport ? '‚úÖ' : '‚ùå'}`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Premium',
                                callback_data: 'upgrade_premium',
                            },
                        ],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        });
        this.bot.command('reset_onboarding', async (ctx) => {
            try {
                await this.userService.updateUser(ctx.userId, {
                    onboardingPassed: false,
                });
                await ctx.editMessageTextWithMarkdown('üîÑ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ —Å–±—Ä–æ—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ.');
                this.logger.log(`Onboarding reset for user ${ctx.userId}`);
            }
            catch (error) {
                this.logger.error('Error resetting onboarding:', error);
                await ctx.replyWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞.');
            }
        });
        this.bot.action('onboarding_start', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showOnboardingStep2(ctx);
        });
        this.bot.action('onboarding_examples', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`
üìã *–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ —è —É–º–µ—é:*

*–ó–∞–¥–∞—á–∏:*
‚Ä¢ "–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"
‚Ä¢ "–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é"
‚Ä¢ "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É"

*–ü—Ä–∏–≤—ã—á–∫–∏:*
‚Ä¢ "–ü–∏—Ç—å 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã"
‚Ä¢ "–î–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É"
‚Ä¢ "–ß–∏—Ç–∞—Ç—å 30 –º–∏–Ω—É—Ç"

*–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:*
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ —à–∫–∞–ª–µ 1-10
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      `);
            setTimeout(async () => {
                await this.showOnboardingStep2(ctx);
            }, 3000);
        });
        this.bot.action('onboarding_add_habit', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`
‚úçÔ∏è *–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –ø–µ—Ä–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏.*

–ù–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ –ü–∏—Ç—å –≤–æ–¥—É –∫–∞–∂–¥—ã–π —á–∞—Å
‚Ä¢ –î–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É —É—Ç—Ä–æ–º
‚Ä¢ –ß–∏—Ç–∞—Ç—å –ø–µ—Ä–µ–¥ —Å–Ω–æ–º

*–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:*
      `);
            ctx.session.step = 'onboarding_waiting_habit';
        });
        this.bot.action('onboarding_skip_habit', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showOnboardingStep3(ctx);
        });
        this.bot.action('onboarding_complete', async (ctx) => {
            await ctx.answerCbQuery();
            try {
                await this.userService.updateUser(ctx.userId, {
                    onboardingPassed: true,
                });
                this.logger.log(`Onboarding completed for user ${ctx.userId}`);
                await ctx.editMessageTextWithMarkdown(`
üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!*

–¢–µ–ø–µ—Ä—å —Ç—ã –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Å Ticky AI!

üöÄ –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
        `);
                setTimeout(() => {
                    this.showMainMenu(ctx, false);
                }, 2000);
            }
            catch (error) {
                this.logger.error('Error completing onboarding:', error);
                await ctx.replyWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            }
        });
        this.bot.on('text', async (ctx) => {
            const user = await this.getOrCreateUser(ctx);
            await this.updateUserActivity(ctx.userId);
            if (ctx.message.text.startsWith('/')) {
                return;
            }
            if (ctx.session.aiChatMode) {
                await this.handleAIChatMessage(ctx, ctx.message.text);
                return;
            }
            if (ctx.session.aiHabitCreationMode) {
                await this.handleAIHabitCreationMessage(ctx, ctx.message.text);
                return;
            }
            if (!user.timezone &&
                (ctx.session.step === 'adding_task' ||
                    ctx.session.step === 'adding_habit')) {
                await this.askForTimezone(ctx);
                return;
            }
            if (ctx.session.step === 'waiting_for_city') {
                await this.handleCityInput(ctx, ctx.message.text);
                return;
            }
            if (ctx.session.step === 'waiting_for_task_title') {
                await this.handleTaskCreation(ctx, ctx.message.text);
                return;
            }
            if (ctx.session.step === 'waiting_for_custom_feedback') {
                await this.completeFeedback(ctx, ctx.message.text);
                return;
            }
            if (ctx.session.step === 'waiting_custom_dependency') {
                const dependencyName = ctx.message.text.trim();
                if (!dependencyName || dependencyName.length < 2) {
                    await ctx.replyWithMarkdown('‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                    return;
                }
                ctx.session.step = undefined;
                await ctx.replyWithMarkdown(`
üéØ *–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –±–æ—Ä—å–±—É —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é: "${dependencyName}"*

ü§ñ –°–∏—Å—Ç–µ–º–∞ –ò–ò –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.

ÔøΩ *–¢—ã —É–∂–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ —Å–≤–æ–±–æ–¥–µ!*

–ß—Ç–æ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç:
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –ò–ò
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç–≤–æ–∏—Ö —Ü–µ–ª—è—Ö
‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏–π

‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!*
        `, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: '‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
                                    callback_data: 'choose_dependency',
                                },
                            ],
                        ],
                    },
                });
                try {
                    this.startDailyMotivation(ctx.userId, 'custom');
                    await ctx.replyWithMarkdown(`
‚úÖ *–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø—É—Å–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç!*

üéØ **–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å:** ${dependencyName}
üìÖ **–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:** ${new Date().toLocaleDateString('ru-RU')}

ü§ñ **–ò–ò-—Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:**
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏–π

üí™ *–ü–µ—Ä–≤–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç —Å–µ–≥–æ–¥–Ω—è –≤ 21:00*

–£–¥–∞—á–∏ –≤ –±–æ—Ä—å–±–µ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é! –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! üöÄ
          `, {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                        callback_data: 'back_to_menu',
                                    },
                                ],
                            ],
                        },
                    });
                }
                catch (error) {
                    this.logger.error(`Error setting up custom dependency: ${error}`);
                    await ctx.replyWithMarkdown('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: '‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
                                        callback_data: 'choose_dependency',
                                    },
                                ],
                            ],
                        },
                    });
                }
                return;
            }
            if (ctx.session.waitingForReminderTime && ctx.session.pendingReminder) {
                await this.handleReminderTimeInput(ctx, ctx.message.text);
                return;
            }
            if (ctx.session.step === 'onboarding_waiting_habit') {
                const habitName = ctx.message.text;
                try {
                    await this.habitService.createHabit({
                        userId: ctx.userId,
                        title: habitName,
                        description: undefined,
                        frequency: 'DAILY',
                        targetCount: 1,
                    });
                    ctx.session.step = undefined;
                    await ctx.replyWithMarkdown(`
‚úÖ *–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞: "${habitName}"*

–ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.

üéØ –ü—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É...
        `);
                    setTimeout(async () => {
                        await this.showOnboardingStep3(ctx);
                    }, 2000);
                }
                catch (error) {
                    this.logger.error('Error creating habit during onboarding:', error);
                    await ctx.replyWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                }
                return;
            }
            if (ctx.session.step === 'adding_habit') {
                const habitTitle = ctx.message.text.trim();
                if (!habitTitle || habitTitle.length < 2) {
                    await ctx.replyWithMarkdown('‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
                    return;
                }
                try {
                    await this.habitService.createHabit({
                        userId: ctx.userId,
                        title: habitTitle,
                        description: undefined,
                        frequency: 'DAILY',
                        targetCount: 1,
                    });
                    ctx.session.step = undefined;
                    await ctx.replyWithMarkdown(`
‚úÖ *–ü—Ä–∏–≤—ã—á–∫–∞ "${habitTitle}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*

üéØ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏".

*–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å - –∫–ª—é—á –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–∏–≤—ã—á–µ–∫!
          `, {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üîÑ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'menu_habits' }],
                                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                            ],
                        },
                    });
                }
                catch (error) {
                    this.logger.error(`Error creating habit: ${error}`);
                    await ctx.replyWithMarkdown('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                }
                return;
            }
            if (this.isReminderRequest(ctx.message.text)) {
                this.logger.log(`Processing reminder request: "${ctx.message.text}" for user ${ctx.userId}`);
                await this.processReminderFromText(ctx, ctx.message.text);
                return;
            }
            if (ctx.session.step) {
                return;
            }
            if (this.isTaskRequest(ctx.message.text)) {
                this.logger.log(`Processing task from text: "${ctx.message.text}" for user ${ctx.userId}`);
                await this.processTaskFromText(ctx, ctx.message.text);
                return;
            }
            if (this.isGeneralChatMessage(ctx.message.text)) {
                ctx.session.aiChatMode = true;
                await this.handleAIChatMessage(ctx, ctx.message.text);
                return;
            }
            await ctx.replyWithMarkdown(`
ü§î *–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É*

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.

üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å "–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ..." —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
      `);
        });
        this.bot.on('voice', async (ctx) => {
            await this.handleAudioMessage(ctx, 'voice');
        });
        this.bot.on('audio', async (ctx) => {
            await this.handleAudioMessage(ctx, 'audio');
        });
        this.bot.action('menu_tasks', async (ctx) => {
            await ctx.answerCbQuery();
            const user = await this.userService.findByTelegramId(ctx.userId);
            if (!user.timezone) {
                ctx.session.step = 'adding_task';
                await this.askForTimezone(ctx);
            }
            else {
                await this.showTasksMenu(ctx);
            }
        });
        this.bot.action('menu_habits', async (ctx) => {
            await ctx.answerCbQuery();
            const user = await this.userService.findByTelegramId(ctx.userId);
            if (!user.timezone) {
                ctx.session.step = 'adding_habit';
                await this.askForTimezone(ctx);
            }
            else {
                await this.showHabitsMenu(ctx);
            }
        });
        this.bot.action('habits_list', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showHabitsMenu(ctx);
        });
        this.bot.action('habits_ai_advice', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showHabitsAIAdvice(ctx);
        });
        this.bot.action('habits_add', async (ctx) => {
            await ctx.answerCbQuery();
            const user = await this.userService.findByTelegramId(ctx.userId);
            if (!user.timezone) {
                ctx.session.pendingAction = 'adding_habit';
                await this.askForTimezone(ctx);
            }
            else {
                ctx.session.step = 'adding_habit';
                await ctx.editMessageTextWithMarkdown('üîÑ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                        ],
                    },
                });
            }
        });
        this.bot.action(/^habit_set_reminder_(.+)$/, async (ctx) => {
            await ctx.answerCbQuery();
            const habitId = ctx.match[1];
            await this.showReminderSetup(ctx, habitId);
        });
        this.bot.action(/^set_reminder_(.+)_(.+)$/, async (ctx) => {
            await ctx.answerCbQuery('‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!');
            const habitId = ctx.match[1];
            const interval = ctx.match[2];
            await this.setHabitReminder(ctx, habitId, interval);
        });
        this.bot.action(/^habit_complete_(.+)$/, async (ctx) => {
            await ctx.answerCbQuery();
            const habitId = ctx.match[1];
            await this.completeHabit(ctx, habitId);
        });
        this.bot.action(/^complete_habit_(.+)$/, async (ctx) => {
            await ctx.answerCbQuery('‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!');
            const habitId = ctx.match[1];
            await this.completeHabitFromNotification(ctx, habitId);
        });
        this.bot.action(/^snooze_habit_(.+)_(\d+)$/, async (ctx) => {
            const habitId = ctx.match[1];
            const minutes = parseInt(ctx.match[2]);
            await ctx.answerCbQuery(`‚è∞ –ù–∞–ø–æ–º–Ω–∏–º —á–µ—Ä–µ–∑ ${minutes} –º–∏–Ω—É—Ç`);
            await this.snoozeHabitFromNotification(ctx, habitId, minutes);
        });
        this.bot.action(/^habit_stats_(.+)$/, async (ctx) => {
            await ctx.answerCbQuery();
            const habitId = ctx.match[1];
            await this.showHabitStatsFromNotification(ctx, habitId);
        });
        this.bot.action(/^skip_habit_(.+)$/, async (ctx) => {
            await ctx.answerCbQuery('‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è');
            const habitId = ctx.match[1];
            await this.skipHabitFromNotification(ctx, habitId);
        });
        this.bot.action('habits_list_more', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showAllHabitsList(ctx);
        });
        this.bot.action('habits_manage', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showHabitsManagement(ctx);
        });
        this.bot.action(/^habit_delete_(.+)$/, async (ctx) => {
            await ctx.answerCbQuery();
            const habitId = ctx.match[1];
            await this.confirmHabitDeletion(ctx, habitId);
        });
        this.bot.action(/^confirm_delete_habit_(.+)$/, async (ctx) => {
            await ctx.answerCbQuery();
            const habitId = ctx.match[1];
            await this.deleteHabit(ctx, habitId);
        });
        this.bot.action(/^cancel_delete_habit_(.+)$/, async (ctx) => {
            await ctx.answerCbQuery('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
            await this.showHabitsManagement(ctx);
        });
        this.bot.action('menu_mood', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showMoodMenu(ctx);
        });
        this.bot.action('menu_focus', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown('‚è∞ *–°–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
        });
        this.bot.action('menu_stats', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown('üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
        });
        this.bot.action('menu_settings', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown('‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
        });
        this.bot.action('menu_achievements', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown('üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
        });
        this.bot.action('menu_ai', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown('üí° *–ò–ò –ü–æ–º–æ—â–Ω–∏–∫* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
        });
        this.bot.action('add_item', async (ctx) => {
            await ctx.answerCbQuery();
            const keyboard = {
                inline_keyboard: [
                    [{ text: 'üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'tasks_add' }],
                    [{ text: 'üîÑ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É', callback_data: 'habits_add' }],
                    [{ text: 'üéôÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'voice_message' }],
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }],
                ],
            };
            await ctx.editMessageTextWithMarkdown('‚ûï *–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?*', {
                reply_markup: keyboard,
            });
        });
        this.bot.action('voice_message', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`üéôÔ∏è *–û–∑–≤—É—á—å—Ç–µ –∑–∞–¥–∞—á—É*

–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∏–∫—Ç–æ–≤–∞—Ç—å:
‚Ä¢ üìù –ù–æ–≤—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
‚Ä¢ üîÑ –ù–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É
‚Ä¢ ‚ùì –õ—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã

–ü—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—à–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üé§`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'add_item' }],
                    ],
                },
            });
        });
        this.bot.action('my_items', async (ctx) => {
            await ctx.answerCbQuery();
            const keyboard = {
                inline_keyboard: [
                    [{ text: 'üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'tasks_list' }],
                    [{ text: 'üîÑ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'habits_list' }],
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }],
                ],
            };
            await ctx.editMessageTextWithMarkdown('üìã *–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?*', {
                reply_markup: keyboard,
            });
        });
        this.bot.action('my_progress', async (ctx) => {
            await ctx.answerCbQuery();
            const user = await this.userService.findByTelegramId(ctx.userId);
            const userStats = await this.userService.getUserStats(ctx.userId);
            const currentLevelXp = this.userService.getCurrentLevelXp(user);
            const nextLevelXp = this.userService.getNextLevelXp(user);
            const progressXp = this.userService.getProgressXp(user);
            const xpToNextLevel = this.userService.getXpToNextLevel(user);
            const progressRatio = this.userService.getLevelProgressRatio(user);
            const progressBarLength = 10;
            const filledBars = Math.floor(progressRatio * progressBarLength);
            const emptyBars = progressBarLength - filledBars;
            const progressBar = '‚ñà'.repeat(filledBars) + '‚ñë'.repeat(emptyBars);
            await ctx.editMessageTextWithMarkdown(`
ÔøΩ *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å*

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
‚≠ê –û–ø—ã—Ç: ${user.totalXp} XP
üéñÔ∏è –£—Ä–æ–≤–µ–Ω—å: ${user.level}
‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone || '–ù–µ —É–∫–∞–∑–∞–Ω'}

ÔøΩüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${user.totalTasks}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${user.completedTasks}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${userStats.completionRate}%

üéØ **–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è:**
\`${progressBar}\` ${Math.round(progressRatio * 100)}%
${progressXp}/${nextLevelXp - currentLevelXp} XP –¥–æ ${user.level + 1} —É—Ä–æ–≤–Ω—è

üìÖ **–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω:** ${user.createdAt.toLocaleDateString('ru-RU')}

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üöÄ
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üéØ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                                callback_data: 'progress_stats',
                            },
                            { text: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data: 'achievements' },
                        ],
                        [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        });
        this.bot.action('ai_chat', async (ctx) => {
            await ctx.answerCbQuery();
            await this.startAIChat(ctx);
        });
        this.bot.action('more_functions', async (ctx) => {
            await ctx.answerCbQuery();
            const keyboard = {
                inline_keyboard: [
                    [
                        { text: 'üòä –ú–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', callback_data: 'menu_mood' },
                        { text: 'üçÖ –§–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'pomodoro_focus' },
                    ],
                    [
                        { text: 'üé≠ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏', callback_data: 'dependencies' },
                        { text: 'üöÄ –ß–µ–ª–ª–µ–Ω–¥–∂–∏', callback_data: 'challenges' },
                    ],
                    [
                        {
                            text: 'üí∞ –ë–æ–Ω—É—Å—ã –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã',
                            callback_data: 'bonuses_referrals',
                        },
                        { text: 'üõçÔ∏è XP –ú–∞–≥–∞–∑–∏–Ω', callback_data: 'shop' },
                    ],
                    [
                        { text: 'ü•á –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data: 'achievements' },
                        { text: 'üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data: 'reminders' },
                    ],
                    [
                        { text: '‚¨ÖÔ∏è', callback_data: 'back_to_menu' },
                        { text: 'üë§', callback_data: 'user_profile' },
                        { text: '‚öôÔ∏è', callback_data: 'user_settings' },
                    ],
                ],
            };
            await ctx.editMessageTextWithMarkdown(`
üöÄ *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏*

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:
      `, {
                reply_markup: keyboard,
            });
        });
        this.bot.action('progress_stats', async (ctx) => {
            await ctx.answerCbQuery();
            const user = await this.userService.findByTelegramId(ctx.userId);
            const userStats = await this.userService.getUserStats(ctx.userId);
            const today = new Date();
            const todayStr = today.toLocaleDateString('ru-RU');
            await ctx.editMessageTextWithMarkdown(`
üéØ *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üìä **–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚≠ê –û–ø—ã—Ç: ${user.totalXp} XP
üéñÔ∏è –£—Ä–æ–≤–µ–Ω—å: ${user.level}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.createdAt.toLocaleDateString('ru-RU')}

ÔøΩ **–ó–∞–¥–∞—á–∏:**
üìù –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: ${user.totalTasks}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${user.completedTasks}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${userStats.completionRate}%
üéØ –°–µ–≥–æ–¥–Ω—è: ${user.todayTasks}

üîÑ **–ü—Ä–∏–≤—ã—á–∫–∏:**
üí™ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: ${user.totalHabits}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${user.completedHabits}
ÔøΩ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${userStats.habitCompletionRate}%
üéØ –°–µ–≥–æ–¥–Ω—è: ${user.todayHabits}

üìà **–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:** ${todayStr}
${user.todayTasks > 0 || user.todayHabits > 0 ? 'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å!' : 'üî¥ –ü–æ–∫–∞ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'}

üéÆ **–°–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –∏–≥—Ä—ã!**
üåÖ –†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞ (–ø–æ–¥—ä–µ–º –¥–æ 7:00)
üèÉ –°–ø—Ä–∏–Ω—Ç–µ—Ä –∑–∞–¥–∞—á (–≤—ã–ø–æ–ª–Ω–∏—Ç—å 5 –∑–∞–¥–∞—á –ø–æ–¥—Ä—è–¥)  
üî• –°–µ—Ä–∏—è —É—Å–ø–µ—Ö–æ–≤ (–≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–Ω—è)
üéØ –°–Ω–∞–π–ø–µ—Ä —Ü–µ–ª–µ–π (–ø–æ–ø–∞—Å—Ç—å –≤ –¥–µ–¥–ª–∞–π–Ω)

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è XP! üöÄ
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üìä –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                                callback_data: 'my_progress',
                            },
                            { text: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data: 'achievements' },
                        ],
                        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
                    ],
                },
            });
        });
        this.bot.action('user_settings', async (ctx) => {
            await ctx.answerCbQuery();
            const user = await this.userService.findByTelegramId(ctx.userId);
            await ctx.editMessageTextWithMarkdown(`
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
üÜî ID: ${user.id}
üë§ –ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìß Username: ${user.username ? `@${user.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.notifications ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${user.reminderTime}
üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞: ${user.weeklySummary ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}

üé® **–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å:**
üé≠ –¢–µ–º–∞: ${user.theme}
‚ú® –ê–Ω–∏–º–∞—Ü–∏–∏: ${user.showAnimations ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã: ${user.voiceCommands ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}

ü§ñ **AI –∏ —Ä–µ–∂–∏–º—ã:**
üß† AI —Ä–µ–∂–∏–º: ${user.aiMode ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}
üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: ${user.dryMode ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}

üîí **–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:**
üëÅÔ∏è –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: ${user.privacyLevel}
üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üèôÔ∏è –ì–æ—Ä–æ–¥: ${user.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                                callback_data: 'settings_notifications',
                            },
                            { text: 'üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å', callback_data: 'settings_interface' },
                        ],
                        [
                            { text: 'ü§ñ AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings_ai' },
                            { text: 'üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å', callback_data: 'settings_privacy' },
                        ],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        });
        this.bot.action('settings_notifications', async (ctx) => {
            await ctx.answerCbQuery();
            const user = await this.userService.findByTelegramId(ctx.userId);
            await ctx.editMessageTextWithMarkdown(`
üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.notifications ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${user.reminderTime}
üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞: ${user.weeklySummary ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}
üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${user.dailyReminders ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: user.notifications
                                    ? 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
                                    : 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                                callback_data: 'toggle_notifications',
                            },
                        ],
                        [
                            {
                                text: '‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π',
                                callback_data: 'change_reminder_time',
                            },
                        ],
                        [
                            {
                                text: user.weeklySummary
                                    ? 'üìä‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —Å–≤–æ–¥–∫—É'
                                    : 'üìä‚úÖ –í–∫–ª—é—á–∏—Ç—å —Å–≤–æ–¥–∫—É',
                                callback_data: 'toggle_weekly_summary',
                            },
                        ],
                        [
                            {
                                text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
                                callback_data: 'user_settings',
                            },
                        ],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        });
        this.bot.action('settings_interface', async (ctx) => {
            await ctx.answerCbQuery();
            const user = await this.userService.findByTelegramId(ctx.userId);
            await ctx.editMessageTextWithMarkdown(`
üé® *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞*

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
üé≠ –¢–µ–º–∞: ${user.theme}
‚ú® –ê–Ω–∏–º–∞—Ü–∏–∏: ${user.showAnimations ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã: ${user.voiceCommands ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: user.showAnimations
                                    ? '‚ú®‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏'
                                    : '‚ú®‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏',
                                callback_data: 'toggle_animations',
                            },
                        ],
                        [
                            {
                                text: user.voiceCommands
                                    ? 'üéôÔ∏è‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å'
                                    : 'üéôÔ∏è‚úÖ –í–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å',
                                callback_data: 'toggle_voice_commands',
                            },
                        ],
                        [{ text: 'üé≠ –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', callback_data: 'change_theme' }],
                        [
                            {
                                text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
                                callback_data: 'user_settings',
                            },
                        ],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        });
        this.bot.action('settings_ai', async (ctx) => {
            await ctx.answerCbQuery();
            const user = await this.userService.findByTelegramId(ctx.userId);
            await ctx.editMessageTextWithMarkdown(`
ü§ñ *AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
üß† AI —Ä–µ–∂–∏–º: ${user.aiMode ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}
üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: ${user.dryMode ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}

üí° AI —Ä–µ–∂–∏–º –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É –¥–∞–≤–∞—Ç—å —É–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: user.aiMode ? 'üß†‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å AI' : 'üß†‚úÖ –í–∫–ª—é—á–∏—Ç—å AI',
                                callback_data: 'toggle_ai_mode',
                            },
                        ],
                        [
                            {
                                text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
                                callback_data: 'user_settings',
                            },
                        ],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        });
        this.bot.action('settings_privacy', async (ctx) => {
            await ctx.answerCbQuery();
            const user = await this.userService.findByTelegramId(ctx.userId);
            await ctx.editMessageTextWithMarkdown(`
üîí *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏*

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
üëÅÔ∏è –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: ${user.privacyLevel}
üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üèôÔ∏è –ì–æ—Ä–æ–¥: ${user.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üí° –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∏–¥–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üëÅÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å',
                                callback_data: 'change_privacy_level',
                            },
                        ],
                        [
                            {
                                text: 'üåç –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å',
                                callback_data: 'change_timezone',
                            },
                        ],
                        [
                            {
                                text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
                                callback_data: 'user_settings',
                            },
                        ],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        });
        this.bot.action('toggle_notifications', async (ctx) => {
            await ctx.answerCbQuery();
            const user = await this.userService.findByTelegramId(ctx.userId);
            await this.userService.updateUser(ctx.userId, {
                notifications: !user.notifications,
            });
            await ctx.editMessageTextWithMarkdown(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${!user.notifications ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º',
                                callback_data: 'settings_notifications',
                            },
                        ],
                    ],
                },
            });
        });
        this.bot.action('toggle_weekly_summary', async (ctx) => {
            await ctx.answerCbQuery();
            const user = await this.userService.findByTelegramId(ctx.userId);
            await this.userService.updateUser(ctx.userId, {
                weeklySummary: !user.weeklySummary,
            });
            await ctx.editMessageTextWithMarkdown(`‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ ${!user.weeklySummary ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º',
                                callback_data: 'settings_notifications',
                            },
                        ],
                    ],
                },
            });
        });
        this.bot.action('toggle_animations', async (ctx) => {
            await ctx.answerCbQuery();
            const user = await this.userService.findByTelegramId(ctx.userId);
            await this.userService.updateUser(ctx.userId, {
                showAnimations: !user.showAnimations,
            });
            await ctx.editMessageTextWithMarkdown(`‚úÖ –ê–Ω–∏–º–∞—Ü–∏–∏ ${!user.showAnimations ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É',
                                callback_data: 'settings_interface',
                            },
                        ],
                    ],
                },
            });
        });
        this.bot.action('toggle_voice_commands', async (ctx) => {
            await ctx.answerCbQuery();
            const user = await this.userService.findByTelegramId(ctx.userId);
            await this.userService.updateUser(ctx.userId, {
                voiceCommands: !user.voiceCommands,
            });
            await ctx.editMessageTextWithMarkdown(`‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ${!user.voiceCommands ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É',
                                callback_data: 'settings_interface',
                            },
                        ],
                    ],
                },
            });
        });
        this.bot.action('toggle_ai_mode', async (ctx) => {
            await ctx.answerCbQuery();
            const user = await this.userService.findByTelegramId(ctx.userId);
            await this.userService.updateUser(ctx.userId, {
                aiMode: !user.aiMode,
            });
            await ctx.editMessageTextWithMarkdown(`‚úÖ AI —Ä–µ–∂–∏–º ${!user.aiMode ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
                                callback_data: 'settings_ai',
                            },
                        ],
                    ],
                },
            });
        });
        this.bot.action('achievements', async (ctx) => {
            await ctx.answerCbQuery();
            const user = await this.userService.findByTelegramId(ctx.userId);
            await ctx.editMessageTextWithMarkdown(`
ü•á *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*

**–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:**
üèÜ –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ - –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
‚≠ê –ù–æ–≤–∏—á–æ–∫ - –ü–æ–ª—É—á–∏—Ç—å 100 XP
üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç 3 –¥–Ω—è

**–í –ø—Ä–æ—Ü–µ—Å—Å–µ:**
 –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π - –í—ã–ø–æ–ª–Ω–∏—Ç—å 50 –∑–∞–¥–∞—á (${user.completedTasks}/50)
üöÄ –≠–Ω—Ç—É–∑–∏–∞—Å—Ç - –ü–æ–ª—É—á–∏—Ç—å 1000 XP (${user.totalXp}/1000)
üéØ –¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π - –°–æ–∑–¥–∞—Ç—å 20 –∑–∞–¥–∞—á (${user.totalTasks}/20)

**–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:**
‚ö° –ú–æ–ª–Ω–∏—è - –í—ã–ø–æ–ª–Ω–∏—Ç—å 10 –∑–∞–¥–∞—á –∑–∞ –¥–µ–Ω—å
üåü –õ–µ–≥–µ–Ω–¥–∞ - –ü–æ–ª—É—á–∏—Ç—å 10000 XP
üèÖ –ú–∞—Å—Ç–µ—Ä - –í—ã–ø–æ–ª–Ω–∏—Ç—å 200 –∑–∞–¥–∞—á

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π! üéâ
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
                    ],
                },
            });
        });
        this.bot.action('challenges', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`
üöÄ *–ß–µ–ª–ª–µ–Ω–¥–∂–∏*

**–ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è:**
‚è∞ 7-–¥–Ω–µ–≤–Ω—ã–π –º–∞—Ä–∞—Ñ–æ–Ω –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
üìù –í—ã–ø–æ–ª–Ω–∏—Ç—å 21 –∑–∞–¥–∞—á—É –∑–∞ –Ω–µ–¥–µ–ª—é

**–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã:**
üåÖ –†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞ - 5 –∑–∞–¥–∞—á –¥–æ 10:00
üåô –ù–æ—á–Ω–∞—è —Å–æ–≤–∞ - 3 –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ 20:00
‚ö° –°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —Ä–µ–∂–∏–º - 10 –∑–∞–¥–∞—á –∑–∞ –¥–µ–Ω—å

**–ù–∞–≥—Ä–∞–¥—ã:**
üèÜ –ó–Ω–∞—á–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
‚≠ê –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ XP
üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

*–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —Å–∫–æ—Ä–æ –Ω–æ–≤—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏!*
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
                    ],
                },
            });
        });
        this.bot.action('bonuses_referrals', async (ctx) => {
            await ctx.answerCbQuery();
            const botUsername = 'test_healthcheck_dev_bot';
            const referralLink = `https://t.me/${botUsername}?start=ref_${ctx.userId}`;
            const referralStats = await this.getReferralStats(ctx.userId);
            const progress = Math.min(referralStats.totalReferrals, 5);
            const progressBar = '‚ñà'.repeat(progress) + '‚ñë'.repeat(5 - progress);
            let nextMilestone = '';
            if (referralStats.totalReferrals < 1) {
                nextMilestone = '\nüéØ **–°–ª–µ–¥—É—é—â–∞—è —Ü–µ–ª—å:** 1 –¥—Ä—É–≥ = +200 XP –±–æ–Ω—É—Å!';
            }
            else if (referralStats.totalReferrals < 3) {
                nextMilestone = '\nüéØ **–°–ª–µ–¥—É—é—â–∞—è —Ü–µ–ª—å:** 3 –¥—Ä—É–≥–∞ = +500 XP –±–æ–Ω—É—Å!';
            }
            else if (referralStats.totalReferrals < 5) {
                nextMilestone = '\nüéØ **–°–ª–µ–¥—É—é—â–∞—è —Ü–µ–ª—å:** 5 –¥—Ä—É–∑–µ–π = +1000 XP –±–æ–Ω—É—Å!';
            }
            else {
                nextMilestone = '\nüèÜ **–í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!**';
            }
            await ctx.editMessageTextWithMarkdown(`
ü§ù *–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê*

ÔøΩ **–ó–ê–†–ê–ë–ê–¢–´–í–ê–ô–¢–ï –†–ï–ê–õ–¨–ù–´–ï –î–ï–ù–¨–ì–ò!**
–ü–æ–ª—É—á–∞–π—Ç–µ 40% –æ—Ç –≤—Å–µ—Ö –æ–ø–ª–∞—Ç –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏!

üí° **–ü–†–ò–ú–ï–†:**
–í–∞—à –¥—Ä—É–≥ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≥–æ–¥ –∑–∞ 999‚ÇΩ
‚Üí –í—ã –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç–µ 399‚ÇΩ –Ω–∞ —Å–≤–æ–π —Å—á–µ—Ç! üí∏

ÔøΩüîó **–í–ê–®–ê –°–°–´–õ–ö–ê** üëá
\`${referralLink}\`

üí≥ **–í–ê–® –†–ï–§–ï–†–ê–õ–¨–ù–´–ô –ë–ê–õ–ê–ù–°:**
${referralStats.referralBalance}‚ÇΩ

üìä **–ü–†–û–ì–†–ï–°–° –î–û 5 –î–†–£–ó–ï–ô:**
${progressBar} ${referralStats.totalReferrals}/5${nextMilestone}

**–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–¢–ù–ï–†–°–¢–í–ê:**
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${referralStats.totalReferrals}
üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${referralStats.activeReferrals}  
üéÅ –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: ${referralStats.totalBonus} XP
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–µ–Ω–µ–≥: ${referralStats.referralBalance}‚ÇΩ

**–°–ò–°–¢–ï–ú–ê –í–û–ó–ù–ê–ì–†–ê–ñ–î–ï–ù–ò–ô:**
üí∏ **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ:**
‚Ä¢ –ó–∞ –æ–ø–ª–∞—Ç—É –º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥—Ä—É–≥–∞ (199‚ÇΩ): +79‚ÇΩ
‚Ä¢ –ó–∞ –æ–ø–ª–∞—Ç—É –≥–æ–¥–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥—Ä—É–≥–∞ (999‚ÇΩ): +399‚ÇΩ

üéÅ **XP –ë–æ–Ω—É—Å—ã:**
‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞: +500 XP
‚Ä¢ 1-–π –¥—Ä—É–≥: +200 XP –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ  
‚Ä¢ 3 –¥—Ä—É–≥–∞: +500 XP –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
‚Ä¢ 5 –¥—Ä—É–∑–µ–π: +1000 XP –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
‚Ä¢ –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç: +200 XP –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

**–í–ê–®–ò –î–†–£–ó–¨–Ø:**
${referralStats.topReferrals && referralStats.topReferrals.length > 0
                ? referralStats.topReferrals
                    .map((ref, i) => `${i + 1}. ${ref.name} ${ref.isActive ? 'üü¢' : 'üî¥'} (${ref.joinDate})`)
                    .join('\n')
                : '–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤'}

üí° **–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!**
üü¢ = –∞–∫—Ç–∏–≤–µ–Ω –∑–∞ –Ω–µ–¥–µ–ª—é, üî¥ = –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É',
                                callback_data: 'copy_referral_link',
                            },
                            {
                                text: 'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                                callback_data: 'referral_stats',
                            },
                        ],
                        [
                            { text: 'üí∞ –í—ã–≤–µ—Å—Ç–∏ –±–æ–Ω—É—Å—ã', callback_data: 'withdraw_bonus' },
                            { text: 'üí∏ –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏', callback_data: 'withdraw_money' },
                        ],
                        [
                            {
                                text: 'üéì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç',
                                callback_data: 'how_referral_works',
                            },
                        ],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
                    ],
                },
            });
        });
        this.bot.action('copy_referral_link', async (ctx) => {
            await ctx.answerCbQuery('üìã –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!');
            const botUsername = 'test_healthcheck_dev_bot';
            const referralLink = `https://t.me/${botUsername}?start=ref_${ctx.userId}`;
            await ctx.reply(`üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*\n\n\`${referralLink}\`\n\nüì± –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!\nüí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ +500 XP + 40% –æ—Ç –≤—Å–µ—Ö –∏—Ö –æ–ø–ª–∞—Ç!`, { parse_mode: 'Markdown' });
        });
        this.bot.action('referral_stats', async (ctx) => {
            await ctx.answerCbQuery();
            const referralStats = await this.getReferralStats(ctx.userId);
            const monthAgo = new Date();
            monthAgo.setMonth(monthAgo.getMonth() - 1);
            const user = await this.userService.findByTelegramId(ctx.userId);
            const monthlyReferrals = await this.prisma.user.count({
                where: {
                    referredBy: user.id,
                    createdAt: {
                        gte: monthAgo,
                    },
                },
            });
            const activityPercent = referralStats.totalReferrals > 0
                ? Math.round((referralStats.activeReferrals / referralStats.totalReferrals) *
                    100)
                : 0;
            await ctx.editMessageTextWithMarkdown(`
üìä *–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*

**–ó–ê –í–°–ï –í–†–ï–ú–Ø:**
üë• –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${referralStats.totalReferrals}
üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralStats.activeReferrals}
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ XP: ${referralStats.totalBonus}

**–ó–ê –≠–¢–û–¢ –ú–ï–°–Ø–¶:**
üìà –ù–æ–≤—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: ${monthlyReferrals}
‚≠ê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${activityPercent}%
üéÅ –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: ${monthlyReferrals * 500} XP

**–î–û–°–¢–ò–ñ–ï–ù–ò–Ø:**
${referralStats.totalReferrals >= 1 ? 'üèÜ –ü–µ—Ä–≤—ã–π –¥—Ä—É–≥ (+200 XP)' : 'üîí –ü–µ—Ä–≤—ã–π –¥—Ä—É–≥ (–ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 1 –¥—Ä—É–≥–∞)'}
${referralStats.totalReferrals >= 3 ? 'üèÜ –¢—Ä–æ–π–∫–∞ –¥—Ä—É–∑–µ–π (+500 XP)' : 'ÔøΩ –¢—Ä–æ–π–∫–∞ –¥—Ä—É–∑–µ–π (–ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 3 –¥—Ä—É–∑–µ–π)'}
${referralStats.totalReferrals >= 5 ? 'üèÜ –ü—è—Ç–µ—Ä–∫–∞ –¥—Ä—É–∑–µ–π (+1000 XP)' : 'üîí –ü—è—Ç–µ—Ä–∫–∞ –¥—Ä—É–∑–µ–π (–ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 5 –¥—Ä—É–∑–µ–π)'}

**–ê–ö–¢–ò–í–ù–û–°–¢–¨ –î–†–£–ó–ï–ô:**
${referralStats.topReferrals && referralStats.topReferrals.length > 0
                ? referralStats.topReferrals
                    .map((ref, i) => {
                    const status = ref.isActive ? 'ÔøΩ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
                    return `${i + 1}. ${ref.name} - ${status}`;
                })
                    .join('\n')
                : '–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤'}

*üí° –ê–∫—Ç–∏–≤–Ω—ã–µ –¥—Ä—É–∑—å—è - —ç—Ç–æ —Ç–µ, –∫—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π*
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º', callback_data: 'bonuses_referrals' }],
                    ],
                },
            });
        });
        this.bot.action('how_referral_works', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`
üéì *–ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢ –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê*

üí∏ **–ó–ê–†–ê–ë–ê–¢–´–í–ê–ô–¢–ï –†–ï–ê–õ–¨–ù–´–ï –î–ï–ù–¨–ì–ò!**
–ü–æ–ª—É—á–∞–π—Ç–µ 40% –æ—Ç –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π!

**–®–ê–ì 1: –ü–û–î–ï–õ–ò–¢–ï–°–¨ –°–°–´–õ–ö–û–ô**
üì± –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º –≤ —á–∞—Ç –∏–ª–∏ —Å–æ—Ü—Å–µ—Ç–∏
üîó –°—Å—ã–ª–∫–∞: https://t.me/test_healthcheck_dev_bot?start=ref_–í–ê–®ID

**–®–ê–ì 2: –î–†–£–ì –†–ï–ì–ò–°–¢–†–ò–†–£–ï–¢–°–Ø**
üë§ –î—Ä—É–≥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ
üöÄ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –±–æ—Ç–µ —á–µ—Ä–µ–∑ /start
üéÅ –ü–æ–ª—É—á–∞–µ—Ç +200 XP –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

**–®–ê–ì 3: –ü–û–õ–£–ß–ê–ï–¢–ï XP –ë–û–ù–£–°–´**
üí∞ +500 XP —Å—Ä–∞–∑—É –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
üèÜ +200 XP –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞ 1-–≥–æ –¥—Ä—É–≥–∞
üèÜ +500 XP –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞ 3-—Ö –¥—Ä—É–∑–µ–π
üèÜ +1000 XP –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞ 5-–∏ –¥—Ä—É–∑–µ–π

**–®–ê–ì 4: –ü–û–õ–£–ß–ê–ï–¢–ï –î–ï–ù–¨–ì–ò**
üí∏ –î—Ä—É–≥ –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É 199‚ÇΩ ‚Üí –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 79‚ÇΩ
üí∏ –î—Ä—É–≥ –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É 999‚ÇΩ ‚Üí –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 399‚ÇΩ
üí∞ –î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å
üí≥ –í—ã–≤–æ–¥ –æ—Ç 100‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É/–∫–æ—à–µ–ª–µ–∫

**–ü–†–ò–ú–ï–† –ó–ê–†–ê–ë–û–¢–ö–ê:**
üë• 5 –¥—Ä—É–∑–µ–π –∫—É–ø–∏–ª–∏ –≥–æ–¥–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
üí∞ 5 √ó 399‚ÇΩ = 1,995‚ÇΩ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥!
üéÅ + 4,200 XP –±–æ–Ω—É—Å–æ–≤

**–£–°–õ–û–í–ò–Ø:**
‚Ä¢ –°–∞–º–æ–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è
‚Ä¢ –í—ã–ø–ª–∞—Ç—ã –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –∏ –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–µ
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥: 100‚ÇΩ

*üöÄ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!*
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É',
                                callback_data: 'copy_referral_link',
                            },
                            { text: '‚¨ÖÔ∏è –ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º', callback_data: 'bonuses_referrals' },
                        ],
                    ],
                },
            });
        });
        this.bot.action('withdraw_bonus', async (ctx) => {
            await ctx.answerCbQuery();
            const user = await this.userService.findByTelegramId(ctx.userId);
            const referralStats = await this.getReferralStats(ctx.userId);
            await ctx.editMessageTextWithMarkdown(`
üí∞ *–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ë–û–ù–£–°–û–í*

**–í–ê–®–ò –ë–û–ù–£–°–´:**
‚≠ê –û–±—â–∏–π XP: ${user.totalXp}
üéÅ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralStats.totalBonus} XP
ÔøΩ –£—Ä–æ–≤–µ–Ω—å: ${user.level}

**–ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ë–û–ù–£–°–´:**
üì± XP –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –±–æ—Ç–µ
ÔøΩ –ü–æ–≤—ã—à–∞–µ—Ç –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∏ —Å—Ç–∞—Ç—É—Å
üîì –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚ö° –£—Å–∫–æ—Ä—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∑–∞–¥–∞—á–∞—Ö

**–ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –í–´–°–û–ö–û–ì–û –£–†–û–í–ù–Ø:**
üéØ –ë–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ –±–æ—Ç–µ
‚≠ê –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
üèÜ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
üëë VIP —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

**–ë–£–î–£–©–ò–ï –§–£–ù–ö–¶–ò–ò:**
ÔøΩ –ú–∞–≥–∞–∑–∏–Ω –Ω–∞–≥—Ä–∞–¥ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
üéÅ –û–±–º–µ–Ω –Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É
üí∏ –î–µ–Ω–µ–∂–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã (–¥–ª—è —Ç–æ–ø-—Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤)

*ÔøΩ –ü–æ–∫–∞ XP —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –∏–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –±–æ—Ç–∞!*
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º', callback_data: 'bonuses_referrals' }],
                    ],
                },
            });
        });
        this.bot.action('withdraw_money', async (ctx) => {
            await ctx.answerCbQuery();
            const referralStats = await this.getReferralStats(ctx.userId);
            if (referralStats.referralBalance < 100) {
                await ctx.editMessageTextWithMarkdown(`
üí∏ *–í–´–í–û–î –†–ï–§–ï–†–ê–õ–¨–ù–´–• –°–†–ï–î–°–¢–í*

‚ùå **–ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –°–†–ï–î–°–¢–í –î–õ–Ø –í–´–í–û–î–ê**

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${referralStats.referralBalance}‚ÇΩ
üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 100‚ÇΩ

üìà **–ö–ê–ö –£–í–ï–õ–ò–ß–ò–¢–¨ –ë–ê–õ–ê–ù–°:**
‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
‚Ä¢ –î—Ä—É–∑—å—è –¥–æ–ª–∂–Ω—ã –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:
  - 199‚ÇΩ/–º–µ—Å—è—Ü ‚Üí –í—ã –ø–æ–ª—É—á–∏—Ç–µ 79‚ÇΩ
  - 999‚ÇΩ/–≥–æ–¥ ‚Üí –í—ã –ø–æ–ª—É—á–∏—Ç–µ 399‚ÇΩ

üí° **–ü–†–ò–ú–ï–†:**
–í—Å–µ–≥–æ 1 –¥—Ä—É–≥ —Å –≥–æ–¥–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π = 399‚ÇΩ ‚úÖ
          `, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: '‚¨ÖÔ∏è –ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º',
                                    callback_data: 'bonuses_referrals',
                                },
                            ],
                        ],
                    },
                });
                return;
            }
            await ctx.editMessageTextWithMarkdown(`
üí∏ *–í–´–í–û–î –†–ï–§–ï–†–ê–õ–¨–ù–´–• –°–†–ï–î–°–¢–í*

üí∞ **–ö –í–´–í–û–î–£:** ${referralStats.referralBalance}‚ÇΩ

üìã **–°–ü–û–°–û–ë–´ –ü–û–õ–£–ß–ï–ù–ò–Ø:**
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (–ª—é–±–æ–π –±–∞–Ω–∫ –†–§)
‚Ä¢ –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)
‚Ä¢ –ÆMoney (–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏)
‚Ä¢ Qiwi –∫–æ—à–µ–ª–µ–∫

‚è∞ **–°–†–û–ö–ò –í–´–ü–õ–ê–¢:**
‚Ä¢ –†–∞–±–æ—á–∏–µ –¥–Ω–∏: 1-3 —á–∞—Å–∞
‚Ä¢ –í—ã—Ö–æ–¥–Ω—ã–µ: –¥–æ 24 —á–∞—Å–æ–≤

‚ùó **–í–ê–ñ–ù–û:**
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 100‚ÇΩ
‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: 0% (–º—ã –±–µ—Ä–µ–º –Ω–∞ —Å–µ–±—è)
‚Ä¢ –ù–∞–ª–æ–≥–∏: —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–§

*üìß –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @support_bot*
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
                                url: 'https://t.me/support_bot',
                            },
                        ],
                        [{ text: '‚¨ÖÔ∏è –ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º', callback_data: 'bonuses_referrals' }],
                    ],
                },
            });
        });
        this.bot.action('user_profile', async (ctx) => {
            await ctx.answerCbQuery();
            const user = await this.userService.findByTelegramId(ctx.userId);
            await ctx.editMessageTextWithMarkdown(`
üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*

**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
üìõ –ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üÜî ID: ${user.id}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${user.createdAt.toLocaleDateString('ru-RU')}
üåç –ì–æ—Ä–æ–¥: ${user.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone || '–ù–µ —É–∫–∞–∑–∞–Ω'}

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚≠ê –û–±—â–∏–π –æ–ø—ã—Ç: ${user.totalXp} XP  
üéñÔ∏è –£—Ä–æ–≤–µ–Ω—å: ${user.level}
üìã –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: ${user.completedTasks}

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.notifications ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
üé® –¢–µ–º–∞: ${user.theme || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'}
ü§ñ –ò–ò-—Ä–µ–∂–∏–º: ${user.aiMode ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'edit_profile' },
                            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' },
                        ],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        });
        this.bot.action('reminders', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showRemindersMenu(ctx);
        });
        this.bot.action('all_reminders', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showAllReminders(ctx);
        });
        this.bot.action('create_reminder_help', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showCreateReminderHelp(ctx);
        });
        this.bot.action('voice_reminder_help', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showVoiceReminderHelp(ctx);
        });
        this.bot.action('manage_reminders', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showManageReminders(ctx);
        });
        this.bot.action('reminders_stats', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showRemindersStats(ctx);
        });
        this.bot.action(/^delete_reminder_(.+)$/, async (ctx) => {
            const reminderId = ctx.match[1];
            await ctx.answerCbQuery();
            await this.handleDeleteReminder(ctx, reminderId);
        });
        this.bot.action('settings_menu', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*

üöß *–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*

–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!

–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚Ä¢ üé® –¢–µ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
‚Ä¢ üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
‚Ä¢ ü§ñ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
‚Ä¢ üë§ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è
‚Ä¢ ÔøΩ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏

ÔøΩ –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π email –≤ –ø—Ä–æ—Ñ–∏–ª–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ.
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
                    ],
                },
            });
        });
        this.bot.action('shop', async (ctx) => {
            await ctx.answerCbQuery();
            const user = await this.userService.findByTelegramId(ctx.userId);
            await ctx.editMessageTextWithMarkdown(`
üõçÔ∏è *XP –ú–∞–≥–∞–∑–∏–Ω*

üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${user.totalXp} XP

**üé® –ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è:**
‚Ä¢ ÔøΩ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è —Ç–µ–º–∞ "–¢–µ–º–Ω–∞—è –º–∞—Ç–µ—Ä–∏—è" - 2000 XP
‚Ä¢ üèÜ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ "–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" - 1500 XP
‚Ä¢ ‚ö° –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ –Ω–∞–±–æ—Ä - 800 XP
‚Ä¢ üåü –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã - 1200 XP

**üöÄ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:**
‚Ä¢ üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - 3000 XP
‚Ä¢ üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á - 2500 XP
‚Ä¢ üîî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - 1800 XP
‚Ä¢ üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö - 2200 XP

üí° –ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ XP –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏! 
‚≠ê –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –µ—â—ë –±–æ–ª—å—à–µ —É–ª—É—á—à–µ–Ω–∏–π!
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üé≠ –¢–µ–º—ã (2000 XP)', callback_data: 'buy_theme_2000' },
                            {
                                text: 'üèÜ –ó–Ω–∞—á–∫–∏ (1500 XP)',
                                callback_data: 'buy_badge_1500',
                            },
                        ],
                        [
                            { text: '‚ö° –≠–º–æ–¥–∑–∏ (800 XP)', callback_data: 'buy_emoji_800' },
                            {
                                text: 'üåü –°—Ç–∏–∫–µ—Ä—ã (1200 XP)',
                                callback_data: 'buy_stickers_1200',
                            },
                        ],
                        [
                            {
                                text: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (3000 XP)',
                                callback_data: 'buy_stats_3000',
                            },
                            {
                                text: 'üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (2500 XP)',
                                callback_data: 'buy_categories_2500',
                            },
                        ],
                        [
                            {
                                text: 'ÔøΩ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (1800 XP)',
                                callback_data: 'buy_notifications_1800',
                            },
                            {
                                text: 'üìä –≠–∫—Å–ø–æ—Ä—Ç (2200 XP)',
                                callback_data: 'buy_export_2200',
                            },
                        ],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
                    ],
                },
            });
        });
        this.bot.action('xp_shop', async (ctx) => {
            await ctx.answerCbQuery();
            const user = await this.userService.findByTelegramId(ctx.userId);
            await ctx.editMessageTextWithMarkdown(`
üõçÔ∏è *XP –ú–∞–≥–∞–∑–∏–Ω*

üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${user.totalXp} XP

**üé® –ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è:**
‚Ä¢ üé≠ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è —Ç–µ–º–∞ "–¢–µ–º–Ω–∞—è –º–∞—Ç–µ—Ä–∏—è" - 2000 XP
‚Ä¢ üèÜ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ "–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" - 1500 XP
‚Ä¢ ‚ö° –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ –Ω–∞–±–æ—Ä - 800 XP
‚Ä¢ üåü –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã - 1200 XP

**üöÄ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:**
‚Ä¢ üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - 3000 XP
‚Ä¢ üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á - 2500 XP
‚Ä¢ üîî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - 1800 XP
‚Ä¢ üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö - 2200 XP

üí° –ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ XP –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏! 
‚≠ê –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –µ—â—ë –±–æ–ª—å—à–µ —É–ª—É—á—à–µ–Ω–∏–π!
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üé≠ –¢–µ–º—ã (2000 XP)', callback_data: 'buy_theme_2000' },
                            {
                                text: 'üèÜ –ó–Ω–∞—á–∫–∏ (1500 XP)',
                                callback_data: 'buy_badge_1500',
                            },
                        ],
                        [
                            { text: '‚ö° –≠–º–æ–¥–∑–∏ (800 XP)', callback_data: 'buy_emoji_800' },
                            {
                                text: 'üåü –°—Ç–∏–∫–µ—Ä—ã (1200 XP)',
                                callback_data: 'buy_stickers_1200',
                            },
                        ],
                        [
                            {
                                text: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (3000 XP)',
                                callback_data: 'buy_stats_3000',
                            },
                            {
                                text: 'üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (2500 XP)',
                                callback_data: 'buy_categories_2500',
                            },
                        ],
                        [
                            {
                                text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (1800 XP)',
                                callback_data: 'buy_notifications_1800',
                            },
                            {
                                text: 'üìä –≠–∫—Å–ø–æ—Ä—Ç (2200 XP)',
                                callback_data: 'buy_export_2200',
                            },
                        ],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
                    ],
                },
            });
        });
        this.bot.action('premium_shop', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`
üí≥ *–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞*

**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Premium –≤–µ—Ä—Å–∏–∏:**
‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏
‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ AI
‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –∑–Ω–∞—á–∫–∏
‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
‚úÖ –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã
‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ò–ò

**–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:**

üí∞ **–ï–∂–µ–º–µ—Å—è—á–Ω–æ**: 199‚ÇΩ/–º–µ—Å—è—Ü
üíé **–ì–æ–¥–æ–≤–∞—è** (—Å–∫–∏–¥–∫–∞ 58%): 999‚ÇΩ/–≥–æ–¥

*–≠–∫–æ–Ω–æ–º–∏—è –ø—Ä–∏ –≥–æ–¥–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ: 1389‚ÇΩ!*
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üí∞ 199‚ÇΩ/–º–µ—Å—è—Ü', callback_data: 'buy_premium_monthly' },
                            {
                                text: 'üíé 999‚ÇΩ/–≥–æ–¥ (-58%)',
                                callback_data: 'buy_premium_yearly',
                            },
                        ],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ XP –º–∞–≥–∞–∑–∏–Ω—É', callback_data: 'shop' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
                    ],
                },
            });
        });
        this.bot.action('buy_theme_2000', async (ctx) => {
            await this.handleXPPurchase(ctx, 'theme', 2000, '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è —Ç–µ–º–∞ "–¢–µ–º–Ω–∞—è –º–∞—Ç–µ—Ä–∏—è"', 'dark_matter');
        });
        this.bot.action('buy_badge_1500', async (ctx) => {
            await this.handleXPPurchase(ctx, 'badge', 1500, '–ó–Ω–∞—á–æ–∫ "–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"', 'productivity_master');
        });
        this.bot.action('buy_emoji_800', async (ctx) => {
            await this.handleXPPurchase(ctx, 'emoji', 800, '–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ –Ω–∞–±–æ—Ä', 'animated_emoji_pack');
        });
        this.bot.action('buy_stickers_1200', async (ctx) => {
            await this.handleXPPurchase(ctx, 'sticker', 1200, '–ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã', 'custom_stickers');
        });
        this.bot.action('buy_stats_3000', async (ctx) => {
            await this.handleXPPurchase(ctx, 'feature', 3000, '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'advanced_stats');
        });
        this.bot.action('buy_categories_2500', async (ctx) => {
            await this.handleXPPurchase(ctx, 'feature', 2500, '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á', 'extra_categories');
        });
        this.bot.action('buy_notifications_1800', async (ctx) => {
            await this.handleXPPurchase(ctx, 'feature', 1800, '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'personal_notifications');
        });
        this.bot.action('buy_export_2200', async (ctx) => {
            await this.handleXPPurchase(ctx, 'feature', 2200, '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', 'data_export');
        });
        this.bot.action('show_limits', async (ctx) => {
            await ctx.answerCbQuery();
            const subscriptionStatus = await this.billingService.getSubscriptionStatus(ctx.userId);
            const limitsText = subscriptionStatus.limits.dailyReminders === -1
                ? '‚àû (–±–µ–∑–ª–∏–º–∏—Ç)'
                : subscriptionStatus.limits.dailyReminders.toString();
            const aiLimitsText = subscriptionStatus.limits.dailyAiQueries === -1
                ? '‚àû (–±–µ–∑–ª–∏–º–∏—Ç)'
                : subscriptionStatus.limits.dailyAiQueries.toString();
            let statusMessage = '';
            if (subscriptionStatus.isTrialActive) {
                statusMessage = `üéÅ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:** ${subscriptionStatus.daysRemaining} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å`;
            }
            else {
                statusMessage = `üíé **–ü–æ–¥–ø–∏—Å–∫–∞:** ${subscriptionStatus.type === 'FREE'
                    ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è'
                    : subscriptionStatus.type === 'PREMIUM'
                        ? 'Premium'
                        : 'Premium Plus'}`;
            }
            await ctx.editMessageTextWithMarkdown(`
üìä *–í–∞—à–∏ –ª–∏–º–∏—Ç—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ*

${statusMessage}

**–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:**
üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${subscriptionStatus.usage.dailyReminders}/${limitsText}
üß† –ò–ò-–∑–∞–ø—Ä–æ—Å—ã: ${subscriptionStatus.usage.dailyAiQueries}/${aiLimitsText}
üìù –ó–∞–¥–∞—á–∏: ${subscriptionStatus.usage.dailyTasks}/${subscriptionStatus.limits.dailyTasks === -1 ? '‚àû' : subscriptionStatus.limits.dailyTasks}
üîÑ –ü—Ä–∏–≤—ã—á–∫–∏: ${subscriptionStatus.usage.dailyHabits}/${subscriptionStatus.limits.dailyHabits === -1 ? '‚àû' : subscriptionStatus.limits.dailyHabits}

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: ${subscriptionStatus.limits.advancedAnalytics ? '‚úÖ' : '‚ùå'}
üé® –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–º—ã: ${subscriptionStatus.limits.customThemes ? '‚úÖ' : '‚ùå'}
üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: ${subscriptionStatus.limits.prioritySupport ? '‚úÖ' : '‚ùå'}
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Premium',
                                callback_data: 'upgrade_premium',
                            },
                        ],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        });
        this.bot.action('upgrade_premium', async (ctx) => {
            await ctx.answerCbQuery();
            const trialInfo = await this.billingService.getTrialInfo(ctx.userId);
            let trialText = '';
            if (trialInfo.isTrialActive) {
                trialText = `üéÅ **–£ –≤–∞—Å –µ—Å—Ç—å ${trialInfo.daysRemaining} –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞!**

`;
            }
            await ctx.editMessageTextWithMarkdown(`
üíé *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ Premium*

${trialText}**Premium –ø–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:**

üîî **50 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π** –≤ –¥–µ–Ω—å (—Å–µ–π—á–∞—Å 5)
üß† **100 –ò–ò-–∑–∞–ø—Ä–æ—Å–æ–≤** –≤ –¥–µ–Ω—å (—Å–µ–π—á–∞—Å 10)
üìù **100 –∑–∞–¥–∞—á** –≤ –¥–µ–Ω—å (—Å–µ–π—á–∞—Å 10)
üîÑ **20 –ø—Ä–∏–≤—ã—á–µ–∫** –≤ –¥–µ–Ω—å (—Å–µ–π—á–∞—Å 3)
üìä **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**
üé® **–ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–º—ã**
‚ö° **20 —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–π** –≤ –¥–µ–Ω—å

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** 299‚ÇΩ/–º–µ—Å—è—Ü

**Premium Plus** (–±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø–ª–∞–Ω):
‚àû **–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ** –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∑–∞–¥–∞—á–∏, –ø—Ä–∏–≤—ã—á–∫–∏
üöÄ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞**
üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** 599‚ÇΩ/–º–µ—Å—è—Ü

–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üíé Premium - 299‚ÇΩ', callback_data: 'buy_premium' },
                            {
                                text: 'üöÄ Premium Plus - 599‚ÇΩ',
                                callback_data: 'buy_premium_plus',
                            },
                        ],
                        [{ text: 'üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã', callback_data: 'show_limits' }],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        });
        this.bot.action('buy_premium_monthly', async (ctx) => {
            await ctx.answerCbQuery();
            await this.createPayment(ctx, 'PREMIUM');
        });
        this.bot.action('buy_premium_yearly', async (ctx) => {
            await ctx.answerCbQuery();
            await this.createPayment(ctx, 'PREMIUM_PLUS');
        });
        this.bot.action('buy_premium', async (ctx) => {
            await ctx.answerCbQuery();
            await this.createPayment(ctx, 'PREMIUM');
        });
        this.bot.action('buy_premium_plus', async (ctx) => {
            await ctx.answerCbQuery();
            await this.createPayment(ctx, 'PREMIUM_PLUS');
        });
        this.bot.action(/^check_payment_(.+)$/, async (ctx) => {
            await ctx.answerCbQuery();
            const paymentId = ctx.match[1];
            try {
                const status = await this.paymentService.checkPaymentStatus(paymentId);
                if (status === 'succeeded') {
                    await ctx.editMessageTextWithMarkdown('‚úÖ *–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.');
                }
                else if (status === 'canceled') {
                    await ctx.editMessageTextWithMarkdown('‚ùå *–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞–Ω–æ–≤–æ.');
                }
                else {
                    await ctx.editMessageTextWithMarkdown('‚è≥ *–ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.');
                }
            }
            catch (error) {
                await ctx.replyWithMarkdown('‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        });
        this.bot.action('dependencies', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`
üé≠ *–ë–ª–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π*

**–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ –±–∞–∑–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —á—Ç–æ–±—ã —Ç—ã —Å–º–æ–≥ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å—Å—è –æ—Ç –ª—é–±–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.**

      `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üéØ –í—ã–±—Ä–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å',
                                callback_data: 'choose_dependency',
                            },
                            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' },
                        ],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        });
        this.bot.action('choose_dependency', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`
üéØ *–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å*

**–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:**
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üö≠ –ö—É—Ä–µ–Ω–∏–µ', callback_data: 'dep_smoking' },
                            { text: 'üç∫ –ê–ª–∫–æ–≥–æ–ª—å', callback_data: 'dep_alcohol' },
                        ],
                        [
                            { text: 'üì± –°–æ—Ü—Å–µ—Ç–∏', callback_data: 'dep_social' },
                            { text: 'üéÆ –ò–≥—Ä—ã', callback_data: 'dep_gaming' },
                        ],
                        [
                            { text: 'üõí –ü–æ–∫—É–ø–∫–∏', callback_data: 'dep_shopping' },
                            { text: 'üç∞ –°–ª–∞–¥–∫–æ–µ', callback_data: 'dep_sweets' },
                        ],
                        [{ text: '‚úçÔ∏è –°–≤–æ—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å', callback_data: 'dep_custom' }],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'dependencies' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        });
        ['smoking', 'alcohol', 'social', 'gaming', 'shopping', 'sweets'].forEach((type) => {
            this.bot.action(`dep_${type}`, async (ctx) => {
                await ctx.answerCbQuery();
                const dependencyName = type === 'smoking'
                    ? '–∫—É—Ä–µ–Ω–∏—è'
                    : type === 'alcohol'
                        ? '–∞–ª–∫–æ–≥–æ–ª—è'
                        : type === 'social'
                            ? '—Å–æ—Ü—Å–µ—Ç–µ–π'
                            : type === 'gaming'
                                ? '–∏–≥—Ä'
                                : type === 'shopping'
                                    ? '–ø–æ–∫—É–ø–æ–∫'
                                    : '—Å–ª–∞–¥–∫–æ–≥–æ';
                await ctx.editMessageTextWithMarkdown(`
üéØ *–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –±–æ—Ä—å–±—É —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç ${dependencyName}*

ü§ñ –°–∏—Å—Ç–µ–º–∞ –ò–ò –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.

üí™ *–¢—ã —É–∂–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ —Å–≤–æ–±–æ–¥–µ!*

–ß—Ç–æ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç:
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –ò–ò
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç–≤–æ–∏—Ö —Ü–µ–ª—è—Ö
‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏–π

        `, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'ÔøΩ –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å',
                                    callback_data: `setup_reminders_${type}`,
                                },
                            ],
                            [
                                {
                                    text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                                    callback_data: 'choose_dependency',
                                },
                            ],
                        ],
                    },
                });
            });
        });
        this.bot.action('dep_custom', async (ctx) => {
            await ctx.answerCbQuery();
            ctx.session.step = 'waiting_custom_dependency';
            await ctx.editMessageTextWithMarkdown(`
‚úçÔ∏è *–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏*

–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–±–∞–≤–∏—Ç—å—Å—è:

*–ù–∞–ø—Ä–∏–º–µ—Ä:* "–ü–µ—Ä–µ–µ–¥–∞–Ω–∏–µ", "–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è", "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º—ã—Å–ª–∏" –∏ —Ç.–¥.
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'choose_dependency' }],
                    ],
                },
            });
        });
        ['smoking', 'alcohol', 'social', 'gaming', 'shopping', 'sweets'].forEach((type) => {
            this.bot.action(`setup_reminders_${type}`, async (ctx) => {
                await ctx.answerCbQuery();
                const dependencyName = type === 'smoking'
                    ? '–∫—É—Ä–µ–Ω–∏—è'
                    : type === 'alcohol'
                        ? '–∞–ª–∫–æ–≥–æ–ª—è'
                        : type === 'social'
                            ? '—Å–æ—Ü—Å–µ—Ç–µ–π'
                            : type === 'gaming'
                                ? '–∏–≥—Ä'
                                : type === 'shopping'
                                    ? '–ø–æ–∫—É–ø–æ–∫'
                                    : '—Å–ª–∞–¥–∫–æ–≥–æ';
                try {
                    this.startDailyMotivation(ctx.userId, type);
                    await ctx.editMessageTextWithMarkdown(`
‚úÖ *–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø—É—Å–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç!*

üéØ **–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å:** ${dependencyName}
üìÖ **–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:** ${new Date().toLocaleDateString('ru-RU')}

ü§ñ **–ò–ò-—Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:**
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏–π

üí™ *–ü–µ—Ä–≤–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç —Å–µ–≥–æ–¥–Ω—è –≤ 21:00*

–£–¥–∞—á–∏ –≤ –±–æ—Ä—å–±–µ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é! –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! üöÄ
            `, {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                        callback_data: 'back_to_menu',
                                    },
                                ],
                            ],
                        },
                    });
                }
                catch (error) {
                    this.logger.error(`Error setting up dependency reminders: ${error}`);
                    await ctx.editMessageTextWithMarkdown('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                                        callback_data: 'choose_dependency',
                                    },
                                ],
                            ],
                        },
                    });
                }
            });
        });
        this.bot.action('pomodoro_focus', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`
üçÖ *–¢–µ—Ö–Ω–∏–∫–∞ –ü–æ–º–æ–¥–æ—Ä–æ*

–¢–µ—Ö–Ω–∏–∫–∞ Pomodoro (–º–µ—Ç–æ–¥ –ø–æ–º–∏–¥–æ—Ä–∞) ‚Äî –º–µ—Ç–æ–¥ —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–º —Å—Ç—É–¥–µ–Ω—Ç–æ–º –§—Ä–∞–Ω—á–µ—Å–∫–æ –ß–∏—Ä–∏–ª–ª–æ –≤ 1980-—Ö –≥–æ–¥–∞—Ö.

–ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–±–æ—Ä–æ—Ç—å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—é

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
‚è∞ 25 –º–∏–Ω—É—Ç —Ñ–æ–∫—É—Å–∞ –Ω–∞ –∑–∞–¥–∞—á–µ
‚òï 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö
üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å 4 —Ä–∞–∑–∞
üèñÔ∏è –ë–æ–ª—å—à–æ–π –ø–µ—Ä–µ—Ä—ã–≤ 15-30 –º–∏–Ω—É—Ç

*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üöÄ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é',
                                callback_data: 'start_pomodoro_session',
                            },
                        ],
                        [
                            {
                                text: 'üìä –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–π',
                                callback_data: 'pomodoro_history',
                            },
                            {
                                text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                                callback_data: 'pomodoro_settings',
                            },
                        ],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
                    ],
                },
            });
        });
        this.bot.action('start_pomodoro_session', async (ctx) => {
            await ctx.answerCbQuery();
            const user = await this.getOrCreateUser(ctx);
            if (!user.timezone) {
                await this.askForTimezone(ctx);
                return;
            }
            const startTime = new Date();
            const endTime = new Date(startTime.getTime() + 25 * 60 * 1000);
            const endTimeFormatted = this.formatTimeWithTimezone(endTime, user.timezone);
            await ctx.editMessageTextWithMarkdown(`üçÖ *–°–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞ –∑–∞–ø—É—â–µ–Ω–∞!*

‚è∞ **–¢–∞–π–º–µ—Ä**: 25 –º–∏–Ω—É—Ç (–¥–æ ${endTimeFormatted})
üéØ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ
üì± –£–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
üí™ –†–∞–±–æ—Ç–∞–π—Ç–µ –¥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

üîî **–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 25 –º–∏–Ω—É—Ç**

*–£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã! üí™*`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚è∏Ô∏è –ü–∞—É–∑–∞',
                                callback_data: 'pause_pomodoro',
                            },
                            {
                                text: '‚èπÔ∏è –°—Ç–æ–ø',
                                callback_data: 'stop_pomodoro',
                            },
                        ],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
                    ],
                },
            });
            const existingSession = this.activePomodoroSessions.get(ctx.userId);
            if (existingSession) {
                if (existingSession.focusTimer)
                    clearTimeout(existingSession.focusTimer);
                if (existingSession.breakTimer)
                    clearTimeout(existingSession.breakTimer);
            }
            const focusTimer = setTimeout(async () => {
                try {
                    await ctx.editMessageTextWithMarkdown(`
üîî *–í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å!*

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–ª–∏ 25 –º–∏–Ω—É—Ç.

‚òï –í—Ä–µ–º—è –¥–ª—è 5-–º–∏–Ω—É—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞:
‚Ä¢ –í—Å—Ç–∞–Ω—å—Ç–µ –∏ —Ä–∞–∑–æ–º–Ω–∏—Ç–µ—Å—å
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –æ–∫–Ω–æ
‚Ä¢ –í—ã–ø–µ–π—Ç–µ –≤–æ–¥—ã
‚Ä¢ –ù–µ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–æ—Ü—Å–µ—Ç–∏!

‚è∞ –ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.
          `);
                    const breakTimer = setTimeout(async () => {
                        try {
                            await ctx.editMessageTextWithMarkdown(`
‚è∞ *–ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!*

üçÖ 5-–º–∏–Ω—É—Ç–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω. –ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏ —Ñ–æ–∫—É—Å–∞?

üí™ –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª:
‚Ä¢ 25 –º–∏–Ω—É—Ç —Ñ–æ–∫—É—Å–∞
‚Ä¢ 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞  
‚Ä¢ –ü–æ—Å–ª–µ 4 —Ü–∏–∫–ª–æ–≤ - –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ 15-30 –º–∏–Ω—É—Ç

üéØ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?
              `, {
                                reply_markup: {
                                    inline_keyboard: [
                                        [
                                            {
                                                text: 'üöÄ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é',
                                                callback_data: 'start_pomodoro_session',
                                            },
                                        ],
                                        [
                                            {
                                                text: 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
                                                callback_data: 'pomodoro_history',
                                            },
                                        ],
                                        [
                                            {
                                                text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                                                callback_data: 'pomodoro_focus',
                                            },
                                        ],
                                    ],
                                },
                            });
                            this.activePomodoroSessions.delete(ctx.userId);
                        }
                        catch (error) {
                            console.log('Failed to send break completion message:', error);
                        }
                    }, 5 * 60 * 1000);
                    const session = this.activePomodoroSessions.get(ctx.userId);
                    if (session) {
                        session.breakTimer = breakTimer;
                    }
                }
                catch (error) {
                    console.log('Failed to send pomodoro completion message:', error);
                }
            }, 25 * 60 * 1000);
            this.activePomodoroSessions.set(ctx.userId, {
                focusTimer,
                startTime,
            });
        });
        this.bot.action('pause_pomodoro', async (ctx) => {
            await ctx.answerCbQuery();
            const session = this.activePomodoroSessions.get(ctx.userId);
            if (session) {
                if (session.focusTimer) {
                    clearTimeout(session.focusTimer);
                    session.focusTimer = undefined;
                }
                session.pausedAt = new Date();
                const totalElapsed = new Date().getTime() -
                    session.startTime.getTime() -
                    (session.totalPausedTime || 0);
                const elapsed = Math.floor(totalElapsed / (1000 * 60));
                const remaining = Math.max(0, 25 - elapsed);
                const remainingMinutes = remaining;
                const remainingSeconds = Math.max(0, Math.floor((25 * 60 * 1000 - totalElapsed) / 1000) % 60);
                await ctx.editMessageTextWithMarkdown(`
‚è∏Ô∏è *–°–µ—Å—Å–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞*

‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: ${remainingMinutes}:${remainingSeconds.toString().padStart(2, '0')}
‚ö° –ü—Ä–æ—à–ª–æ: ${elapsed} –º–∏–Ω
üéØ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ

*–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?*
          `, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                                    callback_data: 'resume_pomodoro',
                                },
                                {
                                    text: '‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å',
                                    callback_data: 'stop_pomodoro',
                                },
                            ],
                            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
                            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
                        ],
                    },
                });
            }
            else {
                await ctx.editMessageTextWithMarkdown(`‚ö†Ô∏è *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏*

–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–∞—É–∑—ã.`, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üöÄ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é',
                                    callback_data: 'start_pomodoro_session',
                                },
                            ],
                            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
                            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
                        ],
                    },
                });
            }
        });
        this.bot.action('resume_pomodoro', async (ctx) => {
            await ctx.answerCbQuery();
            const session = this.activePomodoroSessions.get(ctx.userId);
            if (session) {
                if (session.pausedAt) {
                    const pauseDuration = new Date().getTime() - session.pausedAt.getTime();
                    session.totalPausedTime =
                        (session.totalPausedTime || 0) + pauseDuration;
                    session.pausedAt = undefined;
                }
                const totalElapsed = new Date().getTime() -
                    session.startTime.getTime() -
                    (session.totalPausedTime || 0);
                const elapsed = Math.floor(totalElapsed / (1000 * 60));
                const remaining = Math.max(0, 25 - elapsed);
                const remainingMinutes = remaining;
                const remainingSeconds = Math.max(0, Math.floor((25 * 60 * 1000 - totalElapsed) / 1000) % 60);
                if (session.focusTimer) {
                    clearTimeout(session.focusTimer);
                }
                const remainingMs = Math.max(0, 25 * 60 * 1000 - totalElapsed);
                if (remainingMs > 0) {
                    session.focusTimer = setTimeout(async () => {
                        try {
                            const currentSession = this.activePomodoroSessions.get(ctx.userId);
                            if (currentSession) {
                                await ctx.telegram.sendMessage(ctx.userId, `
üîî *–í—Ä–µ–º—è —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫–ª–æ!*

‚è∞ 25 –º–∏–Ω—É—Ç –ø—Ä–æ—à–ª–∏
üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏!

*–ß—Ç–æ –¥–∞–ª—å—à–µ?*

‚úÖ –í—Ä–µ–º—è –¥–ª—è 5-–º–∏–Ω—É—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞
üçÖ –ò–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                  `, {
                                    parse_mode: 'Markdown',
                                    reply_markup: {
                                        inline_keyboard: [
                                            [
                                                {
                                                    text: '‚òï –ü–µ—Ä–µ—Ä—ã–≤ (5 –º–∏–Ω)',
                                                    callback_data: 'start_pomodoro_break',
                                                },
                                            ],
                                            [
                                                {
                                                    text: 'üçÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è',
                                                    callback_data: 'start_pomodoro_session',
                                                },
                                                {
                                                    text: 'üìä –ò—Å—Ç–æ—Ä–∏—è',
                                                    callback_data: 'pomodoro_history',
                                                },
                                            ],
                                            [
                                                {
                                                    text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                                    callback_data: 'start',
                                                },
                                            ],
                                        ],
                                    },
                                });
                                this.activePomodoroSessions.delete(ctx.userId);
                            }
                        }
                        catch (error) {
                            console.log('Failed to send pomodoro completion message:', error);
                        }
                    }, remainingMs);
                }
                await ctx.editMessageTextWithMarkdown(`‚ñ∂Ô∏è *–°–µ—Å—Å–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞*

‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å ${remainingMinutes}:${remainingSeconds.toString().padStart(2, '0')}
üéØ –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –∑–∞–¥–∞—á–µ!`, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: '‚è∏Ô∏è –ü–∞—É–∑–∞',
                                    callback_data: 'pause_pomodoro',
                                },
                                {
                                    text: '‚èπÔ∏è –°—Ç–æ–ø',
                                    callback_data: 'stop_pomodoro',
                                },
                            ],
                            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
                            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
                        ],
                    },
                });
            }
        });
        this.bot.action('stop_pomodoro', async (ctx) => {
            await ctx.answerCbQuery();
            const session = this.activePomodoroSessions.get(ctx.userId);
            if (session) {
                if (session.focusTimer)
                    clearTimeout(session.focusTimer);
                if (session.breakTimer)
                    clearTimeout(session.breakTimer);
                const elapsed = Math.floor((new Date().getTime() - session.startTime.getTime()) / (1000 * 60));
                const elapsedMinutes = elapsed % 60;
                const elapsedHours = Math.floor(elapsed / 60);
                const timeText = elapsedHours > 0
                    ? `${elapsedHours}:${elapsedMinutes.toString().padStart(2, '0')}`
                    : `${elapsedMinutes}:${(((new Date().getTime() - session.startTime.getTime()) % 60000) / 1000).toFixed(0).padStart(2, '0')}`;
                this.activePomodoroSessions.delete(ctx.userId);
                await ctx.editMessageTextWithMarkdown(`
‚èπÔ∏è *–°–µ—Å—Å–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞*

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${timeText} –∏–∑ 25:00
üìù –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ —É—Å–ø–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?

*–°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:*
          `, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üìù –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å',
                                    callback_data: 'log_pomodoro_progress',
                                },
                            ],
                            [
                                {
                                    text: 'üçÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è',
                                    callback_data: 'start_pomodoro_session',
                                },
                                {
                                    text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                                    callback_data: 'pomodoro_history',
                                },
                            ],
                            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
                            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
                        ],
                    },
                });
            }
            else {
                await ctx.editMessageTextWithMarkdown(`
‚ö†Ô∏è *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏*

–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Ñ–æ–∫—É—Å–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.

*–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é?*
          `, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üöÄ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é',
                                    callback_data: 'start_pomodoro_session',
                                },
                            ],
                            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
                            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
                        ],
                    },
                });
            }
        });
        this.bot.action('pomodoro_history', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`
üìä *–ò—Å—Ç–æ—Ä–∏—è —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–π*

**–°–µ–≥–æ–¥–Ω—è (19.08.2025):**
üçÖ –°–µ—Å—Å–∏–π: 0
‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è: 0 –º–∏–Ω
üéØ –ó–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ: 0

**–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:**
üìÖ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: 0
üìà –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: 0
üèÜ –õ—É—á—à–∏–π –¥–µ–Ω—å: 0 —Å–µ—Å—Å–∏–π

**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üéØ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: 0
‚ö° –û–±—â–µ–µ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: 0 —á
üìö –°–∞–º–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞—è –Ω–µ–¥–µ–ª—è: 0 —Å–µ—Å—Å–∏–π

*–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è!*
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üìà –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞',
                                callback_data: 'pomodoro_chart',
                            },
                        ],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
                    ],
                },
            });
        });
        this.bot.action('pomodoro_settings', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ü–æ–º–æ–¥–æ—Ä–æ*

**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚è±Ô∏è –í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: 25 –º–∏–Ω
‚òï –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤: 5 –º–∏–Ω
üèñÔ∏è –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤: 15 –º–∏–Ω
üî¢ –°–µ—Å—Å–∏–π –¥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞: 4

**–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
üîî –ó–≤—É–∫–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã: ‚úÖ
üì± Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ
‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö: ‚úÖ

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**
üéµ –§–æ–Ω–æ–≤—ã–µ –∑–≤—É–∫–∏: ‚ùå
üìä –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ‚úÖ
üéØ –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ —Å–µ—Å—Å–∏–µ–π: ‚ùå

*–§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!*
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è',
                                callback_data: 'change_pomodoro_time',
                            },
                        ],
                        [
                            {
                                text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                                callback_data: 'pomodoro_notifications',
                            },
                        ],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
                    ],
                },
            });
        });
        this.bot.action('log_pomodoro_progress', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`
üìù *–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å*

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:30 –∏–∑ 25:00
üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 38%

*–ß—Ç–æ –≤—ã —É—Å–ø–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?*
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üìö –ò–∑—É—á–µ–Ω–∏–µ',
                                callback_data: 'progress_studying',
                            },
                            {
                                text: 'üíª –†–∞–±–æ—Ç–∞',
                                callback_data: 'progress_work',
                            },
                        ],
                        [
                            {
                                text: 'üìù –ù–∞–ø–∏—Å–∞–Ω–∏–µ',
                                callback_data: 'progress_writing',
                            },
                            {
                                text: 'üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ',
                                callback_data: 'progress_creative',
                            },
                        ],
                        [
                            {
                                text: '‚úèÔ∏è –î—Ä—É–≥–æ–µ',
                                callback_data: 'progress_custom',
                            },
                        ],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
                    ],
                },
            });
        });
        this.bot.action('pomodoro_chart', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`üìà *–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞*

üöß *–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*

–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:
üìä –ì—Ä–∞—Ñ–∏–∫ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–π –ø–æ –¥–Ω—è–º
üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
üéØ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á
‚è∞ –õ—É—á—à–∏–µ —á–∞—Å—ã –¥–ª—è —Ñ–æ–∫—É—Å–∞

üìß –í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø—É—Å–∫!`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_history' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
                    ],
                },
            });
        });
        this.bot.action('change_pomodoro_time', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`
‚è±Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏*

**–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞:**
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '15 –º–∏–Ω', callback_data: 'set_focus_15' },
                            { text: '25 –º–∏–Ω ‚úÖ', callback_data: 'set_focus_25' },
                            { text: '30 –º–∏–Ω', callback_data: 'set_focus_30' },
                        ],
                        [
                            { text: '45 –º–∏–Ω', callback_data: 'set_focus_45' },
                            { text: '60 –º–∏–Ω', callback_data: 'set_focus_60' },
                        ],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_settings' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
                    ],
                },
            });
        });
        this.bot.action('pomodoro_notifications', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`
üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
üîä –ó–≤—É–∫–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã: ‚úÖ
üì± Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ
‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö: ‚úÖ
üéµ –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞: ‚ùå

*–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!*
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_settings' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
                    ],
                },
            });
        });
        this.bot.action('focus_ai_tips', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showFocusAITips(ctx);
        });
        ['studying', 'work', 'writing', 'creative', 'custom'].forEach((category) => {
            this.bot.action(`progress_${category}`, async (ctx) => {
                await ctx.answerCbQuery();
                await ctx.editMessageTextWithMarkdown(`
‚úÖ *–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!*

üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category === 'studying'
                    ? '–ò–∑—É—á–µ–Ω–∏–µ'
                    : category === 'work'
                        ? '–†–∞–±–æ—Ç–∞'
                        : category === 'writing'
                            ? '–ù–∞–ø–∏—Å–∞–Ω–∏–µ'
                            : category === 'creative'
                                ? '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ'
                                : '–î—Ä—É–≥–æ–µ'}
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:30

üéØ +10 XP –∑–∞ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é!
üìà –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —É—á—Ç–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.
          `);
            });
        });
        [15, 25, 30, 45, 60].forEach((minutes) => {
            this.bot.action(`set_focus_${minutes}`, async (ctx) => {
                await ctx.answerCbQuery();
                await ctx.editMessageTextWithMarkdown(`
‚è±Ô∏è *–í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–æ*

–ù–æ–≤–æ–µ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: ${minutes} –º–∏–Ω—É—Ç
–í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞: ${minutes <= 25 ? 5 : 10} –º–∏–Ω—É—Ç

‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!
        `, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: '‚¨ÖÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
                                    callback_data: 'pomodoro_settings',
                                },
                                {
                                    text: 'üçÖ –ö Pomodoro',
                                    callback_data: 'pomodoro_focus',
                                },
                            ],
                            [
                                {
                                    text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                    callback_data: 'start',
                                },
                            ],
                        ],
                    },
                });
            });
        });
        ['excellent', 'good', 'neutral', 'sad', 'angry', 'anxious'].forEach((mood) => {
            this.bot.action(`mood_${mood}`, async (ctx) => {
                await ctx.answerCbQuery();
                const moodEmoji = {
                    excellent: 'üòÑ',
                    good: 'üòä',
                    neutral: 'üòê',
                    sad: 'üòî',
                    angry: 'üò§',
                    anxious: 'üò∞',
                }[mood];
                const moodText = {
                    excellent: '–æ—Ç–ª–∏—á–Ω–æ–µ',
                    good: '—Ö–æ—Ä–æ—à–µ–µ',
                    neutral: '–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ',
                    sad: '–≥—Ä—É—Å—Ç–Ω–æ–µ',
                    angry: '–∑–ª–æ–µ',
                    anxious: '—Ç—Ä–µ–≤–æ–∂–Ω–æ–µ',
                }[mood];
                await ctx.editMessageTextWithMarkdown(`
${moodEmoji} *–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ!*

–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: **${moodText}**
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!

*–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –≤–∞—à–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.*
        `, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
                                    callback_data: 'mood_stats',
                                },
                            ],
                            [
                                {
                                    text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                    callback_data: 'back_to_menu',
                                },
                            ],
                        ],
                    },
                });
            });
        });
        this.bot.action('mood_ai_analysis', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showMoodAIAnalysis(ctx);
        });
        this.bot.action('mood_stats', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è*

**–°–µ–≥–æ–¥–Ω—è:** üòä (—Ö–æ—Ä–æ—à–µ–µ)
**–ó–∞ –Ω–µ–¥–µ–ª—é:** –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ 7/10
**–ó–∞ –º–µ—Å—è—Ü:** –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ 6.5/10

**–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:**
üòä –•–æ—Ä–æ—à–µ–µ - 45%
üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ - 30% 
üòÑ –û—Ç–ª–∏—á–Ω–æ–µ - 25%

üìà *–§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!*
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é', callback_data: 'menu_mood' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        });
        this.bot.action('faq_support', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`
‚ùì *FAQ ‚Äî –ß–ê–°–¢–û –ó–ê–î–ê–í–ê–ï–ú–´–ï –í–û–ü–†–û–°–´*

1. **–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É?**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É/–ø—Ä–∏–≤—ã—á–∫—É¬ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç: ¬´–ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞ –≤ 17:00 –∑–∞–π—Ç–∏ –Ω–∞ –ø–æ—á—Ç—É¬ª –∏ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –í–∞–º —ç—Ç—É –∑–∞–¥–∞—á—É.

2. **–ß—Ç–æ —Ç–∞–∫–æ–µ XP –∏ —É—Ä–æ–≤–µ–Ω—å?**
XP (–æ–ø—ã—Ç) –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á. –° –∫–∞–∂–¥—ã–º —É—Ä–æ–≤–Ω–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –∏ –±–æ–Ω—É—Å—ã.

3. **–ß—Ç–æ –∑–Ω–∞—á–∏—Ç ¬´–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ¬ª?**
–ë–æ—Ç —É–º–µ–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –∫–æ—Ç–æ—Ä—É—é –í—ã –∑–∞–ø–∏—Å–∞–ª–∏ (—Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/–ø—Ä–∏–≤—ã—á–∫—É).

4. **–ß—Ç–æ –∑–Ω–∞—á–∏—Ç —Ñ—É–Ω–∫—Ü–∏—è –ò–ò ‚Äì –ü–æ–º–æ—â–Ω–∏–∫?**
–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏, –ø—Ä–∏–≤—ã—á–∫–∏, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä, –ø—Å–∏—Ö–æ–ª–æ–≥, –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, –∫–æ–ª–ª–µ–≥–∞ –∏ –¥—Ä—É–≥ –≤ –æ–¥–Ω–æ–º –ª–∏—Ü–µ.

5. **–ö–∞–∫ –æ—Ç–∫–ª—é—á–∏—Ç—å/–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è?**
–í –º–µ–Ω—é "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å, –æ—Ç–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.

6. **–ö—Ç–æ –≤–∏–¥–∏—Ç –º–æ–∏ –∑–∞–¥–∞—á–∏?**
–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –≤–∏–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –≤—ã. –ú–æ–∂–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é.

7. **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ–ª–ª–µ–Ω–¥–∂?**
–≠—Ç–æ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –≤—Ä–µ–º—è ‚Äî –∑–∞ —É—á–∞—Å—Ç–∏–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ XP –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.

8. **–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç?**
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram. –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–ø–∏—à–∏—Ç–µ –≤ "FAQ / –ü–æ–¥–¥–µ—Ä–∂–∫–∞".

9. **–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?**
–í –∫–æ–Ω—Ü–µ –ª—é–±–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ FAQ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å".

10. **–ö–∞–∫ –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ª—é–±–∏–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏?**
–í–≤–µ–¥–∏—Ç–µ "/" ‚Äî –ø–æ—è–≤–∏—Ç—Å—è –±—ã—Å—Ç—Ä—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏ —Ñ—É–Ω–∫—Ü–∏–π.

11. **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞?**
–í—ã –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ—Ç–µ —Å—Å—ã–ª–∫—É –≤ –º–µ–Ω—é ¬´–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞¬ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –¥—Ä—É–≥—É. –° —Ç–æ–≥–æ –∫—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –Ω–µ–π –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É –í—ã –±—É–¥–µ—Ç–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –ø–æ 40% —Å –µ–≥–æ –æ–ø–ª–∞—Ç!

12. **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–≤—Å–µ–≥–¥–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ 5 –¥—Ä—É–∑–µ–π –∫ –±–æ—Ç—É?**
–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –∏ –∫–æ–≥–¥–∞ –í—ã –Ω–∞–±–µ—Ä–µ—Ç–µ 5 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –í–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏—é –Ω–∞–≤—Å–µ–≥–¥–∞!

*–ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!*
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: 'ask_question' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        });
        this.bot.action('ask_question', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`
üìù *–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–µ*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏ –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

–ú–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /feedback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ FAQ', callback_data: 'faq_support' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        });
        this.bot.action('add_habit_direct', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown('üîÑ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
        });
        this.bot.action('back_to_menu', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showMainMenu(ctx, true);
        });
        this.bot.action('start', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showMainMenu(ctx, true);
        });
        this.bot.action('back_to_commands', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showMainMenu(ctx, true);
        });
        this.bot.action('commands_menu', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showMainMenu(ctx, true);
        });
        this.bot.action(/^create_task_from_voice:(.+)$/, async (ctx) => {
            await ctx.answerCbQuery();
            const taskName = ctx.match[1];
            await this.createTaskFromVoice(ctx, taskName);
        });
        this.bot.action(/^create_habit_from_voice:(.+)$/, async (ctx) => {
            await ctx.answerCbQuery();
            const habitName = ctx.match[1];
            await this.createHabitFromVoice(ctx, habitName);
        });
        this.bot.action(/^create_reminder_from_voice:(.+)$/, async (ctx) => {
            await ctx.answerCbQuery();
            const reminderText = decodeURIComponent(ctx.match[1]);
            await ctx.editMessageTextWithMarkdown(`‚è∞ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –≥–æ–ª–æ—Å–∞*

–¢–µ–∫—Å—Ç: "${reminderText}"

üí° **–ö–∞–∫ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è:**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "${reminderText} –≤ 17:30"
‚Ä¢ "${reminderText} —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"
‚Ä¢ "${reminderText} –∑–∞–≤—Ç—Ä–∞ –≤ 14:00"

–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üìù –ù–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è',
                                callback_data: 'create_reminder_help',
                            },
                            { text: 'ÔøΩ –ì–æ–ª–æ—Å–æ–º', callback_data: 'voice_reminder_help' },
                        ],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        });
        this.bot.action(/^ai_chat_from_voice:(.+)$/, async (ctx) => {
            await ctx.answerCbQuery();
            const text = ctx.match[1];
            await this.handleAIChatMessage(ctx, text);
        });
        this.bot.action('ai_analyze_profile', async (ctx) => {
            await this.handleAIAnalyzeProfile(ctx);
        });
        this.bot.action('ai_task_recommendations', async (ctx) => {
            await this.handleAITaskRecommendations(ctx);
        });
        this.bot.action('ai_time_planning', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`
‚è∞ *–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏*

–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏.
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
                    ],
                },
            });
        });
        this.bot.action('ai_custom_question', async (ctx) => {
            await this.handleAICustomQuestion(ctx);
        });
        this.bot.action('ai_back_menu', async (ctx) => {
            await ctx.answerCbQuery();
            await this.startAIChat(ctx);
        });
        this.bot.action('ai_analyze_profile', async (ctx) => {
            await ctx.answerCbQuery();
            await this.handleAIAnalyzeProfile(ctx);
        });
        this.bot.action('ai_task_recommendations', async (ctx) => {
            await ctx.answerCbQuery();
            await this.handleAITaskRecommendations(ctx);
        });
        this.bot.action('ai_habit_help', async (ctx) => {
            await ctx.answerCbQuery();
            await this.handleAIHabitHelp(ctx);
        });
        this.bot.action('ai_time_planning', async (ctx) => {
            await ctx.answerCbQuery();
            await this.handleAITimePlanning(ctx);
        });
        this.bot.action('ai_custom_question', async (ctx) => {
            await ctx.answerCbQuery();
            await this.handleAICustomQuestion(ctx);
        });
        this.bot.action('ai_create_habit', async (ctx) => {
            await ctx.answerCbQuery();
            await this.handleAICreateHabit(ctx);
        });
        this.bot.action('tasks_add', async (ctx) => {
            await ctx.answerCbQuery();
            await this.startAddingTask(ctx);
        });
        this.bot.action('tasks_list', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showTasksList(ctx);
        });
        this.bot.action('tasks_list_more', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showAllTasksList(ctx);
        });
        this.bot.action('tasks_today', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showTodayTasks(ctx);
        });
        this.bot.action('tasks_ai_advice', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showTasksAIAdvice(ctx);
        });
        this.bot.action(/^task_complete_(.+)$/, async (ctx) => {
            await ctx.answerCbQuery();
            const taskId = ctx.match[1];
            await this.completeTask(ctx, taskId);
        });
        this.bot.action('back_to_tasks', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showTasksMenu(ctx);
        });
        this.bot.action('back_to_main', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showMainMenu(ctx);
        });
        this.bot.action(/^feedback_rating_(\d+)$/, async (ctx) => {
            const rating = parseInt(ctx.match[1]);
            await this.handleFeedbackRating(ctx, rating);
        });
        this.bot.action(/^feedback_like_(.+)$/, async (ctx) => {
            const feature = ctx.match[1];
            if (!ctx.session.feedbackRating) {
                await this.completeFeedbackSurvey(ctx, feature);
            }
            else {
                await this.handleFeedbackImprovement(ctx, feature);
            }
        });
        this.bot.action(/^feedback_improve_(.+)$/, async (ctx) => {
            const improvement = ctx.match[1];
            if (improvement === 'custom') {
                await ctx.answerCbQuery();
                await ctx.editMessageTextWithMarkdown(`
üìù *–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —É–ª—É—á—à–∏—Ç—å:*

–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è...
        `);
                ctx.session.step = 'waiting_for_custom_feedback';
            }
            else {
                if (ctx.session.feedbackRating) {
                    await this.completeFeedback(ctx, improvement);
                }
                else {
                    await this.completeFeedbackSurvey(ctx, improvement);
                }
            }
        });
        this.bot.action('feedback_later', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`
üïê *–•–æ—Ä–æ—à–æ, —Å–ø—Ä–æ—Å–∏–º –ø–æ–∑–∂–µ!*

–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∫–æ–º–∞–Ω–¥–æ–π /feedback
      `);
        });
        this.bot.action(/^confirm_timezone_(.+)$/, async (ctx) => {
            await ctx.answerCbQuery();
            const timezone = ctx.match[1];
            await this.confirmTimezone(ctx, timezone);
        });
        this.bot.action('manual_timezone', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showManualTimezoneSelection(ctx);
        });
        this.bot.action('input_city', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`
üèôÔ∏è *–í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞*

üìç –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:
(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù—å—é-–ô–æ—Ä–∫, –õ–æ–Ω–¥–æ–Ω, –ê—Å—Ç–∞–Ω–∞)
      `);
            ctx.session.step = 'waiting_for_city';
        });
        this.bot.action('select_timezone', async (ctx) => {
            await ctx.answerCbQuery();
            await this.showTimezoneList(ctx);
        });
        this.bot.action('stop_interval_reminder', async (ctx) => {
            await ctx.answerCbQuery();
            const stopped = this.stopIntervalReminder(ctx.userId);
            if (stopped) {
                await ctx.editMessageTextWithMarkdown(`
üõë *–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ*

–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.
        `, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                        ],
                    },
                });
            }
            else {
                await ctx.editMessageTextWithMarkdown(`
‚ùå *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*

–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
        `, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                        ],
                    },
                });
            }
        });
        this.bot.action('interval_status', async (ctx) => {
            await ctx.answerCbQuery();
            const reminder = this.activeIntervalReminders.get(ctx.userId);
            if (reminder) {
                const runningTime = Math.floor((Date.now() - reminder.startTime.getTime()) / (1000 * 60));
                const intervalText = reminder.intervalMinutes < 60
                    ? `${reminder.intervalMinutes} –º–∏–Ω—É—Ç`
                    : `${Math.floor(reminder.intervalMinutes / 60)} —á–∞—Å${reminder.intervalMinutes === 60 ? '' : '–∞'}`;
                await ctx.editMessageTextWithMarkdown(`
üìä *–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*

üìù **–¢–µ–∫—Å—Ç:** ${reminder.reminderText}
‚è±Ô∏è **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** –∫–∞–∂–¥—ã–µ ${intervalText}
üïê **–ó–∞–ø—É—â–µ–Ω–æ:** ${runningTime} –º–∏–Ω –Ω–∞–∑–∞–¥
üì¨ **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:** ${reminder.count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        `, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
                                    callback_data: 'stop_interval_reminder',
                                },
                            ],
                            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                        ],
                    },
                });
            }
            else {
                await ctx.editMessageTextWithMarkdown(`
‚ùå *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*

–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
        `, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                        ],
                    },
                });
            }
        });
        this.bot.action('cancel_interval_setup', async (ctx) => {
            await ctx.answerCbQuery();
            await ctx.editMessageTextWithMarkdown(`
‚ùå *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞*

–ù–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ.
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        });
        this.bot.action(/^replace_interval_(\d+)_(.+)$/, async (ctx) => {
            await ctx.answerCbQuery();
            const intervalMinutes = parseInt(ctx.match[1]);
            const reminderText = Buffer.from(ctx.match[2], 'base64').toString();
            this.stopIntervalReminder(ctx.userId);
            await this.startIntervalReminder(ctx, reminderText, intervalMinutes);
        });
        this.bot.catch((err, ctx) => {
            this.logger.error(`Bot error for ${ctx.updateType}:`, err);
            ctx.reply('üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        });
    }
    async handleAITaskRecommendations(ctx) {
        const user = await this.userService.findByTelegramId(ctx.userId);
        const tasks = await this.taskService.findTasksByUserId(ctx.userId);
        const completedTasks = tasks.filter((t) => t.completedAt !== null);
        let recommendation = '';
        if (tasks.length === 0) {
            recommendation =
                'üìù –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É! –ù–∞—á–Ω–∏—Ç–µ —Å —á–µ–≥–æ-—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.';
        }
        else if (completedTasks.length < tasks.length * 0.3) {
            recommendation =
                'üéØ –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á. –ö–∞—á–µ—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞!';
        }
        else {
            recommendation =
                'üöÄ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –ü–æ–º–æ–¥–æ—Ä–æ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.';
        }
        await ctx.editMessageTextWithMarkdown(`
üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞—á–∞–º*

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${completedTasks.length}/${tasks.length} –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ

${recommendation}

*–°–æ–≤–µ—Ç:* –†–∞–∑–±–∏–≤–∞–π—Ç–µ –±–æ–ª—å—à–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏.
      `, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                ],
            },
        });
    }
    async handleAIHabitHelp(ctx) {
        try {
            const user = await this.userService.findByTelegramId(ctx.userId);
            const habits = await this.habitService.findHabitsByUserId(ctx.userId);
            const completedHabits = habits.filter((h) => h.totalCompletions > 0);
            const userProfile = {
                totalHabits: habits.length,
                activeHabits: habits.filter((h) => h.isActive).length,
                completedHabits: completedHabits.length,
                avgStreak: habits.length > 0
                    ? habits.reduce((sum, h) => sum + h.currentStreak, 0) /
                        habits.length
                    : 0,
            };
            let personalizedRecommendations = [];
            let motivationalMessage = '';
            if (habits.length === 0) {
                personalizedRecommendations = [
                    'üíß –ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ: –ø–∏—Ç—å 1 —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã —É—Ç—Ä–æ–º',
                    'üö∂‚Äç‚ôÇÔ∏è 5-–º–∏–Ω—É—Ç–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –ø–æ—Å–ª–µ –µ–¥—ã',
                    'üìö –ß–∏—Ç–∞—Ç—å 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–Ω–∏–≥–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º',
                    'üßò‚Äç‚ôÄÔ∏è 2-–º–∏–Ω—É—Ç–Ω–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è —É—Ç—Ä–æ–º',
                ];
                motivationalMessage =
                    '–û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∞–ª–∞! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –ø—Ä–æ—Å—Ç—É—é –ø—Ä–∏–≤—ã—á–∫—É.';
            }
            else if (userProfile.avgStreak < 3) {
                personalizedRecommendations = [
                    'üéØ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –æ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–µ –¥–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–º–∞',
                    '‚è∞ –ü—Ä–∏–≤—è–∂–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –¥–µ–π—Å—Ç–≤–∏—é',
                    'üèÜ –û—Ç–º–µ—á–∞–π—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ',
                    'üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è',
                ];
                motivationalMessage =
                    '–ì–ª–∞–≤–Ω–æ–µ - –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ! –õ—É—á—à–µ –¥–µ–ª–∞—Ç—å –º–∞–ª–æ, –Ω–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.';
            }
            else {
                personalizedRecommendations = [
                    'üìà –£—Å–ª–æ–∂–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ',
                    'üîó –°–≤—è–∂–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤ —Ü–µ–ø–æ—á–∫–∏ (habit stacking)',
                    'üéâ –î–æ–±–∞–≤—å—Ç–µ —Å–∏—Å—Ç–µ–º—É –Ω–∞–≥—Ä–∞–¥ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                    'üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ',
                ];
                motivationalMessage =
                    '–£ –≤–∞—Å –æ—Ç–ª–∏—á–Ω–∞—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞! –í—Ä–µ–º—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—Ö.';
            }
            let message = `üéØ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º*\n\n`;
            if (habits.length > 0) {
                message += `üìä *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n`;
                message += `‚Ä¢ –ü—Ä–∏–≤—ã—á–µ–∫: ${userProfile.totalHabits} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${userProfile.activeHabits})\n`;
                message += `‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–µ—Ä–∏—è: ${Math.round(userProfile.avgStreak)} –¥–Ω–µ–π\n`;
                message += `‚Ä¢ –í—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö: ${completedHabits.length}\n\n`;
            }
            message += `üí° *${motivationalMessage}*\n\n`;
            message += `üéØ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å:*\n`;
            personalizedRecommendations.forEach((rec, index) => {
                message += `${index + 1}. ${rec}\n`;
            });
            message += `\nüß† *–ù–∞—É—á–Ω–æ –¥–æ–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:*\n`;
            message += `‚Ä¢ 21 –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫, 66 –¥–Ω–µ–π –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö\n`;
            message += `‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å 2-–º–∏–Ω—É—Ç–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞\n`;
            message += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ "–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π—Ç–µ –¥–≤–∞–∂–¥—ã"\n`;
            message += `‚Ä¢ –§–æ–∫—É—Å –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–µ, –∞ –Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ`;
            const keyboard = {
                inline_keyboard: [
                    [
                        {
                            text: 'üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É',
                            callback_data: 'habits_add',
                        },
                        {
                            text: 'üéØ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏',
                            callback_data: 'habits_list',
                        },
                    ],
                    [
                        {
                            text: 'ü§ñ –°–æ–∑–¥–∞—Ç—å –ò–ò-–ø—Ä–∏–≤—ã—á–∫—É',
                            callback_data: 'ai_create_habit',
                        },
                    ],
                    [
                        {
                            text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é',
                            callback_data: 'ai_back_menu',
                        },
                    ],
                ],
            };
            await ctx.editMessageTextWithMarkdown(message, {
                reply_markup: keyboard,
            });
        }
        catch (error) {
            this.logger.error('Error in handleAIHabitHelp:', error);
            await ctx.editMessageTextWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–∏–≤—ã—á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
                    ],
                },
            });
        }
    }
    async handleAICreateHabit(ctx) {
        await ctx.editMessageTextWithMarkdown(`
ü§ñ *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò*

–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é –ø—Ä–∏–≤—ã—á–∫—É —Ö–æ—Ç–∏—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å, –∏ —è –ø–æ–º–æ–≥—É:
‚Ä¢ üìù –°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ
‚Ä¢ ‚è∞ –ü–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ üéØ –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è
‚Ä¢ üí° –î–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã

*–ü—Ä–∏–º–µ—Ä—ã:*
"–•–æ—á—É –±–æ–ª—å—à–µ —á–∏—Ç–∞—Ç—å"
"–ù—É–∂–Ω–æ –ø–∏—Ç—å –±–æ–ª—å—à–µ –≤–æ–¥—ã" 
"–•–æ—á—É –¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É"
"–ë—É–¥—É –º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å"

üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏!
      `, {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–º–æ—â–∏ —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏',
                            callback_data: 'ai_habit_help',
                        },
                    ],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                ],
            },
        });
        ctx.session.aiHabitCreationMode = true;
    }
    async handleAIHabitCreationMessage(ctx, userInput) {
        try {
            ctx.session.aiHabitCreationMode = false;
            const analysisPrompt = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É: "${userInput}"

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:

1. –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)
2. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
3. –ß–∞—Å—Ç–æ—Ç–∞ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –∏ —Ç.–¥.)
4. –°–æ–≤–µ—Ç—ã –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é (2-3 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–≤–µ—Ç–∞)
5. –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ç–æ–Ω–µ.`;
            const aiResponse = await this.openaiService.getAIResponse(analysisPrompt);
            const habitData = this.parseAIHabitResponse(aiResponse, userInput);
            const habit = await this.habitService.createHabit({
                userId: ctx.userId,
                title: habitData.title,
                description: habitData.description,
                frequency: 'DAILY',
                reminderTime: habitData.reminderTime,
            });
            let message = `üéâ *–ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò!*\n\n`;
            message += `üìù **${habit.title}**\n\n`;
            if (habitData.aiAdvice) {
                message += `ü§ñ *–°–æ–≤–µ—Ç –æ—Ç –ò–ò:*\n${habitData.aiAdvice}\n\n`;
            }
            if (habitData.implementationTips.length > 0) {
                message += `üí° *–°–æ–≤–µ—Ç—ã –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é:*\n`;
                habitData.implementationTips.forEach((tip, index) => {
                    message += `${index + 1}. ${tip}\n`;
                });
                message += `\n`;
            }
            message += `‚ú® *${habitData.motivationalMessage}*`;
            const keyboard = {
                inline_keyboard: [
                    [
                        {
                            text: '‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
                            callback_data: `habit_set_reminder_${habit.id}`,
                        },
                    ],
                    [
                        {
                            text: 'üéØ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏',
                            callback_data: 'habits_list',
                        },
                        {
                            text: 'ü§ñ –°–æ–∑–¥–∞—Ç—å –µ—â—ë',
                            callback_data: 'ai_create_habit',
                        },
                    ],
                    [
                        {
                            text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                            callback_data: 'back_to_menu',
                        },
                    ],
                ],
            };
            await ctx.replyWithMarkdown(message, {
                reply_markup: keyboard,
            });
        }
        catch (error) {
            this.logger.error('Error in handleAIHabitCreationMessage:', error);
            ctx.session.aiHabitCreationMode = false;
            await ctx.replyWithMarkdown('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É —Å –ø–æ–º–æ—â—å—é –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –≤—Ä—É—á–Ω—É—é.', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìù –°–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é', callback_data: 'habits_add' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        }
    }
    parseAIHabitResponse(aiResponse, originalInput) {
        const defaultHabit = {
            title: originalInput.length > 50
                ? originalInput.substring(0, 50)
                : originalInput,
            description: `–ü—Ä–∏–≤—ã—á–∫–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Å –ø–æ–º–æ—â—å—é –ò–ò: ${originalInput}`,
            reminderTime: '09:00',
            implementationTips: [
                '–ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ',
                '–ë—É–¥—å—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã',
                '–û—Ç–º–µ—á–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å',
            ],
            aiAdvice: aiResponse.length > 200
                ? aiResponse.substring(0, 200) + '...'
                : aiResponse,
            motivationalMessage: '–í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è!',
        };
        try {
            const lines = aiResponse.split('\n').filter((line) => line.trim());
            for (const line of lines) {
                if (line.toLowerCase().includes('–ø—Ä–∏–≤—ã—á–∫–∞') && line.includes(':')) {
                    const habitTitle = line.split(':')[1]?.trim();
                    if (habitTitle && habitTitle.length <= 50) {
                        defaultHabit.title = habitTitle;
                    }
                }
                if (line.toLowerCase().includes('–≤—Ä–µ–º—è') && line.includes(':')) {
                    const timeMatch = line.match(/\d{1,2}:\d{2}/);
                    if (timeMatch) {
                        defaultHabit.reminderTime = timeMatch[0];
                    }
                }
            }
            return defaultHabit;
        }
        catch (error) {
            this.logger.warn('Failed to parse AI response, using defaults:', error);
            return defaultHabit;
        }
    }
    async handleAITimePlanning(ctx) {
        const user = await this.userService.findByTelegramId(ctx.userId);
        const currentHour = new Date().getHours();
        let timeAdvice = '';
        if (currentHour < 9) {
            timeAdvice =
                'üåÖ –£—Ç—Ä–æ–º –ª—É—á—à–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞. –ú–æ–∑–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ!';
        }
        else if (currentHour < 14) {
            timeAdvice =
                '‚òÄÔ∏è –ü–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! –í—Ä–µ–º—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.';
        }
        else if (currentHour < 18) {
            timeAdvice =
                'üïê –ü–æ—Å–ª–µ –æ–±–µ–¥–∞ —ç–Ω–µ—Ä–≥–∏—è —Å–Ω–∏–∂–∞–µ—Ç—Å—è. –ü–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –¥–µ–ª.';
        }
        else {
            timeAdvice =
                'üåÜ –í–µ—á–µ—Ä - –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è –∏ –ª–µ–≥–∫–∏—Ö –∑–∞–¥–∞—á.';
        }
        await ctx.editMessageTextWithMarkdown(`
‚è∞ *–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏*

üïê –°–µ–π—á–∞—Å ${currentHour}:00

${timeAdvice}

*–ú–µ—Ç–æ–¥—ã:*
‚Ä¢ üçÖ –ü–æ–º–æ–¥–æ—Ä–æ (25 –º–∏–Ω —Ä–∞–±–æ—Ç–∞ / 5 –º–∏–Ω –æ—Ç–¥—ã—Ö)
‚Ä¢ ‚è∞ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ 
‚Ä¢ üéØ –ü—Ä–∞–≤–∏–ª–æ 3-—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
      `, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                ],
            },
        });
    }
    async handleAICustomQuestion(ctx) {
        await ctx.editMessageTextWithMarkdown(`
‚úçÔ∏è *–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å*

–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –æ:
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∞–º–∏
‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–µ–∫  
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ —Ü–µ–ª—è—Ö
‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

–Ø –æ—Ç–≤–µ—á—É –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É!
      `, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                ],
            },
        });
        ctx.session.aiChatMode = true;
    }
    async handleReferralRegistration(ctx, newUserId, referrerId) {
        try {
            if (newUserId === referrerId) {
                return;
            }
            const referrer = await this.userService
                .findByTelegramId(referrerId)
                .catch(() => null);
            if (!referrer) {
                this.logger.warn(`Referrer ${referrerId} not found`);
                return;
            }
            await this.userService.updateUser(newUserId, {
                referredBy: referrer.id,
            });
            const currentReferralsCount = await this.getReferralsCount(referrerId);
            await this.userService.updateUser(referrerId, {
                referralsCount: currentReferralsCount + 1,
                activeReferrals: currentReferralsCount + 1,
            });
            const referrerUser = await this.userService.findByTelegramId(referrerId);
            let bonusXp = 500;
            const newReferralsCount = currentReferralsCount + 1;
            let achievementMessage = '';
            let achievementType = null;
            if (newReferralsCount === 1) {
                bonusXp += 200;
                achievementMessage =
                    '\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü–µ—Ä–≤—ã–π –¥—Ä—É–≥" —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ! (+200 XP)';
                achievementType = 'first';
            }
            else if (newReferralsCount === 3) {
                bonusXp += 500;
                achievementMessage =
                    '\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–¢—Ä–æ–π–∫–∞ –¥—Ä—É–∑–µ–π" —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ! (+500 XP)';
                achievementType = 'triple';
            }
            else if (newReferralsCount === 5) {
                bonusXp += 1000;
                achievementMessage =
                    '\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü—è—Ç–µ—Ä–∫–∞ –¥—Ä—É–∑–µ–π" —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ! (+1000 XP)';
                achievementType = 'five';
            }
            await this.userService.updateUser(referrerId, {
                totalXp: referrerUser.totalXp + bonusXp,
            });
            const newUser = await this.userService.findByTelegramId(newUserId);
            await this.userService.updateUser(newUserId, {
                totalXp: newUser.totalXp + 200,
            });
            try {
                await this.bot.telegram.sendMessage(referrerId, `üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*

üë§ –í–∞—à –¥—Ä—É–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ Ticky AI!

 **–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê:**
‚Ä¢ –ö–æ–≥–¥–∞ –¥—Ä—É–≥ –æ–ø–ª–∞—Ç–∏—Ç –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É (199‚ÇΩ) ‚Üí –í—ã –ø–æ–ª—É—á–∏—Ç–µ 79‚ÇΩ
‚Ä¢ –ö–æ–≥–¥–∞ –¥—Ä—É–≥ –æ–ø–ª–∞—Ç–∏—Ç –≥–æ–¥–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É (999‚ÇΩ) ‚Üí –í—ã –ø–æ–ª—É—á–∏—Ç–µ 399‚ÇΩ
‚Ä¢ –í—ã–ø–ª–∞—Ç—ã –ø–æ—Å—Ç—É–ø–∞—é—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!

üë• –í—Å–µ–≥–æ –¥—Ä—É–∑–µ–π: ${newReferralsCount}/5${achievementMessage}

üéÅ **XP –±–æ–Ω—É—Å—ã:**
üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ +${bonusXp} XP
‚ú® –î—Ä—É–≥ –ø–æ–ª—É—á–∏–ª +200 XP –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

üîó –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –µ—â–µ –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ!`, { parse_mode: 'Markdown' });
                if (achievementType) {
                    setTimeout(async () => {
                        await this.sendReferralAchievementNotification(referrerId, achievementType, bonusXp);
                    }, 2000);
                }
            }
            catch (error) {
                this.logger.warn(`Could not send referral notification to ${referrerId}: ${error.message}`);
            }
            await ctx.replyWithMarkdown(`üéÅ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –¥—Ä—É–≥–∞!\n‚≠ê –ü–æ–ª—É—á–∏–ª–∏ +200 XP –±–æ–Ω—É—Å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\nüöÄ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –±–æ—Ç–æ–º!`);
            this.logger.log(`Referral registration: ${newUserId} invited by ${referrerId}`);
        }
        catch (error) {
            this.logger.error('Error handling referral registration:', error);
        }
    }
    async sendReferralAchievementNotification(userId, achievement, bonusXp) {
        try {
            let message = '';
            let emoji = '';
            switch (achievement) {
                case 'first':
                    emoji = 'ü•â';
                    message = `${emoji} *–î–û–°–¢–ò–ñ–ï–ù–ò–ï –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–û!*

üéâ **"–ü–µ—Ä–≤—ã–π –¥—Ä—É–≥"**
–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞!

üí∞ **–ü–æ–ª—É—á–µ–Ω–æ:** +${bonusXp} XP
üéØ **–°–ª–µ–¥—É—é—â–∞—è —Ü–µ–ª—å:** –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 3 –¥—Ä—É–∑–µ–π`;
                    break;
                case 'triple':
                    emoji = 'ü•à';
                    message = `${emoji} *–î–û–°–¢–ò–ñ–ï–ù–ò–ï –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–û!*

üéâ **"–¢—Ä–æ–π–∫–∞ –¥—Ä—É–∑–µ–π"**
–£ –≤–∞—Å —É–∂–µ 3 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–≥–∞!

üí∞ **–ü–æ–ª—É—á–µ–Ω–æ:** +${bonusXp} XP
üéØ **–°–ª–µ–¥—É—é—â–∞—è —Ü–µ–ª—å:** –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 5 –¥—Ä—É–∑–µ–π`;
                    break;
                case 'five':
                    emoji = 'ü•á';
                    message = `${emoji} *–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –î–û–°–¢–ò–ñ–ï–ù–ò–ï!*

üéâ **"–ü—è—Ç–µ—Ä–∫–∞ –¥—Ä—É–∑–µ–π"**
–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º—É–º–∞ - 5 –¥—Ä—É–∑–µ–π!

üí∞ **–ü–æ–ª—É—á–µ–Ω–æ:** +${bonusXp} XP
üèÜ **–°—Ç–∞—Ç—É—Å:** –ú–∞—Å—Ç–µ—Ä —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
üëë **–ë–æ–Ω—É—Å:** –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!`;
                    break;
            }
            await this.bot.telegram.sendMessage(userId, message, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                                callback_data: 'referral_stats',
                            },
                            {
                                text: 'üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π',
                                callback_data: 'copy_referral_link',
                            },
                        ],
                    ],
                },
            });
        }
        catch (error) {
            this.logger.warn(`Could not send achievement notification to ${userId}:`, error);
        }
    }
    async updateUserActivity(userId) {
        try {
            await this.userService.updateUser(userId, {
                lastActivity: new Date(),
            });
        }
        catch (error) {
            this.logger.debug(`Could not update activity for ${userId}:`, error);
        }
    }
    async getReferralsCount(userId) {
        try {
            const user = await this.userService.findByTelegramId(userId);
            const referralsCount = await this.prisma.user.count({
                where: {
                    referredBy: user.id,
                },
            });
            return referralsCount;
        }
        catch (error) {
            this.logger.error(`Error getting referrals count for ${userId}:`, error);
            return 0;
        }
    }
    async getReferralStats(userId) {
        try {
            const user = await this.userService.findByTelegramId(userId);
            const referrals = await this.prisma.user.findMany({
                where: {
                    referredBy: user.id,
                },
                select: {
                    firstName: true,
                    lastName: true,
                    username: true,
                    createdAt: true,
                    lastActivity: true,
                },
                orderBy: {
                    createdAt: 'desc',
                },
            });
            const weekAgo = new Date();
            weekAgo.setDate(weekAgo.getDate() - 7);
            const activeReferrals = referrals.filter((ref) => ref.lastActivity && ref.lastActivity > weekAgo).length;
            const totalReferrals = referrals.length;
            let totalBonus = totalReferrals * 500;
            if (totalReferrals >= 1)
                totalBonus += 200;
            if (totalReferrals >= 3)
                totalBonus += 500;
            if (totalReferrals >= 5)
                totalBonus += 1000;
            const userData = await this.prisma.user.findUnique({
                where: { id: user.id },
                select: { referralBalance: true },
            });
            const topReferrals = referrals.slice(0, 5).map((ref) => ({
                name: ref.firstName || ref.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                joinDate: ref.createdAt.toLocaleDateString('ru-RU'),
                isActive: !!(ref.lastActivity && ref.lastActivity > weekAgo),
            }));
            return {
                totalReferrals,
                activeReferrals,
                totalBonus,
                referralBalance: userData?.referralBalance || 0,
                topReferrals,
            };
        }
        catch (error) {
            this.logger.error(`Error getting referral stats for ${userId}:`, error);
            return {
                totalReferrals: 0,
                activeReferrals: 0,
                totalBonus: 0,
                referralBalance: 0,
                topReferrals: [],
            };
        }
    }
    async onModuleInit() {
        this.launch().catch((error) => {
            this.logger.error('Failed to launch bot:', error);
        });
        this.startMotivationalMessagesService();
    }
    startMotivationalMessagesService() {
        setInterval(async () => {
            const currentHour = new Date().getHours();
            if (currentHour >= 8 && currentHour <= 22) {
                await this.sendMotivationalMessages();
            }
        }, 60 * 60 * 1000);
        this.logger.log('Motivational messages service started');
    }
    async sendMotivationalMessages() {
        try {
            this.logger.log('Motivational messages sent');
        }
        catch (error) {
            this.logger.error('Error sending motivational messages:', error);
        }
    }
    async onModuleDestroy() {
        await this.stop();
    }
    async startOnboarding(ctx) {
        await this.showOnboardingStep1(ctx);
    }
    async showOnboardingStep1(ctx) {
        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üöÄ –ù–∞—á–∞—Ç—å', callback_data: 'onboarding_start' },
                    {
                        text: 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã',
                        callback_data: 'onboarding_examples',
                    },
                ],
            ],
        };
        await ctx.replyWithMarkdown(`ü§ñ *–ü—Ä–∏–≤–µ—Ç! –Ø Ticky AI ‚Äî —Ç–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º –∏ –∑–∞–¥–∞—á–∞–º —Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π.*`, { reply_markup: keyboard });
        ctx.session.step = 'onboarding_welcome';
    }
    async showOnboardingStep2(ctx) {
        const keyboard = {
            inline_keyboard: [
                [
                    {
                        text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É',
                        callback_data: 'onboarding_add_habit',
                    },
                    { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'onboarding_skip_habit' },
                ],
            ],
        };
        await ctx.editMessageTextWithMarkdown(`
üöÄ *–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç*

–î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º —Ç–≤–æ—é –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É!
–ù–∞–ø—Ä–∏–º–µ—Ä: "–ü–∏—Ç—å –≤–æ–¥—É"

*–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:*
    `, { reply_markup: keyboard });
        ctx.session.step = 'onboarding_quick_start';
    }
    async showOnboardingStep3(ctx) {
        const keyboard = {
            inline_keyboard: [
                [{ text: '‚úÖ –ü–æ–Ω—è—Ç–Ω–æ!', callback_data: 'onboarding_complete' }],
            ],
        };
        await ctx.replyWithMarkdown(`
üìö *–ú–∏–Ω–∏-FAQ*

*–ß–¢–û –£–ú–ï–ï–¢ –ë–û–¢?*

‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏
‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
‚Ä¢ –í–æ–≤–ª–µ–∫–∞—Ç—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∏
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö

üéØ –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å?
    `, { reply_markup: keyboard });
        ctx.session.step = 'onboarding_faq';
    }
    async showMainMenu(ctx, shouldEdit = false) {
        const keyboard = {
            inline_keyboard: [
                [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É/–ø—Ä–∏–≤—ã—á–∫—É', callback_data: 'add_item' }],
                [{ text: 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'my_items' }],
                [
                    { text: 'üü¢ –ï—â—ë —Ñ—É–Ω–∫—Ü–∏–∏', callback_data: 'more_functions' },
                    { text: 'üß† –ß–∞—Ç —Å –ò–ò', callback_data: 'ai_chat' },
                ],
                [
                    { text: 'üìä –õ–∏–º–∏—Ç—ã', callback_data: 'show_limits' },
                    { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'faq_support' },
                    { text: 'üìä –ü—Ä–æ–≥—Ä–µ—Å—Å', callback_data: 'my_progress' },
                ],
            ],
        };
        const user = await this.getOrCreateUser(ctx);
        const trialInfo = await this.billingService.getTrialInfo(ctx.userId);
        const subscriptionStatus = await this.billingService.getSubscriptionStatus(ctx.userId);
        let statusText = '';
        if (trialInfo.isTrialActive) {
            statusText = `üéÅ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:** ${trialInfo.daysRemaining} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å\n`;
        }
        else if (subscriptionStatus.type !== 'FREE') {
            statusText = `üíé **${subscriptionStatus.type === 'PREMIUM' ? 'Premium' : 'Premium Plus'}**\n`;
        }
        const message = `
üëã *–ü—Ä–∏–≤–µ—Ç, ${this.userService.getDisplayName(user)}!*

${statusText}ü§ñ –Ø Ticky AI ‚Äì —Ç–≤–æ–π –ª–∏—á–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏.
    `;
        if (shouldEdit) {
            await ctx.editMessageTextWithMarkdown(message, {
                reply_markup: keyboard,
            });
        }
        else {
            await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
        }
        setTimeout(() => this.checkAndShowFeedbackRequest(ctx), 2000);
    }
    async launch() {
        try {
            await this.bot.telegram.setMyCommands([
                { command: 'start', description: 'üé¨ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
                { command: 'menu', description: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },
                { command: 'tasks', description: 'üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏' },
                { command: 'habits', description: 'üîÑ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏' },
                { command: 'reminders', description: '‚è∞ –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è' },
                { command: 'mood', description: 'üòä –î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è' },
                { command: 'focus', description: 'üçÖ –†–µ–∂–∏–º —Ñ–æ–∫—É—Å–∞' },
                { command: 'billing', description: 'üíé –ú–æ–∏ –ª–∏–º–∏—Ç—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∞' },
                { command: 'feedback', description: 'üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å' },
                { command: 'help', description: 'üÜò –°–ø—Ä–∞–≤–∫–∞' },
            ]);
            this.bot
                .launch()
                .then(() => {
                this.logger.log('üöÄ Telegram bot launched successfully');
            })
                .catch((error) => {
                this.logger.error('‚ùå Failed to launch Telegram bot:', error);
            });
            this.logger.log('ü§ñ Telegram bot launch initiated');
        }
        catch (error) {
            this.logger.error('‚ùå Error during bot initialization:', error);
            throw error;
        }
    }
    async stop() {
        for (const [userId, session] of this.activePomodoroSessions.entries()) {
            if (session.focusTimer)
                clearTimeout(session.focusTimer);
            if (session.breakTimer)
                clearTimeout(session.breakTimer);
        }
        this.activePomodoroSessions.clear();
        for (const [userId, reminder] of this.activeIntervalReminders.entries()) {
            clearInterval(reminder.intervalId);
            this.logger.log(`Stopped interval reminder for user ${userId}`);
        }
        this.activeIntervalReminders.clear();
        this.bot.stop('SIGINT');
        this.logger.log('üõë Telegram bot stopped');
    }
    getBotInstance() {
        return this.bot;
    }
    async showTasksMenu(ctx) {
        const keyboard = {
            inline_keyboard: [
                [
                    { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'tasks_add' },
                    { text: 'üìã –í—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'tasks_list' },
                ],
                [{ text: 'üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data: 'tasks_today' }],
                [{ text: 'ü§ñ AI-—Å–æ–≤–µ—Ç –ø–æ –∑–∞–¥–∞—á–∞–º', callback_data: 'tasks_ai_advice' }],
                [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_main' }],
            ],
        };
        const message = `
üìù *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    `;
        if (ctx.callbackQuery) {
            await ctx.editMessageTextWithMarkdown(message, {
                reply_markup: keyboard,
            });
        }
        else {
            await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
        }
    }
    async startAddingTask(ctx) {
        const user = await this.userService.findByTelegramId(ctx.userId);
        if (!user.timezone) {
            ctx.session.pendingAction = 'adding_task';
            await this.askForTimezone(ctx);
            return;
        }
        const limitCheck = await this.billingService.checkUsageLimit(ctx.userId, 'dailyTasks');
        if (!limitCheck.allowed) {
            await ctx.replyWithMarkdown(limitCheck.message || 'üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–¥–∞—á', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Premium',
                                callback_data: 'upgrade_premium',
                            },
                        ],
                        [{ text: 'üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã', callback_data: 'show_limits' }],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_tasks' }],
                    ],
                },
            });
            return;
        }
        await ctx.replyWithMarkdown(`
‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏*

üìä **–ó–∞–¥–∞—á —Å–µ–≥–æ–¥–Ω—è:** ${limitCheck.current}/${limitCheck.limit === -1 ? '‚àû' : limitCheck.limit}

üìù –ù–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:
    `);
        ctx.session.step = 'waiting_for_task_title';
    }
    async handleTaskCreation(ctx, taskTitle) {
        try {
            const task = await this.taskService.createTask({
                userId: ctx.userId,
                title: taskTitle.trim(),
                description: '',
                priority: 'MEDIUM',
            });
            await this.billingService.incrementUsage(ctx.userId, 'dailyTasks');
            const user = await this.userService.findByTelegramId(ctx.userId);
            await this.userService.updateUserStats(ctx.userId, {
                totalTasks: user.totalTasks + 1,
            });
            const usageInfo = await this.billingService.checkUsageLimit(ctx.userId, 'dailyTasks');
            await ctx.replyWithMarkdown(`
‚úÖ *–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!*

üìù *${task.title}*
‚ö° XP –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${task.xpReward}
üìä **–ó–∞–¥–∞—á —Å–µ–≥–æ–¥–Ω—è:** ${usageInfo.current}/${usageInfo.limit === -1 ? '‚àû' : usageInfo.limit}

–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫!
      `);
            ctx.session.step = undefined;
            setTimeout(() => this.showTasksMenu(ctx), 1500);
        }
        catch (error) {
            this.logger.error('Error creating task:', error);
            await ctx.replyWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
      `);
            ctx.session.step = undefined;
        }
    }
    async showTasksList(ctx) {
        try {
            const tasks = await this.taskService.findTasksByUserId(ctx.userId);
            if (tasks.length === 0) {
                await ctx.editMessageTextWithMarkdown(`
üìã *–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç*

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!
        `);
                return;
            }
            const pendingTasks = tasks.filter((task) => task.status === 'PENDING' || task.status === 'IN_PROGRESS');
            const completedTasks = tasks.filter((task) => task.status === 'COMPLETED');
            let message = `üìã *–í–∞—à–∏ –∑–∞–¥–∞—á–∏:*\n\n`;
            message += `üîÑ **–ê–∫—Ç–∏–≤–Ω—ã—Ö:** ${pendingTasks.length}\n`;
            message += `‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö:** ${completedTasks.length}\n\n`;
            message += `*–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:*`;
            const keyboard = {
                inline_keyboard: [
                    ...pendingTasks.slice(0, 8).map((task) => [
                        {
                            text: `${this.getPriorityEmoji(task.priority)} ${task.title.substring(0, 30)}${task.title.length > 30 ? '...' : ''} (${task.xpReward} XP)`,
                            callback_data: `task_complete_${task.id}`,
                        },
                    ]),
                    ...(pendingTasks.length > 8
                        ? [
                            [
                                {
                                    text: `... –∏ –µ—â–µ ${pendingTasks.length - 8} –∑–∞–¥–∞—á`,
                                    callback_data: 'tasks_list_more',
                                },
                            ],
                        ]
                        : []),
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º', callback_data: 'back_to_tasks' }],
                ],
            };
            await ctx.editMessageTextWithMarkdown(message, {
                reply_markup: keyboard,
            });
        }
        catch (error) {
            this.logger.error('Error showing tasks list:', error);
            await ctx.editMessageTextWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á');
        }
    }
    async showAllTasksList(ctx) {
        try {
            const tasks = await this.taskService.findTasksByUserId(ctx.userId);
            const pendingTasks = tasks.filter((task) => task.status === 'PENDING' || task.status === 'IN_PROGRESS');
            if (pendingTasks.length === 0) {
                await ctx.editMessageTextWithMarkdown(`
üìã *–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏*

–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! üéâ
        `);
                return;
            }
            let message = `üìã *–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (${pendingTasks.length}):*\n\n`;
            message += `*–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:*`;
            const keyboard = {
                inline_keyboard: [
                    ...pendingTasks.map((task) => [
                        {
                            text: `${this.getPriorityEmoji(task.priority)} ${task.title.substring(0, 35)}${task.title.length > 35 ? '...' : ''} (${task.xpReward} XP)`,
                            callback_data: `task_complete_${task.id}`,
                        },
                    ]),
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º', callback_data: 'back_to_tasks' }],
                ],
            };
            await ctx.editMessageTextWithMarkdown(message, {
                reply_markup: keyboard,
            });
        }
        catch (error) {
            this.logger.error('Error showing all tasks list:', error);
            await ctx.editMessageTextWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á');
        }
    }
    async showTodayTasks(ctx) {
        try {
            const tasks = await this.taskService.getTodayTasks(ctx.userId);
            if (tasks.length === 0) {
                await ctx.editMessageTextWithMarkdown(`
üìÖ *–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*

–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç! üéâ
        `);
                return;
            }
            const pendingTasks = tasks.filter((task) => task.status !== 'COMPLETED');
            const completedTasks = tasks.filter((task) => task.status === 'COMPLETED');
            let message = `üìÖ *–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n`;
            message += `üîÑ **–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é:** ${pendingTasks.length}\n`;
            message += `‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–æ:** ${completedTasks.length}\n\n`;
            message += `*–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:*`;
            const keyboard = {
                inline_keyboard: [
                    ...pendingTasks.map((task) => [
                        {
                            text: `${this.getPriorityEmoji(task.priority)} ${task.title.substring(0, 30)}${task.title.length > 30 ? '...' : ''} (${task.xpReward} XP)`,
                            callback_data: `task_complete_${task.id}`,
                        },
                    ]),
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º', callback_data: 'back_to_tasks' }],
                ],
            };
            await ctx.editMessageTextWithMarkdown(message, {
                reply_markup: keyboard,
            });
        }
        catch (error) {
            this.logger.error('Error showing today tasks:', error);
            await ctx.editMessageTextWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è');
        }
    }
    async completeTask(ctx, taskId) {
        try {
            const result = await this.taskService.completeTask(taskId, ctx.userId);
            const userBefore = await this.userService.findByTelegramId(ctx.userId);
            const newTotalXp = userBefore.totalXp + result.xpGained;
            await this.userService.updateUserStats(ctx.userId, {
                completedTasks: userBefore.completedTasks + 1,
                todayTasks: userBefore.todayTasks + 1,
                xpGained: result.xpGained,
            });
            const userAfter = await this.userService.findByTelegramId(ctx.userId);
            const leveledUp = userAfter.level > userBefore.level;
            let message = `
üéâ *–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*

‚úÖ ${result.task.title}
üéØ –ü–æ–ª—É—á–µ–Ω–æ XP: +${result.xpGained}
`;
            if (leveledUp) {
                message += `
üéä *–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –ù–û–í–´–ô –£–†–û–í–ï–ù–¨!*
‚≠ê –£—Ä–æ–≤–µ–Ω—å: ${userAfter.level} (–±—ã–ª–æ: ${userBefore.level})
üèÜ –û–±—â–∏–π XP: ${userAfter.totalXp}
`;
            }
            else {
                const xpToNext = this.userService.getXpToNextLevel(userAfter);
                const progress = this.userService.getLevelProgressRatio(userAfter);
                const progressBar = this.createProgressBar(progress);
                message += `
üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è:
${progressBar} ${Math.round(progress * 100)}%
üéØ –û—Å—Ç–∞–ª–æ—Å—å XP –¥–æ —É—Ä–æ–≤–Ω—è ${userAfter.level + 1}: ${xpToNext}
`;
            }
            message += '\n–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üëè';
            await ctx.editMessageTextWithMarkdown(message);
            setTimeout(() => this.showTasksMenu(ctx), leveledUp ? 3000 : 2000);
        }
        catch (error) {
            this.logger.error('Error completing task:', error);
            if (error.message.includes('already completed')) {
                await ctx.editMessageTextWithMarkdown('‚ÑπÔ∏è –≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!');
            }
            else {
                await ctx.editMessageTextWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
            }
        }
    }
    getPriorityEmoji(priority) {
        switch (priority) {
            case 'URGENT':
                return 'üî¥';
            case 'HIGH':
                return 'üü†';
            case 'MEDIUM':
                return 'üü°';
            case 'LOW':
                return 'üü¢';
            default:
                return '‚ö™';
        }
    }
    async askForTimezone(ctx) {
        await ctx.replyWithMarkdown('üîç *–û–ø—Ä–µ–¥–µ–ª—è—é –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å...*');
        try {
            const ipTimezone = await this.detectTimezoneByIP();
            if (ipTimezone) {
                await ctx.replyWithMarkdown(`
üåç *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å*

üèôÔ∏è –†–µ–≥–∏–æ–Ω: ${ipTimezone.city || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${ipTimezone.timezone}

–í—Å–µ –≤–µ—Ä–Ω–æ?`, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: '‚úÖ –î–∞, –≤–µ—Ä–Ω–æ',
                                    callback_data: `confirm_timezone_${ipTimezone.timezone}`,
                                },
                                {
                                    text: '‚ùå –ù–µ—Ç, –≤—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é',
                                    callback_data: 'manual_timezone',
                                },
                            ],
                        ],
                    },
                });
                return;
            }
        }
        catch (error) {
            this.logger.warn('Could not detect timezone by IP:', error);
        }
        await this.showManualTimezoneSelection(ctx);
    }
    async showManualTimezoneSelection(ctx) {
        await ctx.replyWithMarkdown(`
üåç *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞*

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–±:`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üèôÔ∏è –í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥', callback_data: 'input_city' },
                        {
                            text: 'üïê –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞',
                            callback_data: 'select_timezone',
                        },
                    ],
                ],
            },
        });
    }
    async detectTimezoneByIP() {
        try {
            const fetch = (await import('node-fetch')).default;
            const response = await fetch('http://worldtimeapi.org/api/ip');
            if (!response.ok) {
                return null;
            }
            const data = await response.json();
            return {
                timezone: data.timezone,
                city: data.timezone.split('/')[1]?.replace(/_/g, ' '),
            };
        }
        catch (error) {
            this.logger.warn('Error detecting timezone by IP:', error);
            return null;
        }
    }
    async handleCityInput(ctx, cityName) {
        await ctx.replyWithMarkdown('üîç *–û–ø—Ä–µ–¥–µ–ª—è—é —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å...*');
        const result = await this.openaiService.getTimezoneByCity(cityName);
        if (!result) {
            await ctx.replyWithMarkdown(`
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –≥–æ—Ä–æ–¥–∞ "${cityName}"*

üìç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ:
      `);
            return;
        }
        await this.userService.updateUser(ctx.userId, {
            timezone: result.timezone,
            city: result.normalizedCity,
        });
        await ctx.replyWithMarkdown(`
‚úÖ *–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!*

üèôÔ∏è –ì–æ—Ä–æ–¥: ${result.normalizedCity}
üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${result.timezone}

–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∏!
    `);
        ctx.session.step = undefined;
        if (ctx.session.pendingAction === 'adding_task') {
            ctx.session.pendingAction = undefined;
            await this.startAddingTask(ctx);
        }
        else if (ctx.session.pendingAction === 'adding_habit') {
            ctx.session.pendingAction = undefined;
            ctx.session.step = 'adding_habit';
            await ctx.replyWithMarkdown('üîÑ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        }
        else {
            await this.showMainMenu(ctx);
        }
    }
    createProgressBar(progress, length = 10) {
        const filled = Math.round(progress * length);
        const empty = length - filled;
        return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
    }
    async checkAndShowFeedbackRequest(ctx) {
        const user = await this.userService.findByTelegramId(ctx.userId);
        const accountAge = Date.now() - user.createdAt.getTime();
        const threeDaysInMs = 3 * 24 * 60 * 60 * 1000;
        if (accountAge >= threeDaysInMs && !user.feedbackGiven) {
            await this.showFeedbackRequest(ctx);
        }
    }
    async showFeedbackSurvey(ctx) {
        try {
            const keyboard = {
                inline_keyboard: [
                    [
                        { text: 'üéØ –£–¥–æ–±—Å—Ç–≤–æ', callback_data: 'feedback_like_convenience' },
                        {
                            text: 'üöÄ –ú–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π',
                            callback_data: 'feedback_like_features',
                        },
                    ],
                    [
                        {
                            text: 'üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è',
                            callback_data: 'feedback_like_gamification',
                        },
                        { text: 'üîß –î—Ä—É–≥–æ–µ', callback_data: 'feedback_like_other' },
                    ],
                ],
            };
            const message = `
üí≠ *–ú–∏–Ω–∏-–æ–ø—Ä–æ—Å*

üëç *–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è?*

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤ –±–æ—Ç–µ:
      `;
            if (ctx.callbackQuery) {
                await ctx.editMessageTextWithMarkdown(message, {
                    reply_markup: keyboard,
                });
            }
            else {
                await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
            }
        }
        catch (error) {
            this.logger.error('Error in showFeedbackSurvey:', error);
            await ctx.replyWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
    async showFeedbackRequest(ctx) {
        const keyboard = {
            inline_keyboard: [
                [
                    { text: '‚≠êÔ∏è', callback_data: 'feedback_rating_5' },
                    { text: 'üòä', callback_data: 'feedback_rating_4' },
                    { text: 'üòê', callback_data: 'feedback_rating_3' },
                    { text: 'üò†', callback_data: 'feedback_rating_2' },
                ],
                [{ text: '‚è∞ –ü–æ–∑–∂–µ', callback_data: 'feedback_later' }],
            ],
        };
        await ctx.editMessageTextWithMarkdown(`
üí≠ *–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞*

–ö–∞–∫ –≤–∞–º —Ä–∞–±–æ—Ç–∞ —Å Ticky AI? –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ!
      `, { reply_markup: keyboard });
    }
    async handleFeedbackRating(ctx, rating) {
        await ctx.answerCbQuery();
        ctx.session.feedbackRating = rating;
        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üéØ –£–¥–æ–±—Å—Ç–≤–æ', callback_data: 'feedback_like_convenience' },
                    { text: 'üöÄ –ú–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π', callback_data: 'feedback_like_features' },
                ],
                [
                    {
                        text: 'üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è',
                        callback_data: 'feedback_like_gamification',
                    },
                    { text: 'üîß –î—Ä—É–≥–æ–µ', callback_data: 'feedback_like_other' },
                ],
            ],
        };
        await ctx.editMessageTextWithMarkdown(`
üëç *–ß—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è?*

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤ –±–æ—Ç–µ:
      `, { reply_markup: keyboard });
    }
    async handleFeedbackImprovement(ctx, likedFeature) {
        await ctx.answerCbQuery();
        ctx.session.feedbackLiked = likedFeature;
        const keyboard = {
            inline_keyboard: [
                [
                    {
                        text: 'üîß –ë–æ–ª—å—à–µ —Ñ—É–Ω–∫—Ü–∏–π',
                        callback_data: 'feedback_improve_features',
                    },
                    { text: 'üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å', callback_data: 'feedback_improve_interface' },
                ],
                [
                    {
                        text: '‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã',
                        callback_data: 'feedback_improve_speed',
                    },
                    {
                        text: 'üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ',
                        callback_data: 'feedback_improve_custom',
                    },
                ],
                [
                    {
                        text: '‚úÖ –í—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç',
                        callback_data: 'feedback_improve_nothing',
                    },
                ],
            ],
        };
        await ctx.editMessageTextWithMarkdown(`
üí° *–ß—Ç–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —É–ª—É—á—à–∏—Ç—å?*

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ:
      `, { reply_markup: keyboard });
    }
    async completeFeedbackSurvey(ctx, improvement) {
        await ctx.answerCbQuery();
        await this.userService.updateUser(ctx.userId, {
            feedbackGiven: true,
        });
        const improvements = {
            convenience: 'üéØ –£–¥–æ–±—Å—Ç–≤–æ',
            features: 'üöÄ –ú–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π',
            gamification: 'üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è',
            other: 'üîß –î—Ä—É–≥–æ–µ',
        };
        const improvementText = improvements[improvement] || improvement;
        await ctx.editMessageTextWithMarkdown(`
‚ú® *–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ!*

–í—ã –≤—ã–±—Ä–∞–ª–∏: ${improvementText}

–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üíù

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö —Ü–µ–ª–µ–π! üöÄ
    `);
    }
    async completeFeedback(ctx, improvement) {
        await this.userService.updateUser(ctx.userId, {
            feedbackGiven: true,
        });
        const ratingEmojis = ['üò†', 'üò†', 'üòê', 'üòä', '‚≠êÔ∏è'];
        const rating = ctx.session.feedbackRating || 3;
        const ratingEmoji = ratingEmojis[rating - 1];
        await ctx.replyWithMarkdown(`
üôè *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!*

${ratingEmoji} –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: ${rating}/5
üëç –ù—Ä–∞–≤–∏—Ç—Å—è: ${ctx.session.feedbackLiked || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üí° –£–ª—É—á—à–∏—Ç—å: ${improvement}

–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å! üíö
    `);
        ctx.session.feedbackRating = undefined;
        ctx.session.feedbackLiked = undefined;
    }
    async startAIChat(ctx) {
        await ctx.editMessageTextWithMarkdown(`
üß† *–ò–ò –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç*

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å:
    `, {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è',
                            callback_data: 'ai_analyze_profile',
                        },
                    ],
                    [
                        {
                            text: 'üí° –°–æ–≤–µ—Ç—ã –ø–æ –∑–∞–¥–∞—á–∞–º',
                            callback_data: 'ai_task_recommendations',
                        },
                    ],
                    [
                        {
                            text: 'üéØ –ü–æ–º–æ—â—å —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏',
                            callback_data: 'ai_habit_help',
                        },
                    ],
                    [
                        {
                            text: '‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏',
                            callback_data: 'ai_time_planning',
                        },
                    ],
                    [
                        {
                            text: '‚úçÔ∏è –°–≤–æ–π –≤–æ–ø—Ä–æ—Å',
                            callback_data: 'ai_custom_question',
                        },
                    ],
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                ],
            },
        });
        ctx.session.aiChatMode = true;
    }
    async handleAIAnalyzeProfile(ctx) {
        const user = await this.userService.findByTelegramId(ctx.userId);
        const tasks = await this.taskService.findTasksByUserId(ctx.userId);
        const completedTasks = tasks.filter((task) => task.completedAt !== null);
        const accountDays = Math.floor((Date.now() - user.createdAt.getTime()) / (1000 * 60 * 60 * 24));
        const completionRate = tasks.length > 0
            ? Math.round((completedTasks.length / tasks.length) * 100)
            : 0;
        let status = '';
        if (user.totalXp < 500) {
            status = 'üå± –ù–æ–≤–∏—á–æ–∫ - —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!';
        }
        else if (user.totalXp < 2000) {
            status = 'üìà –†–∞–∑–≤–∏–≤–∞–µ—Ç–µ—Å—å - —É–∂–µ –≤–∏–¥–Ω—ã –ø–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!';
        }
        else {
            status = 'üöÄ –û–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!';
        }
        await ctx.editMessageTextWithMarkdown(`
üìä *–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è*

${status}

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚≠ê –û–ø—ã—Ç: ${user.totalXp} XP (—É—Ä–æ–≤–µ–Ω—å ${user.level})
üìÖ –° –±–æ—Ç–æ–º: ${accountDays} –¥–Ω–µ–π
üìù –ó–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ: ${tasks.length}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedTasks.length} (${completionRate}%)

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:**
${completionRate > 70
            ? 'üéØ –û—Ç–ª–∏—á–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Ü–µ–ª–∏.'
            : completionRate > 40
                ? 'üí™ –•–æ—Ä–æ—à–æ! –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á.'
                : 'ÔøΩ –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ - –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –≤ –¥–µ–Ω—å!'}
      `, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                ],
            },
        });
    }
    async handleAIChatMessage(ctx, message) {
        try {
            const limitCheck = await this.billingService.checkUsageLimit(ctx.userId, 'dailyAiQueries');
            if (!limitCheck.allowed) {
                await ctx.replyWithMarkdown(limitCheck.message || 'üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ò–ò-–∑–∞–ø—Ä–æ—Å–æ–≤', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Premium',
                                    callback_data: 'upgrade_premium',
                                },
                            ],
                            [{ text: 'üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã', callback_data: 'show_limits' }],
                            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                        ],
                    },
                });
                return;
            }
            const absoluteTimePatterns = [
                /–Ω–∞–ø–æ–º–Ω–∏\s+–º–Ω–µ\s+(.+?)\s+–≤\s+(\d{1,2}):(\d{2})/i,
                /–Ω–∞–ø–æ–º–Ω–∏\s+(.+?)\s+–≤\s+(\d{1,2}):(\d{2})/i,
                /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+(.+?)\s+–≤\s+(\d{1,2}):(\d{2})/i,
                /–ø–æ—Å—Ç–∞–≤—å\s+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+(.+?)\s+–Ω–∞\s+(\d{1,2}):(\d{2})/i,
            ];
            const relativeTimePatterns = [
                /–Ω–∞–ø–æ–º–Ω–∏\s+–º–Ω–µ\s+(.+?)\s+—á–µ—Ä–µ–∑\s+(\d+)\s+–º–∏–Ω—É—Ç/i,
                /–Ω–∞–ø–æ–º–Ω–∏\s+(.+?)\s+—á–µ—Ä–µ–∑\s+(\d+)\s+–º–∏–Ω—É—Ç/i,
                /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+(.+?)\s+—á–µ—Ä–µ–∑\s+(\d+)\s+–º–∏–Ω—É—Ç/i,
            ];
            const intervalPatterns = [
                /–Ω–∞–ø–æ–º–∏–Ω–∞–π\s+(.+?)\s+–∫–∞–∂–¥—ã–µ?\s+(\d+)\s+(–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)/i,
                /–Ω–∞–ø–æ–º–Ω–∏\s+(.+?)\s+–∫–∞–∂–¥—ã–µ?\s+(\d+)\s+(–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)/i,
                /(.+?)\s+–∫–∞–∂–¥—ã–µ?\s+(\d+)\s+(–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)/i,
            ];
            let reminderMatch = null;
            for (const pattern of intervalPatterns) {
                reminderMatch = message.match(pattern);
                if (reminderMatch) {
                    const [, reminderText, amount, unit] = reminderMatch;
                    let intervalMinutes = 0;
                    if (unit.includes('–º–∏–Ω—É—Ç')) {
                        intervalMinutes = parseInt(amount);
                    }
                    else if (unit.includes('—á–∞—Å')) {
                        intervalMinutes = parseInt(amount) * 60;
                    }
                    if (intervalMinutes >= 1 && intervalMinutes <= 1440) {
                        await this.handleIntervalReminder(ctx, reminderText.trim(), intervalMinutes);
                        return;
                    }
                }
            }
            for (const pattern of absoluteTimePatterns) {
                reminderMatch = message.match(pattern);
                if (reminderMatch) {
                    const [, reminderText, hours, minutes] = reminderMatch;
                    await this.handleReminderRequest(ctx, reminderText, hours, minutes);
                    return;
                }
            }
            for (const pattern of relativeTimePatterns) {
                reminderMatch = message.match(pattern);
                if (reminderMatch) {
                    const [, reminderText, minutesFromNow] = reminderMatch;
                    await this.handleRelativeReminderRequest(ctx, reminderText, parseInt(minutesFromNow));
                    return;
                }
            }
            await ctx.replyWithMarkdown('ü§î *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...*');
            const personalizedResponse = await this.aiContextService.generatePersonalizedMessage(ctx.userId, 'motivation', `${message}. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ, –¥–æ 100 —Å–ª–æ–≤, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É.`);
            await this.billingService.incrementUsage(ctx.userId, 'dailyAiQueries');
            const usageInfo = await this.billingService.checkUsageLimit(ctx.userId, 'dailyAiQueries');
            await ctx.replyWithMarkdown(`
üß† *–ò–ò –æ—Ç–≤–µ—á–∞–µ—Ç:*

${personalizedResponse}

üìä –ò–ò-–∑–∞–ø—Ä–æ—Å–æ–≤: ${usageInfo.current}/${usageInfo.limit === -1 ? '‚àû' : usageInfo.limit}
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        }
        catch (error) {
            await ctx.replyWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞*

–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å.
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
                    ],
                },
            });
        }
    }
    async handleRelativeReminderRequest(ctx, reminderText, minutesFromNow) {
        try {
            const user = await this.userService.findByTelegramId(ctx.userId);
            if (minutesFromNow <= 0 || minutesFromNow > 1440) {
                await ctx.editMessageTextWithMarkdown(`
‚ùå *–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ—Ç 1 –¥–æ 1440 –º–∏–Ω—É—Ç (–º–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞)
        `);
                return;
            }
            const now = new Date();
            const reminderDate = new Date(now.getTime() + minutesFromNow * 60 * 1000);
            setTimeout(async () => {
                try {
                    await ctx.telegram.sendMessage(ctx.userId, `üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*

${reminderText}`, { parse_mode: 'Markdown' });
                }
                catch (error) {
                    this.logger.error('Error sending reminder:', error);
                }
            }, minutesFromNow * 60 * 1000);
            const timeStr = this.formatTimeWithTimezone(reminderDate, user?.timezone);
            await ctx.editMessageTextWithMarkdown(`‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!*

üìù **–¢–µ–∫—Å—Ç:** ${reminderText}
‚è∞ **–í—Ä–µ–º—è:** —á–µ—Ä–µ–∑ ${minutesFromNow} –º–∏–Ω—É—Ç (–≤ ${timeStr})

–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è! üîî`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
            await this.userService.updateUser(ctx.userId, {
                totalXp: user.totalXp + 5,
            });
        }
        catch (error) {
            this.logger.error('Error creating relative reminder:', error);
            await ctx.editMessageTextWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*

–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.
      `);
        }
    }
    async handleReminderRequest(ctx, reminderText, hours, minutes) {
        try {
            const user = await this.userService.findByTelegramId(ctx.userId);
            const limitCheck = await this.billingService.checkUsageLimit(ctx.userId, 'dailyReminders');
            if (!limitCheck.allowed) {
                await ctx.replyWithMarkdown(limitCheck.message || 'üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Premium',
                                    callback_data: 'upgrade_premium',
                                },
                            ],
                            [{ text: 'üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã', callback_data: 'show_limits' }],
                        ],
                    },
                });
                return;
            }
            const hourNum = parseInt(hours);
            const minuteNum = parseInt(minutes);
            if (hourNum < 0 || hourNum > 23 || minuteNum < 0 || minuteNum > 59) {
                await ctx.replyWithMarkdown(`
‚ùå *–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 17:30)
        `);
                return;
            }
            const now = new Date();
            const reminderDate = new Date();
            reminderDate.setHours(hourNum, minuteNum, 0, 0);
            if (reminderDate <= now) {
                reminderDate.setDate(reminderDate.getDate() + 1);
            }
            const savedReminder = await this.prisma.reminder.create({
                data: {
                    userId: ctx.userId,
                    type: 'GENERAL',
                    title: reminderText,
                    message: reminderText,
                    scheduledTime: reminderDate,
                    status: client_1.ReminderStatus.ACTIVE,
                },
            });
            const delay = reminderDate.getTime() - now.getTime();
            setTimeout(async () => {
                try {
                    await ctx.telegram.sendMessage(ctx.userId, `üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\n${reminderText}`, { parse_mode: 'Markdown' });
                    await this.prisma.reminder.update({
                        where: { id: savedReminder.id },
                        data: { status: client_1.ReminderStatus.COMPLETED },
                    });
                }
                catch (error) {
                    this.logger.error('Error sending reminder:', error);
                }
            }, delay);
            await this.billingService.incrementUsage(ctx.userId, 'dailyReminders');
            const timeStr = `${hours.padStart(2, '0')}:${minutes.padStart(2, '0')}`;
            const dateStr = reminderDate.toLocaleDateString('ru-RU', {
                day: 'numeric',
                month: 'long',
            });
            const usageInfo = await this.billingService.checkUsageLimit(ctx.userId, 'dailyReminders');
            await ctx.replyWithMarkdown(`
‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!*

üìù **–¢–µ–∫—Å—Ç:** ${reminderText}
‚è∞ **–í—Ä–µ–º—è:** ${timeStr}
üìÖ **–î–∞—Ç–∞:** ${dateStr}

üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è:** ${usageInfo.current}/${usageInfo.limit === -1 ? '‚àû' : usageInfo.limit} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è! üîî
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
            await this.userService.updateUser(ctx.userId, {
                totalXp: user.totalXp + 5,
            });
        }
        catch (error) {
            this.logger.error('Error creating reminder:', error);
            await ctx.replyWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*

–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.
      `);
        }
    }
    async handleReminderTimeInput(ctx, timeInput) {
        try {
            const reminderText = ctx.session.pendingReminder;
            if (!reminderText) {
                await ctx.replyWithMarkdown('‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                return;
            }
            let hours, minutes;
            const timeMatch = timeInput.match(/(\d{1,2}):(\d{2})/);
            if (timeMatch) {
                hours = timeMatch[1];
                minutes = timeMatch[2];
            }
            else {
                const inTimeMatch = timeInput.match(/–≤\s*(\d{1,2})(?::(\d{2}))?/i);
                if (inTimeMatch) {
                    hours = inTimeMatch[1];
                    minutes = inTimeMatch[2] || '00';
                }
                else {
                    const minutesMatch = timeInput.match(/—á–µ—Ä–µ–∑\s*(\d+)\s*–º–∏–Ω—É—Ç/i);
                    if (minutesMatch) {
                        const minutesToAdd = parseInt(minutesMatch[1]);
                        const futureTime = new Date();
                        futureTime.setMinutes(futureTime.getMinutes() + minutesToAdd);
                        hours = futureTime.getHours().toString();
                        minutes = futureTime.getMinutes().toString().padStart(2, '0');
                    }
                    else {
                        const hoursMatch = timeInput.match(/—á–µ—Ä–µ–∑\s*(\d+)\s*—á–∞—Å/i);
                        if (hoursMatch) {
                            const hoursToAdd = parseInt(hoursMatch[1]);
                            const futureTime = new Date();
                            futureTime.setHours(futureTime.getHours() + hoursToAdd);
                            hours = futureTime.getHours().toString();
                            minutes = futureTime.getMinutes().toString().padStart(2, '0');
                        }
                        else if (timeInput.match(/^\d{1,2}$/) &&
                            parseInt(timeInput) <= 23) {
                            hours = timeInput;
                            minutes = '00';
                        }
                    }
                }
            }
            if (!hours || !minutes) {
                await ctx.editMessageTextWithMarkdown(`
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –≤—Ä–µ–º—è*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:
‚Ä¢ **17:30** - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ **–≤ 18:00** - —Å –ø—Ä–µ–¥–ª–æ–≥–æ–º
‚Ä¢ **—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç** - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ **—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞** - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ **18** - —Ü–µ–ª—ã–π —á–∞—Å (18:00)

_–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑_
        `);
                return;
            }
            const hourNum = parseInt(hours);
            const minuteNum = parseInt(minutes);
            if (hourNum < 0 || hourNum > 23 || minuteNum < 0 || minuteNum > 59) {
                await ctx.editMessageTextWithMarkdown(`
‚ùå *–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è*

–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 0 –¥–æ 59.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
        `);
                return;
            }
            ctx.session.pendingReminder = undefined;
            ctx.session.waitingForReminderTime = false;
            await this.handleReminderRequest(ctx, reminderText, hours, minutes);
        }
        catch (error) {
            this.logger.error('Error processing reminder time input:', error);
            ctx.session.pendingReminder = undefined;
            ctx.session.waitingForReminderTime = false;
            await ctx.editMessageTextWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.
      `);
        }
    }
    async handleAudioMessage(ctx, type) {
        try {
            const emoji = type === 'voice' ? 'üé§' : 'üéµ';
            const messageType = type === 'voice' ? '–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' : '–∞—É–¥–∏–æ —Ñ–∞–π–ª';
            await ctx.replyWithMarkdown(`${emoji} *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ${messageType}...*`);
            const transcribedText = await this.transcribeAudio(ctx, type);
            if (!transcribedText) {
                await ctx.replyWithMarkdown(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ${messageType}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`);
                return;
            }
            await ctx.replyWithMarkdown(`üéØ *–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:* "${transcribedText}"`);
            if (ctx.session.aiChatMode) {
                await this.handleAIChatMessage(ctx, transcribedText);
                return;
            }
            if (this.isReminderRequest(transcribedText)) {
                await this.processReminderFromText(ctx, transcribedText);
                return;
            }
            if (transcribedText.toLowerCase().includes('–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É') ||
                transcribedText.toLowerCase().includes('–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞') ||
                transcribedText.toLowerCase().includes('—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É')) {
                await this.startAddingTask(ctx);
                return;
            }
            if (transcribedText.toLowerCase().includes('–º–µ–Ω—é') ||
                transcribedText.toLowerCase().includes('–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') ||
                transcribedText.toLowerCase().includes('–ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é')) {
                await this.showMainMenu(ctx);
                return;
            }
            if (transcribedText.toLowerCase().includes('–ø–æ–º–æ—â—å') ||
                transcribedText.toLowerCase().includes('—Å–ø—Ä–∞–≤–∫–∞') ||
                transcribedText.toLowerCase().includes('—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å')) {
                await ctx.editMessageTextWithMarkdown(`
ü§ñ *Ticky AI - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É  
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ

*–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
üé§ "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ..." - —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
üé§ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É" - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
üé§ "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é" - –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
üé§ "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?" - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

*–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*
üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
üß† –ü–æ–æ–±—â–∞—Ç—å—Å—è —Å –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º
üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu
        `);
                return;
            }
            if (transcribedText.toLowerCase().includes('–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å') ||
                transcribedText.toLowerCase().includes('–æ—Ç–∑—ã–≤') ||
                transcribedText.toLowerCase().includes('—Ñ–∏–¥–±–µ–∫')) {
                await this.showFeedbackSurvey(ctx);
                return;
            }
            if (transcribedText.toLowerCase().includes('–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É') ||
                transcribedText.toLowerCase().includes('–Ω–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞') ||
                transcribedText.toLowerCase().includes('—Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É')) {
                await this.startAddingHabit(ctx);
                return;
            }
            await this.analyzeAndCreateFromVoice(ctx, transcribedText);
        }
        catch (error) {
            this.logger.error(`${type} message processing error:`, error);
            await ctx.replyWithMarkdown(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${type === 'voice' ? '–≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è' : '–∞—É–¥–∏–æ —Ñ–∞–π–ª–∞'}.`);
        }
    }
    async transcribeAudio(ctx, type) {
        try {
            if (!ctx.message) {
                return null;
            }
            let fileId;
            if (type === 'voice' && 'voice' in ctx.message) {
                fileId = ctx.message.voice.file_id;
            }
            else if (type === 'audio' && 'audio' in ctx.message) {
                fileId = ctx.message.audio.file_id;
            }
            else {
                return null;
            }
            const fileLink = await ctx.telegram.getFileLink(fileId);
            const response = await fetch(fileLink.href);
            const buffer = await response.arrayBuffer();
            const fileName = type === 'voice' ? 'voice.ogg' : 'audio.mp3';
            const mimeType = type === 'voice' ? 'audio/ogg' : 'audio/mpeg';
            const file = new File([buffer], fileName, { type: mimeType });
            const transcription = await this.openaiService.transcribeAudio(file);
            return transcription;
        }
        catch (error) {
            this.logger.error(`Error transcribing ${type}:`, error);
            return null;
        }
    }
    async processReminderFromText(ctx, text) {
        this.logger.log(`Processing reminder from text: "${text}"`);
        const intervalMatch = text.match(/–∫–∞–∂–¥—ã–µ?\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)/i);
        if (intervalMatch) {
            const intervalAmount = parseInt(intervalMatch[1]);
            const intervalUnit = intervalMatch[2].toLowerCase();
            let intervalMinutes = 0;
            if (intervalUnit.includes('–º–∏–Ω—É—Ç')) {
                intervalMinutes = intervalAmount;
            }
            else if (intervalUnit.includes('—á–∞—Å')) {
                intervalMinutes = intervalAmount * 60;
            }
            if (intervalMinutes < 1 || intervalMinutes > 1440) {
                await ctx.replyWithMarkdown(`
‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª*

–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –º–∏–Ω—É—Ç—ã –¥–æ 24 —á–∞—Å–æ–≤.
        `);
                return;
            }
            const reminderText = text
                .replace(/–Ω–∞–ø–æ–º–Ω–∏\s*(–º–Ω–µ)?/gi, '')
                .replace(/–Ω–∞–ø–æ–º–Ω—é\s*(—Ç–µ–±–µ|–≤–∞–º)?/gi, '')
                .replace(/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/gi, '')
                .replace(/–ø–æ—Å—Ç–∞–≤—å/gi, '')
                .replace(/—É—Å—Ç–∞–Ω–æ–≤–∏/gi, '')
                .replace(/–∫–∞–∂–¥—ã–µ?\s*\d+\s*(?:–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)/gi, '')
                .trim();
            if (!reminderText || reminderText.length < 2) {
                await ctx.replyWithMarkdown(`
ü§î *–û —á–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–µ ${intervalAmount} ${intervalUnit}?*

–í—ã —É–∫–∞–∑–∞–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–ª–∏, –æ —á–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å.

*–ü—Ä–∏–º–µ—Ä:* "–Ω–∞–ø–æ–º–∏–Ω–∞–π –ø–∏—Ç—å –≤–æ–¥—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"
        `);
                return;
            }
            await this.handleIntervalReminder(ctx, reminderText, intervalMinutes);
            return;
        }
        const timeMatch = text.match(/–≤\s*(\d{1,2}):(\d{2})/i) ||
            text.match(/–≤\s*(\d{1,2})\s*—á–∞—Å(?:–∞|–æ–≤)?(?:\s*(\d{2})\s*–º–∏–Ω—É—Ç)?/i) ||
            text.match(/–Ω–∞\s*(\d{1,2}):(\d{2})/i) ||
            text.match(/–∫\s*(\d{1,2}):(\d{2})/i) ||
            text.match(/(\d{1,2}):(\d{2})/i);
        if (timeMatch) {
            const hours = timeMatch[1];
            const minutes = timeMatch[2] || '00';
            this.logger.log(`Time extracted: ${hours}:${minutes}`);
            const reminderText = text
                .replace(/–Ω–∞–ø–æ–º–Ω–∏\s*(–º–Ω–µ)?/gi, '')
                .replace(/–Ω–∞–ø–æ–º–Ω—é\s*(—Ç–µ–±–µ|–≤–∞–º)?/gi, '')
                .replace(/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/gi, '')
                .replace(/–ø–æ—Å—Ç–∞–≤—å/gi, '')
                .replace(/—É—Å—Ç–∞–Ω–æ–≤–∏/gi, '')
                .replace(/–≤\s*\d{1,2}:?\d{0,2}\s*(?:—á–∞—Å|–º–∏–Ω—É—Ç)?(?:–∞|–æ–≤)?/gi, '')
                .replace(/–Ω–∞\s*\d{1,2}:?\d{0,2}/gi, '')
                .replace(/–∫\s*\d{1,2}:?\d{0,2}/gi, '')
                .replace(/\d{1,2}:\d{2}/g, '')
                .replace(/(—É—Ç—Ä–æ–º|–¥–Ω–µ–º|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é)/gi, '')
                .trim();
            this.logger.log(`Reminder text extracted: "${reminderText}"`);
            if (!reminderText || reminderText.length < 2) {
                await ctx.replyWithMarkdown(`
ü§î *–û —á–µ–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å?*

–í—ã —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º—è ${hours}:${minutes}, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–ª–∏, –æ —á–µ–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å.

*–ü—Ä–∏–º–µ—Ä:* "–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –≤ 17:30"
        `);
                return;
            }
            await this.handleReminderRequest(ctx, reminderText, hours, minutes);
            return;
        }
        const relativeMatch = text.match(/—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)/i);
        if (relativeMatch) {
            const amount = parseInt(relativeMatch[1]);
            const unit = relativeMatch[2].toLowerCase();
            const now = new Date();
            let targetDate = new Date(now);
            if (unit.includes('–º–∏–Ω—É—Ç')) {
                targetDate.setMinutes(targetDate.getMinutes() + amount);
            }
            else if (unit.includes('—á–∞—Å')) {
                targetDate.setHours(targetDate.getHours() + amount);
            }
            else if (unit.includes('–¥–µ–Ω—å') ||
                unit.includes('–¥–Ω—è') ||
                unit.includes('–¥–Ω–µ–π')) {
                targetDate.setDate(targetDate.getDate() + amount);
            }
            else if (unit.includes('–Ω–µ–¥–µ–ª')) {
                targetDate.setDate(targetDate.getDate() + amount * 7);
            }
            else if (unit.includes('–º–µ—Å—è—Ü')) {
                targetDate.setMonth(targetDate.getMonth() + amount);
            }
            else if (unit.includes('–≥–æ–¥') || unit.includes('–ª–µ—Ç')) {
                targetDate.setFullYear(targetDate.getFullYear() + amount);
            }
            const hours = targetDate.getHours().toString().padStart(2, '0');
            const minutes = targetDate.getMinutes().toString().padStart(2, '0');
            const reminderText = text
                .replace(/–Ω–∞–ø–æ–º–Ω–∏\s*(–º–Ω–µ)?/gi, '')
                .replace(/–Ω–∞–ø–æ–º–Ω—é\s*(—Ç–µ–±–µ|–≤–∞–º)?/gi, '')
                .replace(/—á–µ—Ä–µ–∑\s*\d+\s*(?:–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)(?:–∞|–æ–≤)?/gi, '')
                .trim();
            if (amount > 0 &&
                (unit.includes('–¥–µ–Ω—å') ||
                    unit.includes('–Ω–µ–¥–µ–ª') ||
                    unit.includes('–º–µ—Å—è—Ü') ||
                    unit.includes('–≥–æ–¥') ||
                    unit.includes('–ª–µ—Ç'))) {
                await this.handleLongTermReminder(ctx, reminderText, targetDate, amount, unit);
                return;
            }
            await this.handleReminderRequest(ctx, reminderText, hours, minutes);
            return;
        }
        const specificTimeMatch = this.parseSpecificTimeExpressions(text);
        if (specificTimeMatch) {
            const { targetDate, reminderText } = specificTimeMatch;
            targetDate.setHours(9, 0, 0, 0);
            await this.handleLongTermReminder(ctx, reminderText, targetDate, 0, 'specific');
            return;
        }
        const isReminderWithoutTime = this.isReminderWithoutTime(text);
        if (isReminderWithoutTime) {
            const reminderText = text
                .replace(/–Ω–∞–ø–æ–º–Ω–∏\s*(–º–Ω–µ)?/gi, '')
                .replace(/–Ω–∞–ø–æ–º–Ω—é\s*(–º–Ω–µ)?/gi, '')
                .replace(/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/gi, '')
                .replace(/–ø–æ—Å—Ç–∞–≤—å/gi, '')
                .replace(/—É—Å—Ç–∞–Ω–æ–≤–∏/gi, '')
                .replace(/–Ω—É–∂–Ω–æ.*–Ω–∞–ø–æ–º–Ω–∏—Ç—å/gi, '')
                .replace(/–Ω–µ –∑–∞–±—ã—Ç—å/gi, '')
                .trim();
            if (reminderText && reminderText.length > 1) {
                ctx.session.pendingReminder = reminderText;
                ctx.session.waitingForReminderTime = true;
                await ctx.replyWithMarkdown(`
‚è∞ *–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?*

–û —á–µ–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å: "${reminderText}"

*–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è:*
‚Ä¢ –í –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è: "17:30", "–≤ 18:00"  
‚Ä¢ –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è: "—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç", "—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"

_–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ_
        `);
                return;
            }
        }
        await ctx.replyWithMarkdown(`
ü§î *–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
‚Ä¢ "–Ω–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –≤ 17:30"
‚Ä¢ "–Ω–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç"
    `);
    }
    isReminderWithoutTime(text) {
        const reminderPatterns = [
            /–Ω–∞–ø–æ–º–Ω–∏(?:\s+–º–Ω–µ)?\s+.+/i,
            /–Ω–∞–ø–æ–º–Ω—é(?:\s+–º–Ω–µ)?\s+.+/i,
            /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+.+/i,
            /–ø–æ—Å—Ç–∞–≤—å\s+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+.+/i,
            /—É—Å—Ç–∞–Ω–æ–≤–∏\s+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+.+/i,
            /–Ω—É–∂–Ω–æ\s+–Ω–∞–ø–æ–º–Ω–∏—Ç—å\s+.+/i,
            /–Ω–µ\s+–∑–∞–±—ã—Ç—å\s+.+/i,
        ];
        const hasReminderTrigger = reminderPatterns.some((pattern) => pattern.test(text));
        const hasTimeIndicator = /–≤\s*\d{1,2}:?\d{0,2}|–Ω–∞\s*\d{1,2}:?\d{0,2}|–∫\s*\d{1,2}:?\d{0,2}|—á–µ—Ä–µ–∑\s*\d+\s*(?:–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–Ω–∞\s*—Å–ª–µ–¥—É—é—â–µ–π\s*–Ω–µ–¥–µ–ª–µ|–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–º–µ—Å—è—Ü–µ|–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–≥–æ–¥—É|–Ω–∞\s*—ç—Ç–æ–π\s*–Ω–µ–¥–µ–ª–µ|–≤\s*—ç—Ç–æ–º\s*–º–µ—Å—è—Ü–µ/i.test(text);
        return hasReminderTrigger && !hasTimeIndicator;
    }
    isReminderRequest(text) {
        const explicitReminderPatterns = [
            /–Ω–∞–ø–æ–º–Ω–∏.*–≤\s*(\d{1,2}):(\d{2})/i,
            /–Ω–∞–ø–æ–º–Ω–∏.*–≤\s*(\d{1,2})\s*—á–∞—Å/i,
            /–Ω–∞–ø–æ–º–Ω–∏.*—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)/i,
            /–Ω–∞–ø–æ–º–Ω—é.*–≤\s*(\d{1,2}):(\d{2})/i,
            /–Ω–∞–ø–æ–º–Ω—é.*–≤\s*(\d{1,2})\s*—á–∞—Å/i,
            /–Ω–∞–ø–æ–º–Ω—é.*—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)/i,
            /–Ω–∞–ø–æ–º–Ω–∏.*(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–Ω–∞\s*—Å–ª–µ–¥—É—é—â–µ–π\s*–Ω–µ–¥–µ–ª–µ|–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–º–µ—Å—è—Ü–µ|–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–≥–æ–¥—É)/i,
            /–Ω–∞–ø–æ–º–Ω—é.*(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–Ω–∞\s*—Å–ª–µ–¥—É—é—â–µ–π\s*–Ω–µ–¥–µ–ª–µ|–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–º–µ—Å—è—Ü–µ|–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–≥–æ–¥—É)/i,
            /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.*–≤\s*(\d{1,2}):(\d{2})/i,
            /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.*—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)/i,
            /–ø–æ—Å—Ç–∞–≤—å.*–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.*–≤\s*(\d{1,2}):(\d{2})/i,
            /—É—Å—Ç–∞–Ω–æ–≤–∏.*–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.*–≤\s*(\d{1,2}):(\d{2})/i,
            /–ø–æ—Å—Ç–∞–≤—å.*–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.*—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)/i,
            /—É—Å—Ç–∞–Ω–æ–≤–∏.*–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.*—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)/i,
        ];
        const naturalTimePatterns = [
            /(—É—Ç—Ä–æ–º|–¥–Ω–µ–º|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é|—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞).*–≤\s*(\d{1,2}):(\d{2})/i,
            /(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è).*–≤\s*(\d{1,2}):(\d{2})/i,
            /–≤\s*(\d{1,2}):(\d{2}).*(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è)/i,
            /(—É—Ç—Ä–æ–º|–¥–Ω–µ–º|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é|—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞).*–≤\s*(\d{1,2})\s*—á–∞—Å/i,
            /–≤\s*(\d{1,2})\s*—á–∞—Å.*(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è)/i,
            /—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç).*(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è)/i,
            /(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è).*—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)/i,
            /(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞).*(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è)/i,
            /(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è).*(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)/i,
            /–Ω–∞\s*—Å–ª–µ–¥—É—é—â–µ–π\s*–Ω–µ–¥–µ–ª–µ.*(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è)/i,
            /(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è).*–Ω–∞\s*—Å–ª–µ–¥—É—é—â–µ–π\s*–Ω–µ–¥–µ–ª–µ/i,
            /–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–º–µ—Å—è—Ü–µ.*(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è)/i,
            /(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è).*–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–º–µ—Å—è—Ü–µ/i,
            /(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è).*(\d{1,2}):(\d{2})/i,
            /(\d{1,2}):(\d{2}).*(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è)/i,
            /(—É—Ç—Ä–æ–º|–¥–Ω–µ–º|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é).*(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è).*(\d{1,2}):(\d{2})/i,
        ];
        const hasExplicitReminder = explicitReminderPatterns.some((pattern) => pattern.test(text));
        const hasNaturalTime = naturalTimePatterns.some((pattern) => pattern.test(text));
        return hasExplicitReminder || hasNaturalTime;
    }
    isTaskRequest(text) {
        if (this.isReminderRequest(text)) {
            return false;
        }
        const words = text.trim().split(/\s+/);
        if (words.length <= 2) {
            const actionVerbs = [
                '—Å–¥–µ–ª–∞—Ç—å',
                '–≤—ã–ø–æ–ª–Ω–∏—Ç—å',
                '–∫—É–ø–∏—Ç—å',
                '–ø–æ–∑–≤–æ–Ω–∏—Ç—å',
                '–Ω–∞–ø–∏—Å–∞—Ç—å',
                '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å',
                '–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å',
                '–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å',
                '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å',
                '–ø–∏—Ç—å',
                '–¥–µ–ª–∞—Ç—å',
                '—á–∏—Ç–∞—Ç—å',
                '–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å',
                '–ø–æ–π—Ç–∏',
                '–ø–æ–µ—Ö–∞—Ç—å',
                '–∑–∞–±—Ä–∞—Ç—å',
                '–æ—Ç–Ω–µ—Å—Ç–∏',
                '–ø—Ä–∏–Ω–µ—Å—Ç–∏',
                '–≤–µ—Ä–Ω—É—Ç—å',
                '–ø–æ–∫–∞–∑–∞—Ç—å',
                '—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å',
                '–∑–∞–ø–ª–∞—Ç–∏—Ç—å',
                '–æ–ø–ª–∞—Ç–∏—Ç—å',
                '–∑–∞–∫–∞–∑–∞—Ç—å',
                '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è',
                '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
                '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å',
                '–∏–∑—É—á–∏—Ç—å',
                '–ø—Ä–æ—á–∏—Ç–∞—Ç—å',
                '–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å',
                '–ø–æ—á–∏—Å—Ç–∏—Ç—å',
                '—É–±—Ä–∞—Ç—å',
                '–ø–æ–º—ã—Ç—å',
                '–ø–æ—Å—Ç–∏—Ä–∞—Ç—å',
                '–ø–æ–≥–ª–∞–¥–∏—Ç—å',
                '—Å—Ö–æ–¥–∏—Ç—å',
                '—Å—ä–µ–∑–¥–∏—Ç—å',
                '–¥–æ–π—Ç–∏',
                '–¥–æ–±—Ä–∞—Ç—å—Å—è',
                '–¥–æ–µ—Ö–∞—Ç—å',
                '–ø—Ä–∏–µ—Ö–∞—Ç—å',
                '–ø—Ä–∏–π—Ç–∏',
                '–∑–∞–µ—Ö–∞—Ç—å',
                '–∑–∞–π—Ç–∏',
                '–∑–∞–≤–µ—Ä–Ω—É—Ç—å',
                '–∑–∞—Å–∫–æ—á–∏—Ç—å',
                '–Ω–∞–≤–µ—Å—Ç–∏—Ç—å',
                '–ø–æ—Å–µ—Ç–∏—Ç—å',
                '–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è',
                '—É–≤–∏–¥–µ—Ç—å—Å—è',
                '–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å',
                '–æ–±—Å—É–¥–∏—Ç—å',
                '—Ä–µ—à–∏—Ç—å',
                '–∑–∞–∫–æ–Ω—á–∏—Ç—å',
                '–∑–∞–≤–µ—Ä—à–∏—Ç—å',
                '–Ω–∞—á–∞—Ç—å',
                '–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å',
                '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                '–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
                '–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å',
                '–æ—Ç–∫—Ä—ã—Ç—å',
                '–∑–∞–∫—Ä—ã—Ç—å',
                '–≤–∫–ª—é—á–∏—Ç—å',
                '–≤—ã–∫–ª—é—á–∏—Ç—å',
                '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å',
                '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
                '—Å–∫–∞—á–∞—Ç—å',
                '–∑–∞–≥—Ä—É–∑–∏—Ç—å',
                '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è',
                '–≤—ã–π—Ç–∏',
                '—É–π—Ç–∏',
                '–≤–µ—Ä–Ω—É—Ç—å—Å—è',
                '–æ—Ç–¥–æ—Ö–Ω—É—Ç—å',
                '–ø–æ—Å–ø–∞—Ç—å',
                '–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è',
                '–≤—Å—Ç–∞—Ç—å',
                '–ª–µ—á—å',
                '—Å–æ–±—Ä–∞—Ç—å—Å—è',
                '–æ–¥–µ—Ç—å—Å—è',
                '–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è',
            ];
            const hasActionVerb = actionVerbs.some((verb) => text.toLowerCase().includes(verb));
            if (!hasActionVerb) {
                return false;
            }
        }
        const taskPatterns = [
            /^(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è)/i,
            /(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è|–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤–æ –≤—Ç–æ—Ä–Ω–∏–∫|–≤ —Å—Ä–µ–¥—É|–≤ —á–µ—Ç–≤–µ—Ä–≥|–≤ –ø—è—Ç–Ω–∏—Ü—É|–≤ —Å—É–±–±–æ—Ç—É|–≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)\s+(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è)/i,
            /–Ω—É–∂–Ω–æ\s+(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å)/i,
            /–Ω–∞–¥–æ\s+(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å)/i,
            /^–ø–∏—Ç—å\s+/i,
            /^–¥–µ–ª–∞—Ç—å\s+/i,
            /^—á–∏—Ç–∞—Ç—å\s+/i,
            /–∫–∞–∂–¥—ã–π\s+(–¥–µ–Ω—å|—á–∞—Å|–º–∏–Ω—É—Ç)/i,
            /–∫–∞–∂–¥—ã–µ\s+\d+/i,
            /—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)\s*(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è)/i,
            /(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è).*—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)/i,
            /(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)\s*(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è)/i,
            /(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è).*(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)/i,
            /–Ω–∞\s*—Å–ª–µ–¥—É—é—â–µ–π\s*–Ω–µ–¥–µ–ª–µ\s*(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è)/i,
            /(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è).*–Ω–∞\s*—Å–ª–µ–¥—É—é—â–µ–π\s*–Ω–µ–¥–µ–ª–µ/i,
            /–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–º–µ—Å—è—Ü–µ\s*(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è)/i,
            /(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è).*–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–º–µ—Å—è—Ü–µ/i,
        ];
        const reminderOnlyExclusions = [
            /(—É—Ç—Ä–æ–º|–¥–Ω–µ–º|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é).*–≤\s*\d/i,
            /–∑–∞–≤—Ç—Ä–∞\s+–≤\s+\d/i,
            /—Å–µ–≥–æ–¥–Ω—è\s+–≤\s+\d/i,
        ];
        const reminderTriggers = [/–Ω–∞–ø–æ–º–Ω–∏|–Ω–∞–ø–æ–º–Ω—é|–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ|remind/i];
        const hasReminderOnlyExclusions = reminderOnlyExclusions.some((pattern) => pattern.test(text));
        const hasReminderTriggers = reminderTriggers.some((pattern) => pattern.test(text));
        if (hasReminderOnlyExclusions || hasReminderTriggers) {
            return false;
        }
        const isTask = taskPatterns.some((pattern) => pattern.test(text));
        return isTask;
    }
    isGeneralChatMessage(text) {
        const generalPatterns = [
            /^(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–¥–æ–±—Ä—ã–π –¥–µ–Ω—å|–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä|—Ö–∞–π|hello|hi)$/i,
            /^(–ø–æ–∫–∞|–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è|—É–≤–∏–¥–∏–º—Å—è|–≤—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ|bye|goodbye)$/i,
            /^–æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å/i,
            /^—á—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å/i,
            /^–∫–∞–∫ –¥–µ–ª–∞\??$/i,
            /^–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å\??$/i,
            /^—á—Ç–æ –Ω–æ–≤–æ–≥–æ\??$/i,
            /^—Ä–∞—Å—Å–∫–∞–∂–∏ –æ/i,
            /^–æ–±—ä—è—Å–Ω–∏ –º–Ω–µ/i,
            /^–ø–æ–º–æ–≥–∏ –ø–æ–Ω—è—Ç—å/i,
            /^—á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ/i,
            /^—Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ –æ/i,
            /^–∫–∞–∫ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å/i,
            /^–ø–æ—Å–æ–≤–µ—Ç—É–π –º–Ω–µ/i,
            /^—á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å\??$/i,
            /^—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å\??$/i,
            /^–ø–æ–º–æ—â—å$/i,
            /^help$/i,
            /^—Å–ø–∞—Å–∏–±–æ$/i,
            /^–±–ª–∞–≥–æ–¥–∞—Ä—é$/i,
            /^thanks$/i,
        ];
        const excludePatterns = [
            /\/\w+/,
            /–¥–æ–±–∞–≤–∏—Ç—å|—Å–æ–∑–¥–∞—Ç—å|—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å/i,
            /–≤\s*\d{1,2}:\d{2}/,
            /—á–µ—Ä–µ–∑\s+\d+/,
            /–≤\s*\d{1,2}\s*—á–∞—Å/,
            /(—É—Ç—Ä–æ–º|–¥–Ω–µ–º|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é).*–≤\s*\d/,
            /–Ω–∞–ø–æ–º–Ω–∏|–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ|–±—É–¥–∏–ª—å–Ω–∏–∫|—Ç–∞–π–º–µ—Ä/i,
            /–∑–∞–¥–∞—á–∞|–¥–µ–ª–æ|–ø–ª–∞–Ω|—Ü–µ–ª—å/i,
            /–ø—Ä–∏–≤—ã—á–∫–∞|—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞|—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ/i,
            /^\d+/,
            /:\d{2}/,
            /\d+\s*(–º–∏–Ω—É—Ç|—á–∞—Å–æ–≤|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü–µ–≤)/i,
            /–Ω—É–∂–Ω–æ|–Ω–∞–¥–æ|–¥–æ–ª–∂–µ–Ω|–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ/i,
        ];
        const hasExclusions = excludePatterns.some((pattern) => pattern.test(text));
        if (hasExclusions) {
            return false;
        }
        const isGeneral = generalPatterns.some((pattern) => pattern.test(text));
        return isGeneral;
    }
    async processTaskFromText(ctx, text) {
        console.log(`üîç Processing task from text: "${text}"`);
        const relativeMatch = text.match(/—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)/i);
        if (relativeMatch) {
            const amount = parseInt(relativeMatch[1]);
            const unit = relativeMatch[2].toLowerCase();
            const now = new Date();
            let targetDate = new Date(now);
            if (unit.includes('–º–∏–Ω—É—Ç')) {
                targetDate.setMinutes(targetDate.getMinutes() + amount);
            }
            else if (unit.includes('—á–∞—Å')) {
                targetDate.setHours(targetDate.getHours() + amount);
            }
            else if (unit.includes('–¥–µ–Ω—å') ||
                unit.includes('–¥–Ω—è') ||
                unit.includes('–¥–Ω–µ–π')) {
                targetDate.setDate(targetDate.getDate() + amount);
            }
            else if (unit.includes('–Ω–µ–¥–µ–ª')) {
                targetDate.setDate(targetDate.getDate() + amount * 7);
            }
            else if (unit.includes('–º–µ—Å—è—Ü')) {
                targetDate.setMonth(targetDate.getMonth() + amount);
            }
            else if (unit.includes('–≥–æ–¥') || unit.includes('–ª–µ—Ç')) {
                targetDate.setFullYear(targetDate.getFullYear() + amount);
            }
            const taskText = text
                .replace(/—á–µ—Ä–µ–∑\s*\d+\s*(?:–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)(?:–∞|–æ–≤)?/gi, '')
                .trim();
            if (amount > 0 &&
                (unit.includes('–¥–µ–Ω—å') ||
                    unit.includes('–Ω–µ–¥–µ–ª') ||
                    unit.includes('–º–µ—Å—è—Ü') ||
                    unit.includes('–≥–æ–¥') ||
                    unit.includes('–ª–µ—Ç'))) {
                await this.handleLongTermTask(ctx, taskText, targetDate, amount, unit);
                return;
            }
            await this.createTaskWithDeadline(ctx, taskText, targetDate);
            return;
        }
        const specificTimeMatch = this.parseSpecificTimeExpressionsForTasks(text);
        if (specificTimeMatch) {
            const { targetDate, taskText } = specificTimeMatch;
            targetDate.setHours(9, 0, 0, 0);
            await this.handleLongTermTask(ctx, taskText, targetDate, 0, 'specific');
            return;
        }
        const concreteTimeMatch = text.match(/–≤\s*(\d{1,2}):(\d{2})/i);
        if (concreteTimeMatch) {
            const hours = parseInt(concreteTimeMatch[1]);
            const minutes = parseInt(concreteTimeMatch[2]);
            if (hours >= 0 && hours <= 23 && minutes >= 0 && minutes <= 59) {
                const targetDate = new Date();
                targetDate.setHours(hours, minutes, 0, 0);
                if (targetDate.getTime() <= new Date().getTime()) {
                    targetDate.setDate(targetDate.getDate() + 1);
                }
                const taskText = text.replace(/–≤\s*\d{1,2}:\d{2}/gi, '').trim();
                await this.createTaskWithDeadline(ctx, taskText, targetDate);
                return;
            }
        }
        await this.createTaskFromText(ctx, text);
    }
    async createTaskFromText(ctx, text) {
        try {
            const user = await this.userService.findByTelegramId(ctx.userId);
            if (!user.timezone) {
                ctx.session.step = 'waiting_for_task_title';
                ctx.session.tempData = { taskTitle: text };
                await this.askForTimezone(ctx);
                return;
            }
            const intervalInfo = this.extractTimeIntervalFromText(text.trim());
            if (intervalInfo) {
                const habit = await this.habitService.createHabit({
                    userId: ctx.userId,
                    title: text.trim(),
                    description: `–ü—Ä–∏–≤—ã—á–∫–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º: ${intervalInfo.interval}`,
                    frequency: 'DAILY',
                    reminderTime: intervalInfo.interval,
                });
                let responseMessage = `‚úÖ *–ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!*\n\nüìù **"${habit.title}"**\n\nÔøΩ **–û–ø–∏—Å–∞–Ω–∏–µ:** ${intervalInfo.interval}\n\nüí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –º–µ–Ω—é –ø—Ä–∏–≤—ã—á–µ–∫.`;
                await ctx.replyWithMarkdown(responseMessage, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: '‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
                                    callback_data: `habit_set_reminder_${habit.id}`,
                                },
                            ],
                            [{ text: 'üéØ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'habits_list' }],
                            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                        ],
                    },
                });
            }
            else {
                const task = await this.taskService.createTask({
                    userId: ctx.userId,
                    title: text.trim(),
                });
                let responseMessage = `‚úÖ *–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!*\n\nüìù **"${task.title}"**\n\n–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –µ—ë –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏".`;
                responseMessage += `\n\nüí° *–ü–æ–¥—Å–∫–∞–∑–∫–∏:*
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "–Ω–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –≤ 17:30"
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ: "–Ω–∞–ø–æ–º–∏–Ω–∞–π –ø–∏—Ç—å –≤–æ–¥—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"`;
                await ctx.replyWithMarkdown(responseMessage, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'tasks_list' }],
                            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                        ],
                    },
                });
            }
        }
        catch (error) {
            this.logger.error(`Error creating task from text: ${error}`);
            await ctx.replyWithMarkdown('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
    async showTasksAIAdvice(ctx) {
        try {
            await ctx.editMessageTextWithMarkdown('ü§î *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –∑–∞–¥–∞—á–∏...*');
            const aiAdvice = await this.aiContextService.generatePersonalizedMessage(ctx.userId, 'task_suggestion', '');
            await ctx.editMessageTextWithMarkdown(`
ü§ñ *AI-—Å–æ–≤–µ—Ç –ø–æ –∑–∞–¥–∞—á–∞–º:*

${aiAdvice}

üí° *–•–æ—Ç–∏—Ç–µ –µ—â—ë —Å–æ–≤–µ—Ç—ã?* –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ —á–∞—Ç!
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'tasks_add' }],
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º', callback_data: 'back_to_tasks' }],
                    ],
                },
            });
        }
        catch (error) {
            this.logger.error('Error getting AI advice for tasks:', error);
            await ctx.editMessageTextWithMarkdown(`
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI-—Å–æ–≤–µ—Ç*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç!
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º', callback_data: 'back_to_tasks' }],
                    ],
                },
            });
        }
    }
    async showHabitsAIAdvice(ctx) {
        try {
            await ctx.editMessageTextWithMarkdown('ü§î *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏...*');
            const aiAdvice = await this.aiContextService.generatePersonalizedMessage(ctx.userId, 'habit_advice', '');
            await ctx.editMessageTextWithMarkdown(`
ü§ñ *AI-—Å–æ–≤–µ—Ç –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º:*

${aiAdvice}

üí° *–•–æ—Ç–∏—Ç–µ –µ—â—ë —Å–æ–≤–µ—Ç—ã?* –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ —á–∞—Ç!
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º', callback_data: 'menu_habits' }],
                    ],
                },
            });
        }
        catch (error) {
            this.logger.error('Error getting AI advice for habits:', error);
            await ctx.editMessageTextWithMarkdown(`
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI-—Å–æ–≤–µ—Ç*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç!
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º', callback_data: 'menu_habits' }],
                    ],
                },
            });
        }
    }
    async showHabitsMenu(ctx) {
        const user = await this.userService.findByTelegramId(ctx.userId);
        if (!user.timezone) {
            ctx.session.step = 'adding_habit';
            await this.askForTimezone(ctx);
        }
        else {
            try {
                const habits = await this.habitService.findHabitsByUserId(ctx.userId);
                let message = `üîÑ *–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏*\n\n`;
                if (habits.length === 0) {
                    message += `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.\n\nüí° –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!`;
                    const keyboard = {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É', callback_data: 'habits_add' }],
                                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                            ],
                        },
                    };
                    if (ctx.callbackQuery) {
                        await ctx.editMessageTextWithMarkdown(message, keyboard);
                    }
                    else {
                        await ctx.replyWithMarkdown(message, keyboard);
                    }
                }
                else {
                    message += `üìä **–í—Å–µ–≥–æ –ø—Ä–∏–≤—ã—á–µ–∫:** ${habits.length}\n\n`;
                    message += `*–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:*`;
                    const keyboard = {
                        inline_keyboard: [
                            ...habits.slice(0, 8).map((habit) => [
                                {
                                    text: `‚úÖ ${habit.title.substring(0, 30)}${habit.title.length > 30 ? '...' : ''}`,
                                    callback_data: `habit_complete_${habit.id}`,
                                },
                            ]),
                            ...(habits.length > 8
                                ? [
                                    [
                                        {
                                            text: `... –∏ –µ—â–µ ${habits.length - 8} –ø—Ä–∏–≤—ã—á–µ–∫`,
                                            callback_data: 'habits_list_more',
                                        },
                                    ],
                                ]
                                : []),
                            [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É', callback_data: 'habits_add' }],
                            [
                                {
                                    text: 'üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏',
                                    callback_data: 'habits_manage',
                                },
                            ],
                            [
                                {
                                    text: 'ü§ñ AI-—Å–æ–≤–µ—Ç –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º',
                                    callback_data: 'habits_ai_advice',
                                },
                            ],
                            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                        ],
                    };
                    if (ctx.callbackQuery) {
                        await ctx.editMessageTextWithMarkdown(message, {
                            reply_markup: keyboard,
                        });
                    }
                    else {
                        await ctx.replyWithMarkdown(message, {
                            reply_markup: keyboard,
                        });
                    }
                }
            }
            catch (error) {
                this.logger.error(`Error fetching habits: ${error}`);
                const errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–≤—ã—á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
                const errorKeyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                        ],
                    },
                };
                if (ctx.callbackQuery) {
                    await ctx.editMessageTextWithMarkdown(errorMessage, errorKeyboard);
                }
                else {
                    await ctx.replyWithMarkdown(errorMessage, errorKeyboard);
                }
            }
        }
    }
    async showMoodMenu(ctx) {
        const message = `
üòä *–î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è*

–û—Ç–º–µ—Ç—å—Ç–µ —Å–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:
      `;
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üòÑ –û—Ç–ª–∏—á–Ω–æ', callback_data: 'mood_excellent' },
                        { text: 'üòä –•–æ—Ä–æ—à–æ', callback_data: 'mood_good' },
                    ],
                    [
                        { text: 'üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ', callback_data: 'mood_neutral' },
                        { text: 'üòî –ì—Ä—É—Å—Ç–Ω–æ', callback_data: 'mood_sad' },
                    ],
                    [
                        { text: 'üò§ –ó–ª–æ–π', callback_data: 'mood_angry' },
                        { text: 'üò∞ –¢—Ä–µ–≤–æ–∂–Ω–æ', callback_data: 'mood_anxious' },
                    ],
                    [
                        {
                            text: 'ü§ñ AI-–∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
                            callback_data: 'mood_ai_analysis',
                        },
                    ],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                ],
            },
        };
        if (ctx.callbackQuery) {
            await ctx.editMessageTextWithMarkdown(message, keyboard);
        }
        else {
            await ctx.replyWithMarkdown(message, keyboard);
        }
    }
    async showMoodAIAnalysis(ctx) {
        try {
            await ctx.editMessageTextWithMarkdown('ü§î *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ...*');
            const aiAnalysis = await this.aiContextService.generatePersonalizedMessage(ctx.userId, 'mood_analysis', '');
            await ctx.editMessageTextWithMarkdown(`
ü§ñ *AI-–∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:*

${aiAnalysis}

üí° *–•–æ—Ç–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã?* –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ —á–∞—Ç!
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üòä –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', callback_data: 'menu_mood' }],
                        [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        }
        catch (error) {
            this.logger.error('Error getting AI mood analysis:', error);
            await ctx.editMessageTextWithMarkdown(`
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI-–∞–Ω–∞–ª–∏–∑*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç!
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é', callback_data: 'menu_mood' }],
                    ],
                },
            });
        }
    }
    async showFocusSession(ctx) {
        const message = `
üçÖ *–¢–µ—Ö–Ω–∏–∫–∞ –ü–æ–º–æ–¥–æ—Ä–æ*

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
‚è∞ 25 –º–∏–Ω—É—Ç —Ñ–æ–∫—É—Å–∞ –Ω–∞ –∑–∞–¥–∞—á–µ
‚òï 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö
üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å 4 —Ä–∞–∑–∞
üèñÔ∏è –ë–æ–ª—å—à–æ–π –ø–µ—Ä–µ—Ä—ã–≤ 15-30 –º–∏–Ω—É—Ç

**–í–∞—à–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:**
üéØ –°–µ—Å—Å–∏–π —Å–µ–≥–æ–¥–Ω—è: 0
‚ö° –û–±—â–µ–µ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: 0 –º–∏–Ω
üìà –õ—É—á—à–∏–π –¥–µ–Ω—å: 0 —Å–µ—Å—Å–∏–π

*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*
      `;
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üöÄ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é',
                            callback_data: 'start_pomodoro_session',
                        },
                    ],
                    [
                        {
                            text: 'üìä –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–π',
                            callback_data: 'pomodoro_history',
                        },
                        {
                            text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                            callback_data: 'pomodoro_settings',
                        },
                    ],
                    [
                        {
                            text: 'ü§ñ AI-—Å–æ–≤–µ—Ç—ã –ø–æ —Ñ–æ–∫—É—Å—É',
                            callback_data: 'focus_ai_tips',
                        },
                    ],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                ],
            },
        };
        if (ctx.callbackQuery) {
            await ctx.editMessageTextWithMarkdown(message, keyboard);
        }
        else {
            await ctx.replyWithMarkdown(message, keyboard);
        }
    }
    async showRemindersMenu(ctx) {
        try {
            const reminders = await this.prisma.reminder.findMany({
                where: {
                    userId: ctx.userId,
                    status: client_1.ReminderStatus.ACTIVE,
                    scheduledTime: {
                        gte: new Date(),
                    },
                },
                orderBy: {
                    scheduledTime: 'asc',
                },
                take: 10,
            });
            let message = `üîî *–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n`;
            if (reminders.length === 0) {
                message += `–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\nüí° –°–æ–∑–¥–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –Ω–∞–ø–∏—Å–∞–≤:\n"–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –≤ 17:30"`;
                const keyboard = {
                    inline_keyboard: [
                        [
                            {
                                text: '‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
                                callback_data: 'create_reminder_help',
                            },
                            { text: 'üé§ –ì–æ–ª–æ—Å–æ–º', callback_data: 'voice_reminder_help' },
                        ],
                        [{ text: 'üìù –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data: 'all_reminders' }],
                        [
                            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' },
                            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' },
                        ],
                    ],
                };
                if (ctx.callbackQuery) {
                    await ctx.editMessageTextWithMarkdown(message, {
                        reply_markup: keyboard,
                    });
                }
                else {
                    await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
                }
                return;
            }
            message += `üìä **–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:** ${reminders.length}\n\n`;
            message += `*–ë–ª–∏–∂–∞–π—à–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n\n`;
            for (let i = 0; i < Math.min(5, reminders.length); i++) {
                const reminder = reminders[i];
                const date = new Date(reminder.scheduledTime);
                const dateStr = date.toLocaleDateString('ru-RU', {
                    day: 'numeric',
                    month: 'short',
                });
                const timeStr = date.toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit',
                });
                message += `${i + 1}. üìù ${reminder.title}\n`;
                message += `    ‚è∞ ${dateStr} –≤ ${timeStr}\n\n`;
            }
            if (reminders.length > 5) {
                message += `... –∏ –µ—â–µ ${reminders.length - 5} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π`;
            }
            const keyboard = {
                inline_keyboard: [
                    [
                        {
                            text: '‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
                            callback_data: 'create_reminder_help',
                        },
                        { text: 'üé§ –ì–æ–ª–æ—Å–æ–º', callback_data: 'voice_reminder_help' },
                    ],
                    [{ text: 'üìù –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data: 'all_reminders' }],
                    [
                        { text: '‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data: 'manage_reminders' },
                        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'reminders_stats' },
                    ],
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                ],
            };
            if (ctx.callbackQuery) {
                await ctx.editMessageTextWithMarkdown(message, {
                    reply_markup: keyboard,
                });
            }
            else {
                await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
            }
        }
        catch (error) {
            this.logger.error(`Error fetching reminders: ${error}`);
            const errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
            const errorKeyboard = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' },
                            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' },
                        ],
                        [],
                    ],
                },
            };
            if (ctx.callbackQuery) {
                await ctx.editMessageTextWithMarkdown(errorMessage, errorKeyboard);
            }
            else {
                await ctx.replyWithMarkdown(errorMessage, errorKeyboard);
            }
        }
    }
    async showAllReminders(ctx) {
        try {
            const activeReminders = await this.prisma.reminder.findMany({
                where: {
                    userId: ctx.userId,
                    status: client_1.ReminderStatus.ACTIVE,
                },
                orderBy: {
                    scheduledTime: 'asc',
                },
            });
            const completedReminders = await this.prisma.reminder.findMany({
                where: {
                    userId: ctx.userId,
                    status: { in: [client_1.ReminderStatus.COMPLETED, client_1.ReminderStatus.DISMISSED] },
                },
                orderBy: {
                    scheduledTime: 'desc',
                },
                take: 5,
            });
            let message = `üîî *–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n`;
            if (activeReminders.length > 0) {
                message += `üü¢ **–ê–∫—Ç–∏–≤–Ω—ã–µ (${activeReminders.length}):**\n\n`;
                activeReminders.forEach((reminder, index) => {
                    const date = new Date(reminder.scheduledTime);
                    const isToday = date.toDateString() === new Date().toDateString();
                    const isTomorrow = date.toDateString() ===
                        new Date(Date.now() + 24 * 60 * 60 * 1000).toDateString();
                    let dateStr;
                    if (isToday) {
                        dateStr = '—Å–µ–≥–æ–¥–Ω—è';
                    }
                    else if (isTomorrow) {
                        dateStr = '–∑–∞–≤—Ç—Ä–∞';
                    }
                    else {
                        dateStr = date.toLocaleDateString('ru-RU', {
                            day: 'numeric',
                            month: 'short',
                        });
                    }
                    const timeStr = date.toLocaleTimeString('ru-RU', {
                        hour: '2-digit',
                        minute: '2-digit',
                    });
                    message += `${index + 1}. üìù ${reminder.title}\n`;
                    message += `    ‚è∞ ${dateStr} –≤ ${timeStr}\n\n`;
                });
            }
            else {
                message += `üü¢ **–ê–∫—Ç–∏–≤–Ω—ã–µ:** –Ω–µ—Ç\n\n`;
            }
            if (completedReminders.length > 0) {
                message += `‚úÖ **–ù–µ–¥–∞–≤–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ ${completedReminders.length}):**\n\n`;
                completedReminders.forEach((reminder, index) => {
                    const date = new Date(reminder.scheduledTime);
                    const dateStr = date.toLocaleDateString('ru-RU', {
                        day: 'numeric',
                        month: 'short',
                    });
                    const timeStr = date.toLocaleTimeString('ru-RU', {
                        hour: '2-digit',
                        minute: '2-digit',
                    });
                    const statusIcon = reminder.status === client_1.ReminderStatus.COMPLETED ? '‚úÖ' : '‚ùå';
                    message += `${index + 1}. ${statusIcon} ${reminder.title}\n`;
                    message += `    üìÖ ${dateStr} –≤ ${timeStr}\n\n`;
                });
            }
            else {
                message += `‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ:** –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏`;
            }
            const keyboard = {
                inline_keyboard: [
                    [
                        { text: 'üîî –ê–∫—Ç–∏–≤–Ω—ã–µ', callback_data: 'reminders' },
                        { text: '‚ûï –°–æ–∑–¥–∞—Ç—å', callback_data: 'create_reminder_help' },
                    ],
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'reminders' }],
                ],
            };
            await ctx.editMessageTextWithMarkdown(message, {
                reply_markup: keyboard,
            });
        }
        catch (error) {
            this.logger.error(`Error fetching all reminders: ${error}`);
            await ctx.editMessageTextWithMarkdown('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'reminders' }],
                    ],
                },
            });
        }
    }
    async showCreateReminderHelp(ctx) {
        const message = `
‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*

**–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:**

üìù **–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:**
‚Ä¢ "–Ω–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –≤ 17:30"
‚Ä¢ "–Ω–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"
‚Ä¢ "–Ω–∞–ø–æ–º–Ω–∏ –≤—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00"
‚Ä¢ "–Ω–∞–ø–æ–º–Ω–∏ –ø—Ä–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –≤ 20:00"

‚è∞ **–§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:**
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è: "–≤ 15:30", "–Ω–∞ 18:00"
‚Ä¢ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: "—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç", "—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"

üí° **–°–æ–≤–µ—Ç:** –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç —á—Ç–æ –∏ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å!
    `;
        const keyboard = {
            inline_keyboard: [
                [{ text: 'üîî –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data: 'reminders' }],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'reminders' }],
            ],
        };
        await ctx.editMessageTextWithMarkdown(message, { reply_markup: keyboard });
    }
    async showVoiceReminderHelp(ctx) {
        const message = `
üé§ *–ì–æ–ª–æ—Å–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*

**–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–º:**

1Ô∏è‚É£ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**
   –ó–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∏ –∫–æ–≥–¥–∞

2Ô∏è‚É£ **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–∏:**
   üéôÔ∏è "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –∑–∞–≤—Ç—Ä–∞ –≤ 17:30"
   üéôÔ∏è "–ù–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"
   üéôÔ∏è "–ù–∞–ø–æ–º–Ω–∏ –ø—Ä–æ –≤—Å—Ç—Ä–µ—á—É –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 14:00"

‚è∞ **–§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–æ–ª–æ—Å–µ:**
‚Ä¢ "–≤ 17:30", "–≤ —Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å —Ç—Ä–∏–¥—Ü–∞—Ç—å"
‚Ä¢ "—á–µ—Ä–µ–∑ —á–∞—Å", "—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç"
‚Ä¢ "–∑–∞–≤—Ç—Ä–∞ –≤ 15:00", "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –≤ –æ–±–µ–¥"

üîä **–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç!**

üí° **–°–æ–≤–µ—Ç:** –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
    `;
        const keyboard = {
            inline_keyboard: [
                [{ text: 'üìù –¢–µ–∫—Å—Ç–æ–º', callback_data: 'create_reminder_help' }],
                [{ text: 'üîî –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data: 'reminders' }],
                [
                    { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'reminders' },
                    { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' },
                ],
            ],
        };
        await ctx.editMessageTextWithMarkdown(message, { reply_markup: keyboard });
    }
    async showManageReminders(ctx) {
        try {
            const reminders = await this.prisma.reminder.findMany({
                where: {
                    userId: ctx.userId,
                    status: client_1.ReminderStatus.ACTIVE,
                },
                orderBy: {
                    scheduledTime: 'asc',
                },
            });
            let message = `‚úèÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏*\n\n`;
            if (reminders.length === 0) {
                message += `–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n`;
                message += `üí° –°–æ–∑–¥–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º.`;
                const keyboard = {
                    inline_keyboard: [
                        [
                            {
                                text: '‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
                                callback_data: 'create_reminder_help',
                            },
                        ],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'reminders' }],
                    ],
                };
                await ctx.editMessageTextWithMarkdown(message, {
                    reply_markup: keyboard,
                });
                return;
            }
            message += `üìä **–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:** ${reminders.length}\n\n`;
            message += `*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*\n\n`;
            const keyboard = {
                inline_keyboard: [
                    ...reminders.slice(0, 8).map((reminder) => {
                        const date = new Date(reminder.scheduledTime);
                        const timeStr = date.toLocaleTimeString('ru-RU', {
                            hour: '2-digit',
                            minute: '2-digit',
                        });
                        const title = reminder.title.length > 25
                            ? reminder.title.substring(0, 25) + '...'
                            : reminder.title;
                        return [
                            {
                                text: `üóëÔ∏è ${title} (${timeStr})`,
                                callback_data: `delete_reminder_${reminder.id}`,
                            },
                        ];
                    }),
                    [
                        { text: 'üîî –ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º', callback_data: 'reminders' },
                        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'reminders' },
                    ],
                ],
            };
            if (reminders.length > 8) {
                message += `\n... –∏ –µ—â–µ ${reminders.length - 8} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n`;
                message += `_–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 8 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π_`;
            }
            await ctx.editMessageTextWithMarkdown(message, {
                reply_markup: keyboard,
            });
        }
        catch (error) {
            this.logger.error(`Error showing manage reminders: ${error}`);
            await ctx.editMessageTextWithMarkdown('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'reminders' }],
                    ],
                },
            });
        }
    }
    async showRemindersStats(ctx) {
        try {
            const totalActive = await this.prisma.reminder.count({
                where: {
                    userId: ctx.userId,
                    status: client_1.ReminderStatus.ACTIVE,
                },
            });
            const totalCompleted = await this.prisma.reminder.count({
                where: {
                    userId: ctx.userId,
                    status: client_1.ReminderStatus.COMPLETED,
                },
            });
            const totalDismissed = await this.prisma.reminder.count({
                where: {
                    userId: ctx.userId,
                    status: client_1.ReminderStatus.DISMISSED,
                },
            });
            const todayCompleted = await this.prisma.reminder.count({
                where: {
                    userId: ctx.userId,
                    status: client_1.ReminderStatus.COMPLETED,
                    scheduledTime: {
                        gte: new Date(new Date().setHours(0, 0, 0, 0)),
                        lte: new Date(new Date().setHours(23, 59, 59, 999)),
                    },
                },
            });
            const nextReminder = await this.prisma.reminder.findFirst({
                where: {
                    userId: ctx.userId,
                    status: client_1.ReminderStatus.ACTIVE,
                    scheduledTime: {
                        gte: new Date(),
                    },
                },
                orderBy: {
                    scheduledTime: 'asc',
                },
            });
            let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*\n\n`;
            message += `**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
            message += `üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${totalActive}\n`;
            message += `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${totalCompleted}\n`;
            message += `‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${totalDismissed}\n`;
            message += `üìà –í—Å–µ–≥–æ: ${totalActive + totalCompleted + totalDismissed}\n\n`;
            message += `**–°–µ–≥–æ–¥–Ω—è:**\n`;
            message += `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${todayCompleted}\n\n`;
            if (nextReminder) {
                const nextDate = new Date(nextReminder.scheduledTime);
                const isToday = nextDate.toDateString() === new Date().toDateString();
                const isTomorrow = nextDate.toDateString() ===
                    new Date(Date.now() + 24 * 60 * 60 * 1000).toDateString();
                let dateStr;
                if (isToday) {
                    dateStr = '—Å–µ–≥–æ–¥–Ω—è';
                }
                else if (isTomorrow) {
                    dateStr = '–∑–∞–≤—Ç—Ä–∞';
                }
                else {
                    dateStr = nextDate.toLocaleDateString('ru-RU', {
                        day: 'numeric',
                        month: 'short',
                    });
                }
                const timeStr = nextDate.toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit',
                });
                message += `**–ë–ª–∏–∂–∞–π—à–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:**\n`;
                message += `üìù ${nextReminder.title}\n`;
                message += `‚è∞ ${dateStr} –≤ ${timeStr}`;
            }
            else {
                message += `**–ë–ª–∏–∂–∞–π—à–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:**\n`;
                message += `–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π`;
            }
            const keyboard = {
                inline_keyboard: [
                    [
                        { text: 'üîî –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data: 'reminders' },
                        { text: '‚ûï –°–æ–∑–¥–∞—Ç—å', callback_data: 'create_reminder_help' },
                    ],
                    [
                        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'reminders' },
                        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' },
                    ],
                ],
            };
            await ctx.editMessageTextWithMarkdown(message, {
                reply_markup: keyboard,
            });
        }
        catch (error) {
            this.logger.error(`Error showing reminders stats: ${error}`);
            await ctx.editMessageTextWithMarkdown('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'reminders' }],
                    ],
                },
            });
        }
    }
    async handleDeleteReminder(ctx, reminderId) {
        try {
            const reminder = await this.prisma.reminder.findFirst({
                where: {
                    id: reminderId,
                    userId: ctx.userId,
                },
            });
            if (!reminder) {
                await ctx.editMessageTextWithMarkdown('‚ùå *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*\n\n–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üîî –ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º', callback_data: 'reminders' }],
                        ],
                    },
                });
                return;
            }
            await this.prisma.reminder.delete({
                where: {
                    id: reminderId,
                },
            });
            await ctx.editMessageTextWithMarkdown(`‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ*\n\nüìù "${reminder.title}" –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data: 'manage_reminders' },
                            { text: 'üîî –ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º', callback_data: 'reminders' },
                        ],
                    ],
                },
            });
        }
        catch (error) {
            this.logger.error(`Error deleting reminder: ${error}`);
            await ctx.editMessageTextWithMarkdown('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'manage_reminders' }],
                    ],
                },
            });
        }
    }
    async showFocusAITips(ctx) {
        try {
            await ctx.editMessageTextWithMarkdown('ü§î *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ–æ–∫—É—Å–∞...*');
            const aiTips = await this.aiContextService.generatePersonalizedMessage(ctx.userId, 'focus_tips', '');
            await ctx.editMessageTextWithMarkdown(`
ü§ñ *AI-—Å–æ–≤–µ—Ç—ã –ø–æ —Ñ–æ–∫—É—Å—É:*

${aiTips}

üí° *–•–æ—Ç–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å?* –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ —á–∞—Ç!
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üöÄ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é',
                                callback_data: 'start_pomodoro_session',
                            },
                        ],
                        [{ text: 'üîô –ö —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—è–º', callback_data: 'menu_focus' }],
                    ],
                },
            });
        }
        catch (error) {
            this.logger.error('Error getting AI focus tips:', error);
            await ctx.editMessageTextWithMarkdown(`
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI-—Å–æ–≤–µ—Ç—ã*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç!
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîô –ö —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—è–º', callback_data: 'menu_focus' }],
                    ],
                },
            });
        }
    }
    async createPayment(ctx, subscriptionType) {
        try {
            const plans = this.paymentService.getSubscriptionPlans();
            const plan = plans[subscriptionType];
            await ctx.editMessageTextWithMarkdown('üí≥ *–°–æ–∑–¥–∞—é –ø–ª–∞—Ç–µ–∂...*');
            const paymentResult = await this.paymentService.createPayment({
                userId: ctx.userId,
                amount: plan.amount,
                description: plan.description,
                subscriptionType: subscriptionType,
                returnUrl: 'https://t.me/daily_check_bot',
            });
            await ctx.editMessageTextWithMarkdown(`
üíé *–û–ø–ª–∞—Ç–∞ ${subscriptionType === 'PREMIUM' ? 'Premium' : 'Premium Plus'}*

üí∞ **–°—É–º–º–∞:** ${plan.amount}‚ÇΩ
üìÖ **–ü–µ—Ä–∏–æ–¥:** ${plan.period}

**–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:**
${plan.features.map((feature) => `‚Ä¢ ${feature}`).join('\n')}

üîó –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å',
                                url: paymentResult.confirmationUrl,
                            },
                        ],
                        [
                            {
                                text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',
                                callback_data: `check_payment_${paymentResult.paymentId}`,
                            },
                        ],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'upgrade_premium' }],
                    ],
                },
            });
        }
        catch (error) {
            this.logger.error('Error creating payment:', error);
            await ctx.editMessageTextWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'upgrade_premium' }],
                    ],
                },
            });
        }
    }
    async getOrCreateUser(ctx) {
        try {
            return await this.userService.findByTelegramId(ctx.userId);
        }
        catch (error) {
            const userData = {
                id: ctx.from?.id.toString() || ctx.userId,
                username: ctx.from?.username || undefined,
                firstName: ctx.from?.first_name || undefined,
                lastName: ctx.from?.last_name || undefined,
            };
            return await this.userService.findOrCreateUser(userData);
        }
    }
    async handleXPPurchase(ctx, itemType, cost, itemName, itemId) {
        await ctx.answerCbQuery();
        try {
            const user = await this.userService.findByTelegramId(ctx.userId);
            if (user.totalXp < cost) {
                await ctx.editMessageTextWithMarkdown(`‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ XP*

–î–ª—è –ø–æ–∫—É–ø–∫–∏ "${itemName}" –Ω—É–∂–Ω–æ ${cost} XP.
–£ –≤–∞—Å: ${user.totalXp} XP
–ù—É–∂–Ω–æ –µ—â–µ: ${cost - user.totalXp} XP

üí™ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ XP!`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω', callback_data: 'xp_shop' }],
                        ],
                    },
                });
                return;
            }
            const alreadyOwned = this.checkIfUserOwnsItem(user, itemType, itemId);
            if (alreadyOwned) {
                await ctx.editMessageTextWithMarkdown(`‚úÖ *–£–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ*

–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å "${itemName}".

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω', callback_data: 'xp_shop' }],
                        ],
                    },
                });
                return;
            }
            await this.processXPPurchase(user, itemType, itemId);
            await this.userService.updateUserStats(ctx.userId, {
                xpGained: -cost,
            });
            await ctx.editMessageTextWithMarkdown(`üéâ *–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!*

–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏: "${itemName}"
–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${cost} XP
–û—Å—Ç–∞—Ç–æ–∫ XP: ${user.totalXp - cost}

${this.getItemActivationMessage(itemType)}`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üõçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', callback_data: 'xp_shop' },
                            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' },
                        ],
                    ],
                },
            });
        }
        catch (error) {
            this.logger.error(`Error processing XP purchase: ${error}`);
            await ctx.editMessageTextWithMarkdown('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω', callback_data: 'xp_shop' }],
                    ],
                },
            });
        }
    }
    checkIfUserOwnsItem(user, itemType, itemId) {
        switch (itemType) {
            case 'theme':
                return user.unlockedThemes.includes(itemId);
            case 'badge':
            case 'emoji':
            case 'sticker':
                return user.stickers.includes(itemId);
            case 'feature':
                return user.stickers.includes(`feature_${itemId}`);
            default:
                return false;
        }
    }
    async processXPPurchase(user, itemType, itemId) {
        const updateData = {};
        switch (itemType) {
            case 'theme':
                updateData.unlockedThemes = [...user.unlockedThemes, itemId];
                break;
            case 'badge':
            case 'emoji':
            case 'sticker':
                updateData.stickers = [...user.stickers, itemId];
                break;
            case 'feature':
                updateData.stickers = [...user.stickers, `feature_${itemId}`];
                break;
        }
        await this.userService.updateUser(user.id, updateData);
    }
    getItemActivationMessage(itemType) {
        switch (itemType) {
            case 'theme':
                return 'üé® –¢–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.';
            case 'badge':
                return 'üèÜ –ó–Ω–∞—á–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!';
            case 'emoji':
                return '‚ö° –≠–º–æ–¥–∑–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —á–∞—Ç–µ!';
            case 'sticker':
                return 'üåü –°—Ç–∏–∫–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é!';
            case 'feature':
                return 'üöÄ –§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!';
            default:
                return '‚ú® –ü–æ–∫—É–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!';
        }
    }
    async completeHabit(ctx, habitId) {
        try {
            await ctx.editMessageTextWithMarkdown(`
‚úÖ *–ü—Ä–∏–≤—ã—á–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*

üéØ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –Ω–∞ –ø—É—Ç–∏ –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ–ª–µ–∑–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏.

üí° *–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!*
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîÑ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'habits_list' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        }
        catch (error) {
            this.logger.error('Error completing habit:', error);
            await ctx.editMessageTextWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏');
        }
    }
    async showAllHabitsList(ctx) {
        try {
            const habits = await this.habitService.findHabitsByUserId(ctx.userId);
            if (habits.length === 0) {
                await ctx.editMessageTextWithMarkdown(`
üîÑ *–í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏*

–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é! üéØ
        `);
                return;
            }
            let message = `üîÑ *–í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ (${habits.length}):*\n\n`;
            message += `*–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:*`;
            const keyboard = {
                inline_keyboard: [
                    ...habits.map((habit) => [
                        {
                            text: `‚úÖ ${habit.title.substring(0, 35)}${habit.title.length > 35 ? '...' : ''}`,
                            callback_data: `habit_complete_${habit.id}`,
                        },
                    ]),
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º', callback_data: 'habits_list' }],
                ],
            };
            await ctx.editMessageTextWithMarkdown(message, {
                reply_markup: keyboard,
            });
        }
        catch (error) {
            this.logger.error('Error showing all habits list:', error);
            await ctx.editMessageTextWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫');
        }
    }
    async showHabitsManagement(ctx) {
        try {
            const habits = await this.habitService.findHabitsByUserId(ctx.userId);
            if (habits.length === 0) {
                await ctx.editMessageTextWithMarkdown(`
üõ†Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏*

–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        `, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º',
                                    callback_data: 'habits_list',
                                },
                            ],
                        ],
                    },
                });
                return;
            }
            let message = `üõ†Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏*\n\n`;
            message += `–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:`;
            const keyboard = {
                inline_keyboard: [
                    ...habits.map((habit) => [
                        {
                            text: `üóëÔ∏è ${habit.title.substring(0, 35)}${habit.title.length > 35 ? '...' : ''}`,
                            callback_data: `habit_delete_${habit.id}`,
                        },
                    ]),
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º', callback_data: 'habits_list' }],
                ],
            };
            await ctx.editMessageTextWithMarkdown(message, {
                reply_markup: keyboard,
            });
        }
        catch (error) {
            this.logger.error('Error showing habits management:', error);
            await ctx.editMessageTextWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∞–º–∏');
        }
    }
    async confirmHabitDeletion(ctx, habitId) {
        try {
            const habit = await this.habitService.findHabitById(habitId, ctx.userId);
            if (!habit) {
                await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }
            await ctx.editMessageTextWithMarkdown(`
‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ*

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É:

üìù *${habit.title}*

‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å',
                                callback_data: `confirm_delete_habit_${habitId}`,
                            },
                            {
                                text: '‚ùå –û—Ç–º–µ–Ω–∞',
                                callback_data: `cancel_delete_habit_${habitId}`,
                            },
                        ],
                    ],
                },
            });
        }
        catch (error) {
            this.logger.error('Error confirming habit deletion:', error);
            await ctx.editMessageTextWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è');
        }
    }
    async deleteHabit(ctx, habitId) {
        try {
            const habit = await this.habitService.findHabitById(habitId, ctx.userId);
            if (!habit) {
                await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }
            await this.habitService.deleteHabit(habitId, ctx.userId);
            await ctx.editMessageTextWithMarkdown(`
‚úÖ *–ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞*

–ü—Ä–∏–≤—ã—á–∫–∞ "${habit.title}" –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.
      `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–≤—ã—á–∫–∞–º–∏',
                                callback_data: 'habits_manage',
                            },
                        ],
                        [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }],
                    ],
                },
            });
        }
        catch (error) {
            this.logger.error('Error deleting habit:', error);
            await ctx.editMessageTextWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–≤—ã—á–∫–∞–º–∏',
                                callback_data: 'habits_manage',
                            },
                        ],
                    ],
                },
            });
        }
    }
    async confirmTimezone(ctx, timezone) {
        try {
            await this.userService.updateUser(ctx.userId, {
                timezone: timezone,
            });
            await ctx.editMessageTextWithMarkdown(`
‚úÖ *–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!*

üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${timezone}

–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏!
      `);
            ctx.session.step = undefined;
            if (ctx.session.pendingAction === 'adding_task') {
                ctx.session.pendingAction = undefined;
                await this.startAddingTask(ctx);
            }
            else if (ctx.session.pendingAction === 'adding_habit') {
                ctx.session.pendingAction = undefined;
                ctx.session.step = 'adding_habit';
                await ctx.editMessageTextWithMarkdown('üîÑ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                        ],
                    },
                });
            }
            else {
                await this.showMainMenu(ctx);
            }
        }
        catch (error) {
            this.logger.error('Error confirming timezone:', error);
            await ctx.editMessageTextWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞');
        }
    }
    async showTimezoneList(ctx) {
        const commonTimezones = [
            { name: '–ú–æ—Å–∫–≤–∞', tz: 'Europe/Moscow' },
            { name: '–°–ü–±', tz: 'Europe/Moscow' },
            { name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', tz: 'Asia/Yekaterinburg' },
            { name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', tz: 'Asia/Novosibirsk' },
            { name: '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', tz: 'Asia/Vladivostok' },
            { name: '–ê—Å—Ç–∞–Ω–∞', tz: 'Asia/Almaty' },
            { name: '–ö–∏–µ–≤', tz: 'Europe/Kiev' },
            { name: '–ú–∏–Ω—Å–∫', tz: 'Europe/Minsk' },
            { name: '–õ–æ–Ω–¥–æ–Ω', tz: 'Europe/London' },
            { name: '–ü–∞—Ä–∏–∂', tz: 'Europe/Paris' },
            { name: '–ù—å—é-–ô–æ—Ä–∫', tz: 'America/New_York' },
            { name: '–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å', tz: 'America/Los_Angeles' },
        ];
        await ctx.editMessageTextWithMarkdown(`
üïê *–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å*

–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π –∫ –≤–∞–º –≥–æ—Ä–æ–¥:`, {
            reply_markup: {
                inline_keyboard: [
                    ...commonTimezones.map((city) => [
                        {
                            text: `üèôÔ∏è ${city.name}`,
                            callback_data: `confirm_timezone_${city.tz}`,
                        },
                    ]),
                    [{ text: 'üîô –í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é', callback_data: 'input_city' }],
                ],
            },
        });
    }
    formatTimeWithTimezone(date, timezone) {
        return date.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
            timeZone: timezone || 'Europe/Moscow',
        });
    }
    async startAddingHabit(ctx) {
        const user = await this.userService.findByTelegramId(ctx.userId);
        if (!user.timezone) {
            ctx.session.pendingAction = 'adding_habit';
            await this.askForTimezone(ctx);
            return;
        }
        ctx.session.step = 'adding_habit';
        await ctx.replyWithMarkdown('üîÑ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                ],
            },
        });
    }
    async analyzeAndCreateFromVoice(ctx, text) {
        const lowercaseText = text.toLowerCase();
        const isReminder = this.isReminderRequest(text);
        if (isReminder) {
            await this.processReminderFromText(ctx, text);
            return;
        }
        const isHabit = this.isHabitRequest(lowercaseText);
        if (isHabit) {
            const habitName = this.extractHabitName(text);
            await this.createHabitFromVoice(ctx, habitName);
            return;
        }
        const mightBeReminder = /–Ω–∞–ø–æ–º–Ω–∏|–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ|–Ω–µ –∑–∞–±—ã—Ç—å|–≤—Å–ø–æ–º–Ω–∏—Ç—å|–ø–æ–º–Ω–∏/i.test(text);
        if (mightBeReminder || text.length > 10) {
            await this.showVoiceAnalysisOptions(ctx, text);
            return;
        }
        const taskName = this.extractTaskName(text);
        await this.createTaskFromVoice(ctx, taskName);
    }
    async showVoiceAnalysisOptions(ctx, text) {
        const encodedText = encodeURIComponent(text);
        await ctx.replyWithMarkdown(`ü§î *–ß—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?*

–¢–µ–∫—Å—Ç: "${text}"

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É',
                            callback_data: `create_task_from_voice:${encodedText}`,
                        },
                    ],
                    [
                        {
                            text: '‚è∞ –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
                            callback_data: `create_reminder_from_voice:${encodedText}`,
                        },
                    ],
                    [
                        {
                            text: 'üîÑ –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É',
                            callback_data: `create_habit_from_voice:${encodedText}`,
                        },
                    ],
                    [
                        {
                            text: 'üí¨ –°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò',
                            callback_data: `ai_chat_from_voice:${encodedText}`,
                        },
                    ],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                ],
            },
        });
    }
    isHabitRequest(text) {
        const habitPatterns = [
            /–ø—Ä–∏–≤—ã—á–∫–∞/i,
            /–∫–∞–∂–¥—ã–π\s+(–¥–µ–Ω—å|—á–∞—Å|—É—Ç—Ä–æ|–≤–µ—á–µ—Ä)/i,
            /–µ–∂–µ–¥–Ω–µ–≤–Ω–æ/i,
            /—Ä–µ–≥—É–ª—è—Ä–Ω–æ/i,
            /–ø–æ—Å—Ç–æ—è–Ω–Ω–æ/i,
            /–∫–∞–∂–¥–æ–µ\s+(—É—Ç—Ä–æ|–¥–µ–Ω—å|–≤–µ—á–µ—Ä)/i,
            /–ø–æ\s+\d+\s+—Ä–∞–∑/i,
            /\d+\s+—Ä–∞–∑\s+–≤\s+–¥–µ–Ω—å/i,
            /—É—Ç—Ä–æ–º\s+–¥–µ–ª–∞—Ç—å/i,
            /–≤–µ—á–µ—Ä–æ–º\s+–¥–µ–ª–∞—Ç—å/i,
            /–∫–∞–∂–¥—ã–π\s+—á–∞—Å/i,
            /^(–ø–∏—Ç—å|–¥–µ–ª–∞—Ç—å|—á–∏—Ç–∞—Ç—å|–∑–∞–Ω–∏–º–∞—Ç—å—Å—è|–º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å|–±–µ–≥–∞—Ç—å|—Ö–æ–¥–∏—Ç—å|—Å–ø–∞—Ç—å|–ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è|–µ—Å—Ç—å|–≥–æ—Ç–æ–≤–∏—Ç—å|—É–±–∏—Ä–∞—Ç—å—Å—è|–∏–∑—É—á–∞—Ç—å)\s+.*/i,
        ];
        return habitPatterns.some((pattern) => pattern.test(text));
    }
    extractHabitName(text) {
        return text
            .replace(/–¥–æ–±–∞–≤–∏—Ç—å\s*(–ø—Ä–∏–≤—ã—á–∫—É)?/gi, '')
            .replace(/–Ω–æ–≤–∞—è\s*–ø—Ä–∏–≤—ã—á–∫–∞/gi, '')
            .replace(/—Å–æ–∑–¥–∞—Ç—å\s*(–ø—Ä–∏–≤—ã—á–∫—É)?/gi, '')
            .replace(/^(–¥–µ–ª–∞—Ç—å|–ø–∏—Ç—å|—á–∏—Ç–∞—Ç—å|–∑–∞–Ω–∏–º–∞—Ç—å—Å—è|–≤—ã–ø–æ–ª–Ω—è—Ç—å)\s+/gi, '')
            .replace(/–∫–∞–∂–¥—ã–π\s*–¥–µ–Ω—å/gi, '')
            .replace(/–µ–∂–µ–¥–Ω–µ–≤–Ω–æ/gi, '')
            .replace(/—Ä–µ–≥—É–ª—è—Ä–Ω–æ/gi, '')
            .replace(/–∫–∞–∂–¥–æ–µ\s+(—É—Ç—Ä–æ|–¥–µ–Ω—å|–≤–µ—á–µ—Ä)/gi, '')
            .replace(/–ø–æ\s+\d+\s+—Ä–∞–∑/gi, '')
            .replace(/\d+\s+—Ä–∞–∑\s+–≤\s+–¥–µ–Ω—å/gi, '')
            .trim();
    }
    extractTaskName(text) {
        return text
            .replace(/–¥–æ–±–∞–≤–∏—Ç—å\s*(–∑–∞–¥–∞—á—É)?/gi, '')
            .replace(/–Ω–æ–≤–∞—è\s*–∑–∞–¥–∞—á–∞/gi, '')
            .replace(/—Å–æ–∑–¥–∞—Ç—å\s*(–∑–∞–¥–∞—á—É)?/gi, '')
            .replace(/^(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–Ω—É–∂–Ω–æ|–Ω–∞–¥–æ)\s+/gi, '')
            .replace(/\s+(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è|—á–µ—Ä–µ–∑\s+\d+\s+\w+|–≤\s+–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤–æ\s+–≤—Ç–æ—Ä–Ω–∏–∫|–≤\s+—Å—Ä–µ–¥—É|–≤\s+—á–µ—Ç–≤–µ—Ä–≥|–≤\s+–ø—è—Ç–Ω–∏—Ü—É|–≤\s+—Å—É–±–±–æ—Ç—É|–≤\s+–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ|–Ω–∞\s+—Å–ª–µ–¥—É—é—â–µ–π\s+–Ω–µ–¥–µ–ª–µ|–≤\s+—Å–ª–µ–¥—É—é—â–µ–º\s+–º–µ—Å—è—Ü–µ|–≤\s+—Å–ª–µ–¥—É—é—â–µ–º\s+–≥–æ–¥—É)$/gi, '')
            .replace(/(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è)\s+/gi, '')
            .replace(/—á–µ—Ä–µ–∑\s+\d+\s+\w+\s+/gi, '')
            .replace(/–Ω–∞\s+—Å–ª–µ–¥—É—é—â–µ–π\s+–Ω–µ–¥–µ–ª–µ\s+/gi, '')
            .replace(/–≤\s+—Å–ª–µ–¥—É—é—â–µ–º\s+(–º–µ—Å—è—Ü–µ|–≥–æ–¥—É)\s+/gi, '')
            .replace(/–≤\s+(–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥—É|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü—É|—Å—É–±–±–æ—Ç—É|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)\s+/gi, '')
            .trim();
    }
    async createHabitFromVoice(ctx, habitName) {
        if (!habitName || habitName.length < 2) {
            await ctx.replyWithMarkdown('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
        }
        try {
            await this.habitService.createHabit({
                userId: ctx.userId,
                title: habitName,
                description: undefined,
                frequency: 'DAILY',
                targetCount: 1,
            });
            await ctx.replyWithMarkdown(`‚úÖ *–ü—Ä–∏–≤—ã—á–∫–∞ "${habitName}" —Å–æ–∑–¥–∞–Ω–∞!*

üéØ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏".

*–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å - –∫–ª—é—á –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–∏–≤—ã—á–µ–∫!`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîÑ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'menu_habits' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        }
        catch (error) {
            this.logger.error(`Error creating habit from voice: ${error}`);
            await ctx.replyWithMarkdown('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
    async createTaskFromVoice(ctx, taskName) {
        if (!taskName || taskName.length < 2) {
            await ctx.replyWithMarkdown('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
        }
        try {
            const user = await this.getOrCreateUser(ctx);
            const limitCheck = await this.billingService.checkUsageLimit(ctx.userId, 'dailyTasks');
            if (!limitCheck.allowed) {
                await ctx.replyWithMarkdown(limitCheck.message || 'üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–¥–∞—á');
                return;
            }
            const task = await this.taskService.createTask({
                userId: ctx.userId,
                title: taskName,
                description: undefined,
                priority: 'MEDIUM',
            });
            await this.billingService.incrementUsage(ctx.userId, 'dailyTasks');
            await ctx.replyWithMarkdown(`‚úÖ *–ó–∞–¥–∞—á–∞ "${taskName}" —Å–æ–∑–¥–∞–Ω–∞!*

üìã ID: ${task.id}

–ó–∞–¥–∞—á—É –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∑–∞–¥–∞—á–∏".`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'menu_tasks' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        }
        catch (error) {
            this.logger.error(`Error creating task from voice: ${error}`);
            await ctx.replyWithMarkdown('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
    startDailyMotivation(userId, dependencyType) {
        const sendTime = '21:00';
        this.logger.log(`Starting daily motivation for user ${userId}, dependency: ${dependencyType}, time: ${sendTime}`);
        setTimeout(async () => {
            try {
                const message = await this.generateMotivationalMessage(dependencyType);
                await this.bot.telegram.sendMessage(userId, message, {
                    parse_mode: 'Markdown',
                });
            }
            catch (error) {
                this.logger.error(`Error sending first motivational message: ${error}`);
            }
        }, 5000);
    }
    async generateMotivationalMessage(dependencyType) {
        const messages = {
            smoking: [
                'üö≠ *–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –±–µ–∑ –∫—É—Ä–µ–Ω–∏—è - —ç—Ç–æ –ø–æ–±–µ–¥–∞!*\n\n–¢–≤–æ–∏ –ª–µ–≥–∫–∏–µ —É–∂–µ –Ω–∞—á–∞–ª–∏ –æ—á–∏—â–∞—Ç—å—Å—è. –ü—Ä–æ–¥–æ–ª–∂–∞–π!',
                'üí™ *–¢—ã —Å–∏–ª—å–Ω–µ–µ —Å–∏–≥–∞—Ä–µ—Ç!*\n\n–í—Å–ø–æ–º–Ω–∏, –∑–∞—á–µ–º —Ç—ã –Ω–∞—á–∞–ª —ç—Ç–æ—Ç –ø—É—Ç—å. –¢–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –≤–∞–∂–Ω–µ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è.',
                'üåü *–î–µ–Ω—å –∑–∞ –¥–Ω–µ–º —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —Å–≤–æ–±–æ–¥–Ω–µ–µ!*\n\n–ö–∞–∂–¥—ã–π —á–∞—Å –±–µ–∑ –∫—É—Ä–µ–Ω–∏—è - —ç—Ç–æ —à–∞–≥ –∫ –Ω–æ–≤–æ–π –∂–∏–∑–Ω–∏.',
            ],
            alcohol: [
                'üèÜ *–¢—Ä–µ–∑–≤–æ—Å—Ç—å - —Ç–≤–æ—è —Å—É–ø–µ—Ä—Å–∏–ª–∞!*\n\n–¢—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—à—å —Å–≤–æ—é –∂–∏–∑–Ω—å, –∞ –Ω–µ –∞–ª–∫–æ–≥–æ–ª—å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ç–µ–±—è.',
                'üíé *–ö–∞–∂–¥—ã–π —Ç—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ!*\n\n–¢–≤–æ–π —Ä–∞–∑—É–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —è—Å–Ω–µ–µ, –∞ —Ü–µ–ª–∏ –±–ª–∏–∂–µ.',
                'üåÖ *–ù–æ–≤—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!*\n\n–ë–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è —Ç—ã –≤–∏–¥–∏—à—å –∂–∏–∑–Ω—å –≤ —è—Ä–∫–∏—Ö –∫—Ä–∞—Å–∫–∞—Ö.',
            ],
            social: [
                'üìö *–í—Ä–µ–º—è –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö = –≤—Ä–µ–º—è –¥–ª—è —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π!*\n\n–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ –≤—Ä–µ–º—è –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è.',
                'üéØ *–†–µ–∞–ª—å–Ω–∞—è –∂–∏–∑–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π!*\n\n–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ —Ç–æ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ.',
                'üí™ *–¢—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—à—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∞ –Ω–µ –Ω–∞–æ–±–æ—Ä–æ—Ç!*\n\n–£—Å—Ç–∞–Ω–æ–≤–∏ –≥—Ä–∞–Ω–∏—Ü—ã –∏ –∂–∏–≤–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ.',
            ],
            gaming: [
                '‚ö° *–¢–≤–æ—è —Ä–µ–∞–ª—å–Ω–∞—è –∂–∏–∑–Ω—å - —Å–∞–º–∞—è –≤–∞–∂–Ω–∞—è –∏–≥—Ä–∞!*\n\n–†–∞–∑–≤–∏–≤–∞–π –Ω–∞–≤—ã–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –º–∏—Ä–µ.',
                'üèÜ *–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –±–µ–∑ –∏–≥—Ä - —ç—Ç–æ –ª–µ–≤–µ–ª –∞–ø –≤ –∂–∏–∑–Ω–∏!*\n\n–¢—ã —Ä–∞–∑–≤–∏–≤–∞–µ—à—å—Å—è –∫–∞–∫ –ª–∏—á–Ω–æ—Å—Ç—å.',
                'üéØ *–ù–∞–ø—Ä–∞–≤—å —Å–≤–æ—é —ç–Ω–µ—Ä–≥–∏—é –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!*\n\n–¢—ã —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –≤–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞.',
            ],
            shopping: [
                'üí∞ *–ö–∞–∂–¥–∞—è –Ω–µ—Å–¥–µ–ª–∞–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ = —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏!*\n\n–¢–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º.',
                'üéØ *–ü–æ–∫—É–ø–∞–π –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ, –∞ –Ω–µ –∏–º–ø—É–ª—å—Å–∏–≤–Ω–æ!*\n\n–°–ø—Ä–æ—Å–∏ —Å–µ–±—è: —ç—Ç–æ –Ω—É–∂–Ω–æ –∏–ª–∏ —Ö–æ—á–µ—Ç—Å—è?',
                'üí™ *–¢—ã —Å–∏–ª—å–Ω–µ–µ –∂–µ–ª–∞–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç—å!*\n\n–ò—Å—Ç–∏–Ω–Ω–æ–µ —Å—á–∞—Å—Ç—å–µ –Ω–µ –≤ –≤–µ—â–∞—Ö.',
            ],
            sweets: [
                'üçé *–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ - –∑–¥–æ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ!*\n\n–ö–∞–∂–¥—ã–π –æ—Ç–∫–∞–∑ –æ—Ç —Å–ª–∞–¥–∫–æ–≥–æ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ.',
                'üí™ *–¢—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—à—å —Å–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è!*\n\n–¢–≤–æ—è —Å–∏–ª–∞ –≤–æ–ª–∏ —Ä–∞—Å—Ç–µ—Ç —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º.',
                '‚ö° *–≠–Ω–µ—Ä–≥–∏—è –æ—Ç –∑–¥–æ—Ä–æ–≤–æ–π –µ–¥—ã –ª—É—á—à–µ —Å–∞—Ö–∞—Ä–Ω–æ–≥–æ –≤–∑—Ä—ã–≤–∞!*\n\n–ü–æ—á—É–≤—Å—Ç–≤—É–π —Ä–∞–∑–Ω–∏—Ü—É.',
            ],
            default: [
                'üí™ *–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!*\n\n–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ.',
                'üåü *–í–µ—Ä—å –≤ —Å–µ–±—è!*\n\n–¢—ã —Å–ø–æ—Å–æ–±–µ–Ω –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –ª—é–±—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏.',
                'üöÄ *–ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥!*\n\n–¢–≤–æ–∏ —É—Å–∏–ª–∏—è –Ω–µ –Ω–∞–ø—Ä–∞—Å–Ω—ã.',
            ],
        };
        const messageArray = messages[dependencyType] || messages.default;
        const randomMessage = messageArray[Math.floor(Math.random() * messageArray.length)];
        return `ü§ñ *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è*\n\n${randomMessage}\n\n#–ú–æ—Ç–∏–≤–∞—Ü–∏—è–î–Ω—è #–ë–æ—Ä—å–±–∞–°–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é`;
    }
    async handleLongTermReminder(ctx, reminderText, targetDate, amount, unit) {
        if (!ctx.from) {
            console.error('No user context found for long-term reminder');
            return;
        }
        const userId = ctx.from.id;
        await this.updateUserActivity(userId.toString());
        const now = new Date();
        const timeDifference = targetDate.getTime() - now.getTime();
        const daysUntilReminder = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));
        let reminderMessage = '';
        let confirmationMessage = '';
        if (unit === 'specific') {
            confirmationMessage = `‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ*\n\nüìù ${reminderText}\nüìÖ ${targetDate.toLocaleDateString('ru-RU', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
            })}`;
        }
        else {
            const unitText = this.getUnitText(amount, unit);
            confirmationMessage = `‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ*\n\nüìù ${reminderText}\n‚è≥ –ß–µ—Ä–µ–∑ ${amount} ${unitText}\nüìÖ ${targetDate.toLocaleDateString('ru-RU', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
            })}`;
        }
        await ctx.replyWithMarkdown(confirmationMessage);
        console.log(`Long-term reminder set for user ${userId}:`, {
            text: reminderText,
            targetDate: targetDate.toISOString(),
            amount,
            unit,
            daysUntil: daysUntilReminder,
        });
    }
    parseSpecificTimeExpressions(text) {
        const now = new Date();
        let targetDate = new Date(now);
        let matched = false;
        let matchedPattern = '';
        if (/–∑–∞–≤—Ç—Ä–∞/i.test(text)) {
            targetDate.setDate(targetDate.getDate() + 1);
            matched = true;
            matchedPattern = '–∑–∞–≤—Ç—Ä–∞';
        }
        else if (/–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞/i.test(text)) {
            targetDate.setDate(targetDate.getDate() + 2);
            matched = true;
            matchedPattern = '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞';
        }
        else if (/–Ω–∞\s*—Å–ª–µ–¥—É—é—â–µ–π\s*–Ω–µ–¥–µ–ª–µ/i.test(text)) {
            const daysUntilNextWeek = 7 - now.getDay() + 1;
            targetDate.setDate(targetDate.getDate() + daysUntilNextWeek);
            matched = true;
            matchedPattern = '–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ';
        }
        else if (/–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–º–µ—Å—è—Ü–µ/i.test(text)) {
            targetDate.setMonth(targetDate.getMonth() + 1);
            targetDate.setDate(1);
            matched = true;
            matchedPattern = '–≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ';
        }
        else if (/–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–≥–æ–¥—É/i.test(text)) {
            targetDate.setFullYear(targetDate.getFullYear() + 1);
            targetDate.setMonth(0);
            targetDate.setDate(1);
            matched = true;
            matchedPattern = '–≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É';
        }
        else if (/–Ω–∞\s*—ç—Ç–æ–π\s*–Ω–µ–¥–µ–ª–µ/i.test(text)) {
            matched = true;
            matchedPattern = '–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ';
        }
        else if (/–≤\s*—ç—Ç–æ–º\s*–º–µ—Å—è—Ü–µ/i.test(text)) {
            matched = true;
            matchedPattern = '–≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ';
        }
        if (!matched) {
            return null;
        }
        const reminderText = text
            .replace(/–Ω–∞–ø–æ–º–Ω–∏\s*(–º–Ω–µ)?/gi, '')
            .replace(/–Ω–∞–ø–æ–º–Ω—é\s*(—Ç–µ–±–µ|–≤–∞–º)?/gi, '')
            .replace(/–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–Ω–∞\s*—Å–ª–µ–¥—É—é—â–µ–π\s*–Ω–µ–¥–µ–ª–µ|–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–º–µ—Å—è—Ü–µ|–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–≥–æ–¥—É|–Ω–∞\s*—ç—Ç–æ–π\s*–Ω–µ–¥–µ–ª–µ|–≤\s*—ç—Ç–æ–º\s*–º–µ—Å—è—Ü–µ/gi, '')
            .trim();
        return { targetDate, reminderText };
    }
    getUnitText(amount, unit) {
        const lastDigit = amount % 10;
        const lastTwoDigits = amount % 100;
        if (unit.includes('–¥–µ–Ω—å')) {
            if (lastTwoDigits >= 11 && lastTwoDigits <= 14)
                return '–¥–Ω–µ–π';
            if (lastDigit === 1)
                return '–¥–µ–Ω—å';
            if (lastDigit >= 2 && lastDigit <= 4)
                return '–¥–Ω—è';
            return '–¥–Ω–µ–π';
        }
        if (unit.includes('–Ω–µ–¥–µ–ª')) {
            if (lastTwoDigits >= 11 && lastTwoDigits <= 14)
                return '–Ω–µ–¥–µ–ª—å';
            if (lastDigit === 1)
                return '–Ω–µ–¥–µ–ª—é';
            if (lastDigit >= 2 && lastDigit <= 4)
                return '–Ω–µ–¥–µ–ª–∏';
            return '–Ω–µ–¥–µ–ª—å';
        }
        if (unit.includes('–º–µ—Å—è—Ü')) {
            if (lastTwoDigits >= 11 && lastTwoDigits <= 14)
                return '–º–µ—Å—è—Ü–µ–≤';
            if (lastDigit === 1)
                return '–º–µ—Å—è—Ü';
            if (lastDigit >= 2 && lastDigit <= 4)
                return '–º–µ—Å—è—Ü–∞';
            return '–º–µ—Å—è—Ü–µ–≤';
        }
        if (unit.includes('–≥–æ–¥') || unit.includes('–ª–µ—Ç')) {
            if (lastTwoDigits >= 11 && lastTwoDigits <= 14)
                return '–ª–µ—Ç';
            if (lastDigit === 1)
                return '–≥–æ–¥';
            if (lastDigit >= 2 && lastDigit <= 4)
                return '–≥–æ–¥–∞';
            return '–ª–µ—Ç';
        }
        return unit;
    }
    async handleLongTermTask(ctx, taskText, targetDate, amount, unit) {
        if (!ctx.from) {
            console.error('No user context found for long-term task');
            return;
        }
        const userId = ctx.from.id;
        await this.updateUserActivity(userId.toString());
        const now = new Date();
        const timeDifference = targetDate.getTime() - now.getTime();
        const daysUntilTask = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));
        let confirmationMessage = '';
        if (unit === 'specific') {
            confirmationMessage = `‚úÖ *–ó–∞–¥–∞—á–∞ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∞*\n\nüìù ${taskText}\nüìÖ –°—Ä–æ–∫: ${targetDate.toLocaleDateString('ru-RU', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
            })}`;
        }
        else {
            const unitText = this.getUnitText(amount, unit);
            confirmationMessage = `‚úÖ *–ó–∞–¥–∞—á–∞ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∞*\n\nüìù ${taskText}\n‚è≥ –°—Ä–æ–∫: —á–µ—Ä–µ–∑ ${amount} ${unitText}\nüìÖ ${targetDate.toLocaleDateString('ru-RU', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
            })}`;
        }
        try {
            const user = await this.userService.findByTelegramId(userId.toString());
            if (!user.timezone) {
                ctx.session.step = 'waiting_for_task_title';
                ctx.session.tempData = {
                    taskTitle: taskText,
                    deadline: targetDate.toISOString(),
                    isLongTerm: true,
                };
                await this.askForTimezone(ctx);
                return;
            }
            const task = await this.taskService.createTask({
                userId: userId.toString(),
                title: taskText.trim(),
                dueDate: targetDate,
            });
            await ctx.replyWithMarkdown(confirmationMessage +
                `\n\nüí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –∏ –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞.`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'tasks_list' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        }
        catch (error) {
            console.error(`Error creating long-term task: ${error}`);
            await ctx.replyWithMarkdown('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        console.log(`Long-term task created for user ${userId}:`, {
            text: taskText,
            targetDate: targetDate.toISOString(),
            amount,
            unit,
            daysUntil: daysUntilTask,
        });
    }
    async createTaskWithDeadline(ctx, taskText, targetDate) {
        if (!ctx.from) {
            console.error('No user context found for task with deadline');
            return;
        }
        const userId = ctx.from.id;
        try {
            const user = await this.userService.findByTelegramId(userId.toString());
            if (!user.timezone) {
                ctx.session.step = 'waiting_for_task_title';
                ctx.session.tempData = {
                    taskTitle: taskText,
                    deadline: targetDate.toISOString(),
                };
                await this.askForTimezone(ctx);
                return;
            }
            const task = await this.taskService.createTask({
                userId: userId.toString(),
                title: taskText.trim(),
                dueDate: targetDate,
            });
            const confirmationMessage = `‚úÖ *–ó–∞–¥–∞—á–∞ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∞*\n\nüìù ${taskText}\n‚è∞ –°—Ä–æ–∫: ${targetDate.toLocaleDateString('ru-RU', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
            })}`;
            await ctx.replyWithMarkdown(confirmationMessage, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'tasks_list' }],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
            await this.updateUserActivity(userId.toString());
        }
        catch (error) {
            console.error(`Error creating task with deadline: ${error}`);
            await ctx.replyWithMarkdown('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
    parseSpecificTimeExpressionsForTasks(text) {
        const now = new Date();
        let targetDate = new Date(now);
        let matched = false;
        let matchedPattern = '';
        if (/–∑–∞–≤—Ç—Ä–∞/i.test(text)) {
            targetDate.setDate(targetDate.getDate() + 1);
            matched = true;
            matchedPattern = '–∑–∞–≤—Ç—Ä–∞';
        }
        else if (/–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞/i.test(text)) {
            targetDate.setDate(targetDate.getDate() + 2);
            matched = true;
            matchedPattern = '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞';
        }
        else if (/–Ω–∞\s*—Å–ª–µ–¥—É—é—â–µ–π\s*–Ω–µ–¥–µ–ª–µ/i.test(text)) {
            const daysUntilNextWeek = 7 - now.getDay() + 1;
            targetDate.setDate(targetDate.getDate() + daysUntilNextWeek);
            matched = true;
            matchedPattern = '–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ';
        }
        else if (/–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–º–µ—Å—è—Ü–µ/i.test(text)) {
            targetDate.setMonth(targetDate.getMonth() + 1);
            targetDate.setDate(1);
            matched = true;
            matchedPattern = '–≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ';
        }
        else if (/–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–≥–æ–¥—É/i.test(text)) {
            targetDate.setFullYear(targetDate.getFullYear() + 1);
            targetDate.setMonth(0);
            targetDate.setDate(1);
            matched = true;
            matchedPattern = '–≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É';
        }
        if (!matched) {
            return null;
        }
        const taskText = text
            .replace(/–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–Ω–∞\s*—Å–ª–µ–¥—É—é—â–µ–π\s*–Ω–µ–¥–µ–ª–µ|–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–º–µ—Å—è—Ü–µ|–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–≥–æ–¥—É/gi, '')
            .trim();
        return { targetDate, taskText };
    }
    async sendMessageToUser(userId, text, options) {
        try {
            await this.bot.telegram.sendMessage(userId, text, options);
            this.logger.log(`Message sent to user ${userId}`);
        }
        catch (error) {
            this.logger.error(`Failed to send message to user ${userId}:`, error);
            throw error;
        }
    }
    async completeHabitFromNotification(ctx, habitId) {
        try {
            const userId = ctx.from?.id.toString();
            if (!userId)
                return;
            const result = await this.habitService.completeHabit(habitId, userId);
            const message = `‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ "${result.habit.title}" –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\nüî• –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!\n\n‚≠ê –ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: ${result.xpGained}`;
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîÑ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'habits_list' }],
                    ],
                },
            });
        }
        catch (error) {
            this.logger.error('Error completing habit from notification:', error);
            await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
    async snoozeHabitFromNotification(ctx, habitId, minutes) {
        try {
            const delayMs = minutes * 60 * 1000;
            setTimeout(async () => {
                const habit = await this.prisma.habit.findUnique({
                    where: { id: habitId },
                    include: { user: true },
                });
                if (habit) {
                    const message = `‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤—ã—á–∫–µ*\n\nüéØ ${habit.title}\n\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à—É –ø—Ä–∏–≤—ã—á–∫—É!`;
                    const keyboard = {
                        inline_keyboard: [
                            [
                                {
                                    text: '‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª',
                                    callback_data: `complete_habit_${habitId}`,
                                },
                                {
                                    text: '‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 15 –º–∏–Ω',
                                    callback_data: `snooze_habit_${habitId}_15`,
                                },
                            ],
                            [
                                {
                                    text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                                    callback_data: `habit_stats_${habitId}`,
                                },
                                {
                                    text: '‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è',
                                    callback_data: `skip_habit_${habitId}`,
                                },
                            ],
                        ],
                    };
                    await this.sendMessageToUser(parseInt(habit.user.id), message, {
                        parse_mode: 'Markdown',
                        reply_markup: keyboard,
                    });
                }
            }, delayMs);
            await ctx.editMessageText(`‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ ${minutes} –º–∏–Ω—É—Ç.\n\n–ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –ø–æ–∑–∂–µ!`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîÑ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'habits_list' }],
                    ],
                },
            });
        }
        catch (error) {
            this.logger.error('Error snoozing habit notification:', error);
            await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.');
        }
    }
    async showHabitStatsFromNotification(ctx, habitId) {
        try {
            const habit = await this.prisma.habit.findUnique({
                where: { id: habitId },
            });
            if (!habit) {
                await ctx.editMessageText('‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
                return;
            }
            const streak = habit.currentStreak || 0;
            const bestStreak = habit.maxStreak || 0;
            const totalCompletions = habit.totalCompletions || 0;
            const message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–∫–∏ "${habit.title}"*

‚úÖ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: ${totalCompletions}
üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: ${streak} –¥–Ω–µ–π
üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: ${bestStreak} –¥–Ω–µ–π
üìÖ –ß–∞—Å—Ç–æ—Ç–∞: ${habit.frequency}

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™`;
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ–π—á–∞—Å',
                                callback_data: `complete_habit_${habitId}`,
                            },
                        ],
                        [{ text: 'üîÑ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'habits_list' }],
                    ],
                },
            });
        }
        catch (error) {
            this.logger.error('Error showing habit stats from notification:', error);
            await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
        }
    }
    async skipHabitFromNotification(ctx, habitId) {
        try {
            const habit = await this.prisma.habit.findUnique({
                where: { id: habitId },
            });
            if (!habit) {
                await ctx.editMessageText('‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
                return;
            }
            const message = `‚è≠Ô∏è –ü—Ä–∏–≤—ã—á–∫–∞ "${habit.title}" –ø—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.

–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! üåÖ`;
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîÑ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'habits_list' }],
                    ],
                },
            });
        }
        catch (error) {
            this.logger.error('Error skipping habit from notification:', error);
            await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –ø—Ä–∏–≤—ã—á–∫–∏.');
        }
    }
    async showReminderSetup(ctx, habitId) {
        try {
            const habit = await this.prisma.habit.findUnique({
                where: { id: habitId },
            });
            if (!habit) {
                await ctx.editMessageText('‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
                return;
            }
            const message = `‚è∞ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*\n\nüéØ –ü—Ä–∏–≤—ã—á–∫–∞: ${habit.title}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:`;
            const keyboard = {
                inline_keyboard: [
                    [
                        {
                            text: '‚è∞ –ö–∞–∂–¥—ã–π —á–∞—Å',
                            callback_data: `set_reminder_${habitId}_hourly`,
                        },
                        {
                            text: 'üïê –ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞',
                            callback_data: `set_reminder_${habitId}_2hours`,
                        },
                    ],
                    [
                        {
                            text: 'üïì –ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞',
                            callback_data: `set_reminder_${habitId}_3hours`,
                        },
                        {
                            text: 'üïï –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤',
                            callback_data: `set_reminder_${habitId}_6hours`,
                        },
                    ],
                    [
                        {
                            text: 'üåÖ –£—Ç—Ä–æ–º (09:00)',
                            callback_data: `set_reminder_${habitId}_morning`,
                        },
                        {
                            text: 'üåÜ –í–µ—á–µ—Ä–æ–º (19:00)',
                            callback_data: `set_reminder_${habitId}_evening`,
                        },
                    ],
                    [
                        {
                            text: 'üìÖ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å (12:00)',
                            callback_data: `set_reminder_${habitId}_daily`,
                        },
                        {
                            text: 'üóìÔ∏è –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é',
                            callback_data: `set_reminder_${habitId}_weekly`,
                        },
                    ],
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º', callback_data: 'habits_list' }],
                ],
            };
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard,
            });
        }
        catch (error) {
            this.logger.error('Error showing reminder setup:', error);
            await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.');
        }
    }
    async setHabitReminder(ctx, habitId, interval) {
        try {
            let reminderTime = '';
            let intervalText = '';
            let nextReminder = '';
            const now = new Date();
            const currentTime = now.toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit',
            });
            switch (interval) {
                case 'hourly':
                    reminderTime = '–∫–∞–∂–¥—ã–π —á–∞—Å';
                    intervalText = '–∫–∞–∂–¥—ã–π —á–∞—Å';
                    const nextHour = new Date(now);
                    nextHour.setHours(nextHour.getHours() + 1, 0, 0, 0);
                    nextReminder = nextHour.toLocaleTimeString('ru-RU', {
                        hour: '2-digit',
                        minute: '2-digit',
                    });
                    break;
                case '2hours':
                    reminderTime = '–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞';
                    intervalText = '–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞';
                    const next2Hours = new Date(now);
                    next2Hours.setHours(next2Hours.getHours() + 2, 0, 0, 0);
                    nextReminder = next2Hours.toLocaleTimeString('ru-RU', {
                        hour: '2-digit',
                        minute: '2-digit',
                    });
                    break;
                case '3hours':
                    reminderTime = '–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞';
                    intervalText = '–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞';
                    const next3Hours = new Date(now);
                    next3Hours.setHours(next3Hours.getHours() + 3, 0, 0, 0);
                    nextReminder = next3Hours.toLocaleTimeString('ru-RU', {
                        hour: '2-digit',
                        minute: '2-digit',
                    });
                    break;
                case '6hours':
                    reminderTime = '–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤';
                    intervalText = '–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤';
                    const next6Hours = new Date(now);
                    next6Hours.setHours(next6Hours.getHours() + 6, 0, 0, 0);
                    nextReminder = next6Hours.toLocaleTimeString('ru-RU', {
                        hour: '2-digit',
                        minute: '2-digit',
                    });
                    break;
                case 'morning':
                    reminderTime = '09:00';
                    intervalText = '—É—Ç—Ä–æ–º –≤ 9:00';
                    const tomorrow = new Date(now);
                    tomorrow.setDate(tomorrow.getDate() + 1);
                    tomorrow.setHours(9, 0, 0, 0);
                    nextReminder = `–∑–∞–≤—Ç—Ä–∞ –≤ ${tomorrow.toLocaleTimeString('ru-RU', {
                        hour: '2-digit',
                        minute: '2-digit',
                    })}`;
                    break;
                case 'evening':
                    reminderTime = '19:00';
                    intervalText = '–≤–µ—á–µ—Ä–æ–º –≤ 19:00';
                    const evening = new Date(now);
                    if (now.getHours() >= 19) {
                        evening.setDate(evening.getDate() + 1);
                    }
                    evening.setHours(19, 0, 0, 0);
                    const isToday = evening.getDate() === now.getDate();
                    nextReminder = `${isToday ? '—Å–µ–≥–æ–¥–Ω—è' : '–∑–∞–≤—Ç—Ä–∞'} –≤ 19:00`;
                    break;
                case 'daily':
                    reminderTime = '12:00';
                    intervalText = '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00';
                    const noon = new Date(now);
                    if (now.getHours() >= 12) {
                        noon.setDate(noon.getDate() + 1);
                    }
                    noon.setHours(12, 0, 0, 0);
                    const isTodayNoon = noon.getDate() === now.getDate();
                    nextReminder = `${isTodayNoon ? '—Å–µ–≥–æ–¥–Ω—è' : '–∑–∞–≤—Ç—Ä–∞'} –≤ 12:00`;
                    break;
                case 'weekly':
                    reminderTime = '12:00';
                    intervalText = '–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 12:00';
                    const nextMonday = new Date(now);
                    const daysUntilMonday = (1 - now.getDay() + 7) % 7 || 7;
                    nextMonday.setDate(now.getDate() + daysUntilMonday);
                    nextMonday.setHours(12, 0, 0, 0);
                    nextReminder = `–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 12:00`;
                    break;
            }
            const habit = await this.prisma.habit.update({
                where: { id: habitId },
                data: { reminderTime },
            });
            const message = `‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!*\n\nüéØ –ü—Ä–∏–≤—ã—á–∫–∞: ${habit.title}\n‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${intervalText}\n\nüïí –°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: **${nextReminder}**\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏!`;
            await ctx.editMessageText(message, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üß™ –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
                                callback_data: `complete_habit_${habitId}`,
                            },
                        ],
                        [{ text: 'üîÑ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'habits_list' }],
                    ],
                },
            });
            try {
                const notificationService = require('../services/notification.service').NotificationService;
                if (notificationService) {
                    this.logger.log(`Starting notifications for habit ${habitId} with interval ${intervalText}`);
                }
            }
            catch (error) {
                this.logger.warn('Could not start notifications immediately:', error.message);
            }
            this.logger.log(`Reminder set for habit ${habitId}: ${intervalText} - Next: ${nextReminder}`);
        }
        catch (error) {
            this.logger.error('Error setting habit reminder:', error);
            await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.');
        }
    }
    calculateNextReminderTime(reminderTime) {
        const now = new Date();
        if (reminderTime.includes('–∫–∞–∂–¥—ã–π —á–∞—Å') || reminderTime === 'hourly') {
            const nextHour = new Date(now);
            nextHour.setHours(nextHour.getHours() + 1, 0, 0, 0);
            return nextHour.toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit',
            });
        }
        if (reminderTime.includes('–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞') || reminderTime === '2hours') {
            const next2Hours = new Date(now);
            next2Hours.setHours(next2Hours.getHours() + 2, 0, 0, 0);
            return next2Hours.toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit',
            });
        }
        if (reminderTime.includes('–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞') || reminderTime === '3hours') {
            const next3Hours = new Date(now);
            next3Hours.setHours(next3Hours.getHours() + 3, 0, 0, 0);
            return next3Hours.toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit',
            });
        }
        if (reminderTime.includes('–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤') || reminderTime === '6hours') {
            const next6Hours = new Date(now);
            next6Hours.setHours(next6Hours.getHours() + 6, 0, 0, 0);
            return next6Hours.toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit',
            });
        }
        const timeMatch = reminderTime.match(/(\d{1,2}):(\d{2})/);
        if (timeMatch) {
            const [, hours, minutes] = timeMatch;
            const targetTime = new Date(now);
            targetTime.setHours(parseInt(hours), parseInt(minutes), 0, 0);
            if (targetTime <= now) {
                targetTime.setDate(targetTime.getDate() + 1);
                return `–∑–∞–≤—Ç—Ä–∞ –≤ ${targetTime.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`;
            }
            else {
                return `—Å–µ–≥–æ–¥–Ω—è –≤ ${targetTime.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`;
            }
        }
        return '–≤—Ä–µ–º—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
    }
    extractTimeIntervalFromText(text) {
        const now = new Date();
        const lowerText = text.toLowerCase();
        if (lowerText.includes('–∫–∞–∂–¥—ã–π —á–∞—Å') || lowerText.includes('–µ–∂–µ—á–∞—Å–Ω–æ')) {
            const nextHour = new Date(now);
            nextHour.setHours(nextHour.getHours() + 1, 0, 0, 0);
            return {
                interval: '–∫–∞–∂–¥—ã–π —á–∞—Å',
                nextTime: nextHour.toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit',
                }),
            };
        }
        if (lowerText.includes('–∫–∞–∂–¥—ã–µ –¥–≤–∞ —á–∞—Å–∞') ||
            lowerText.includes('–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞')) {
            const next2Hours = new Date(now);
            next2Hours.setHours(next2Hours.getHours() + 2, 0, 0, 0);
            return {
                interval: '–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞',
                nextTime: next2Hours.toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit',
                }),
            };
        }
        if (lowerText.includes('–∫–∞–∂–¥—ã–µ —Ç—Ä–∏ —á–∞—Å–∞') ||
            lowerText.includes('–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞')) {
            const next3Hours = new Date(now);
            next3Hours.setHours(next3Hours.getHours() + 3, 0, 0, 0);
            return {
                interval: '–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞',
                nextTime: next3Hours.toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit',
                }),
            };
        }
        if (lowerText.includes('–∫–∞–∂–¥—ã–µ —á–µ—Ç—ã—Ä–µ —á–∞—Å–∞') ||
            lowerText.includes('–∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞')) {
            const next4Hours = new Date(now);
            next4Hours.setHours(next4Hours.getHours() + 4, 0, 0, 0);
            return {
                interval: '–∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞',
                nextTime: next4Hours.toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit',
                }),
            };
        }
        if (lowerText.includes('–∫–∞–∂–¥—ã–µ –ø—è—Ç—å —á–∞—Å–æ–≤') ||
            lowerText.includes('–∫–∞–∂–¥—ã–µ 5 —á–∞—Å–æ–≤')) {
            const next5Hours = new Date(now);
            next5Hours.setHours(next5Hours.getHours() + 5, 0, 0, 0);
            return {
                interval: '–∫–∞–∂–¥—ã–µ 5 —á–∞—Å–æ–≤',
                nextTime: next5Hours.toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit',
                }),
            };
        }
        if (lowerText.includes('–∫–∞–∂–¥—ã–µ —à–µ—Å—Ç—å —á–∞—Å–æ–≤') ||
            lowerText.includes('–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤')) {
            const next6Hours = new Date(now);
            next6Hours.setHours(next6Hours.getHours() + 6, 0, 0, 0);
            return {
                interval: '–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤',
                nextTime: next6Hours.toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit',
                }),
            };
        }
        if (lowerText.includes('–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É') ||
            lowerText.includes('–∫–∞–∂–¥–∞—è –º–∏–Ω—É—Ç–∞')) {
            const nextMin = new Date(now);
            nextMin.setMinutes(nextMin.getMinutes() + 1);
            return {
                interval: '–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É',
                nextTime: nextMin.toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit',
                }),
            };
        }
        if (lowerText.includes('–∫–∞–∂–¥—ã–µ –¥–≤–µ –º–∏–Ω—É—Ç—ã') ||
            lowerText.includes('–∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã')) {
            const next2Min = new Date(now);
            next2Min.setMinutes(next2Min.getMinutes() + 2);
            return {
                interval: '–∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã',
                nextTime: next2Min.toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit',
                }),
            };
        }
        if (lowerText.includes('–∫–∞–∂–¥—ã–µ —Ç—Ä–∏ –º–∏–Ω—É—Ç—ã') ||
            lowerText.includes('–∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã')) {
            const next3Min = new Date(now);
            next3Min.setMinutes(next3Min.getMinutes() + 3);
            return {
                interval: '–∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã',
                nextTime: next3Min.toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit',
                }),
            };
        }
        if (lowerText.includes('–∫–∞–∂–¥—ã–µ –ø—è—Ç—å –º–∏–Ω—É—Ç') ||
            lowerText.includes('–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç')) {
            const next5Min = new Date(now);
            next5Min.setMinutes(next5Min.getMinutes() + 5);
            return {
                interval: '–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç',
                nextTime: next5Min.toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit',
                }),
            };
        }
        if (lowerText.includes('–∫–∞–∂–¥—ã–µ –¥–µ—Å—è—Ç—å –º–∏–Ω—É—Ç') ||
            lowerText.includes('–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç')) {
            const next10Min = new Date(now);
            next10Min.setMinutes(next10Min.getMinutes() + 10);
            return {
                interval: '–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç',
                nextTime: next10Min.toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit',
                }),
            };
        }
        if (lowerText.includes('–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç') ||
            lowerText.includes('–∫–∞–∂–¥—É—é —á–µ—Ç–≤–µ—Ä—Ç—å —á–∞—Å–∞')) {
            const next15Min = new Date(now);
            next15Min.setMinutes(next15Min.getMinutes() + 15);
            return {
                interval: '–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç',
                nextTime: next15Min.toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit',
                }),
            };
        }
        if (lowerText.includes('–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç') ||
            lowerText.includes('–∫–∞–∂–¥—ã–µ –ø–æ–ª—á–∞—Å–∞')) {
            const next30Min = new Date(now);
            next30Min.setMinutes(next30Min.getMinutes() + 30);
            return {
                interval: '–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç',
                nextTime: next30Min.toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit',
                }),
            };
        }
        if (lowerText.includes('–∫–∞–∂–¥—ã–π –¥–µ–Ω—å') || lowerText.includes('–µ–∂–µ–¥–Ω–µ–≤–Ω–æ')) {
            const tomorrow = new Date(now);
            tomorrow.setDate(tomorrow.getDate() + 1);
            tomorrow.setHours(9, 0, 0, 0);
            return {
                interval: '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
                nextTime: `–∑–∞–≤—Ç—Ä–∞ –≤ ${tomorrow.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`,
            };
        }
        return null;
    }
    async handleIntervalReminder(ctx, reminderText, intervalMinutes) {
        try {
            const limitCheck = await this.billingService.checkUsageLimit(ctx.userId, 'dailyReminders');
            if (!limitCheck.allowed) {
                await ctx.replyWithMarkdown(limitCheck.message || 'üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π', {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Premium',
                                    callback_data: 'upgrade_premium',
                                },
                            ],
                            [{ text: 'üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã', callback_data: 'show_limits' }],
                        ],
                    },
                });
                return;
            }
            const existingReminder = this.activeIntervalReminders.get(ctx.userId);
            if (existingReminder) {
                await ctx.replyWithMarkdown(`
‚ö†Ô∏è *–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*

üìù –¢–µ–∫—É—â–µ–µ: "${existingReminder.reminderText}"
‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ ${existingReminder.intervalMinutes} –º–∏–Ω
üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${existingReminder.count} —Ä–∞–∑

–•–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–æ–≤—ã–º?
          `, {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: '‚úÖ –ó–∞–º–µ–Ω–∏—Ç—å',
                                    callback_data: `replace_interval_${intervalMinutes}_${Buffer.from(reminderText).toString('base64')}`,
                                },
                                {
                                    text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
                                    callback_data: 'cancel_interval_setup',
                                },
                            ],
                            [
                                {
                                    text: 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ',
                                    callback_data: 'stop_interval_reminder',
                                },
                            ],
                        ],
                    },
                });
                return;
            }
            await this.startIntervalReminder(ctx, reminderText, intervalMinutes);
        }
        catch (error) {
            this.logger.error('Error handling interval reminder:', error);
            await ctx.replyWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*

–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.
      `);
        }
    }
    async startIntervalReminder(ctx, reminderText, intervalMinutes) {
        try {
            const startTime = new Date();
            let count = 0;
            const intervalId = setInterval(async () => {
                count++;
                try {
                    await ctx.telegram.sendMessage(ctx.userId, `üîî *–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #${count}*\n\n${reminderText}\n\n‚è±Ô∏è –°–ª–µ–¥—É—é—â–µ–µ —á–µ—Ä–µ–∑ ${intervalMinutes} –º–∏–Ω`, { parse_mode: 'Markdown' });
                    const reminder = this.activeIntervalReminders.get(ctx.userId);
                    if (reminder) {
                        reminder.count = count;
                    }
                }
                catch (error) {
                    this.logger.error('Error sending interval reminder:', error);
                    this.stopIntervalReminder(ctx.userId);
                }
            }, intervalMinutes * 60 * 1000);
            this.activeIntervalReminders.set(ctx.userId, {
                intervalId,
                reminderText,
                intervalMinutes,
                startTime,
                count: 0,
            });
            await this.billingService.incrementUsage(ctx.userId, 'dailyReminders');
            const usageInfo = await this.billingService.checkUsageLimit(ctx.userId, 'dailyReminders');
            const intervalText = intervalMinutes < 60
                ? `${intervalMinutes} –º–∏–Ω—É—Ç`
                : `${Math.floor(intervalMinutes / 60)} —á–∞—Å${intervalMinutes === 60 ? '' : '–∞'}`;
            await ctx.replyWithMarkdown(`
üîÑ *–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!*

üìù **–¢–µ–∫—Å—Ç:** ${reminderText}
‚è±Ô∏è **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** –∫–∞–∂–¥—ã–µ ${intervalText}
üïê **–ù–∞—á–∞—Ç–æ:** ${startTime.toLocaleTimeString('ru-RU')}

üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** ${usageInfo.current}/${usageInfo.limit === -1 ? '‚àû' : usageInfo.limit} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

üîî –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ${intervalText}!
        `, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
                                callback_data: 'stop_interval_reminder',
                            },
                            {
                                text: 'üìä –°—Ç–∞—Ç—É—Å',
                                callback_data: 'interval_status',
                            },
                        ],
                        [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                    ],
                },
            });
        }
        catch (error) {
            this.logger.error('Error starting interval reminder:', error);
            throw error;
        }
    }
    stopIntervalReminder(userId) {
        const reminder = this.activeIntervalReminders.get(userId);
        if (reminder) {
            clearInterval(reminder.intervalId);
            this.activeIntervalReminders.delete(userId);
            return true;
        }
        return false;
    }
};
exports.TelegramBotService = TelegramBotService;
exports.TelegramBotService = TelegramBotService = TelegramBotService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(9, (0, common_1.Inject)((0, common_1.forwardRef)(() => notification_service_1.NotificationService))),
    __metadata("design:paramtypes", [config_1.ConfigService,
        user_service_1.UserService,
        openai_service_1.OpenAIService,
        task_service_1.TaskService,
        habit_service_1.HabitService,
        billing_service_1.BillingService,
        ai_context_service_1.AiContextService,
        payment_service_1.PaymentService,
        prisma_service_1.PrismaService,
        notification_service_1.NotificationService])
], TelegramBotService);
//# sourceMappingURL=telegram-bot.service.js.map