import { OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf } from 'telegraf';
import { BotContext } from './bot-context.interface';
import { UserService } from '../services/user.service';
import { OpenAIService } from '../services/openai.service';
import { TaskService } from '../services/task.service';
import { HabitService } from '../services/habit.service';
import { BillingService } from '../services/billing.service';
import { AiContextService } from '../services/ai-context.service';
import { PaymentService } from '../services/payment.service';
export declare class TelegramBotService implements OnModuleInit, OnModuleDestroy {
    private readonly configService;
    private readonly userService;
    private readonly openaiService;
    private readonly taskService;
    private readonly habitService;
    private readonly billingService;
    private readonly aiContextService;
    private readonly paymentService;
    private readonly logger;
    private bot;
    private activePomodoroSessions;
    constructor(configService: ConfigService, userService: UserService, openaiService: OpenAIService, taskService: TaskService, habitService: HabitService, billingService: BillingService, aiContextService: AiContextService, paymentService: PaymentService);
    private setupMiddleware;
    private setupHandlers;
    onModuleInit(): Promise<void>;
    private startMotivationalMessagesService;
    private sendMotivationalMessages;
    private generateMotivationalMessage;
    onModuleDestroy(): Promise<void>;
    private startOnboarding;
    private showOnboardingStep1;
    private showOnboardingStep2;
    private showOnboardingStep3;
    private showMainMenu;
    launch(): Promise<void>;
    stop(): Promise<void>;
    getBotInstance(): Telegraf<BotContext>;
    private showTasksMenu;
    private startAddingTask;
    private handleTaskCreation;
    private showTasksList;
    private showAllTasksList;
    private showTodayTasks;
    private completeTask;
    private getPriorityEmoji;
    private askForTimezone;
    private showManualTimezoneSelection;
    private detectTimezoneByIP;
    private handleCityInput;
    private createProgressBar;
    private checkAndShowFeedbackRequest;
    private showFeedbackSurvey;
    private showFeedbackRequest;
    private handleFeedbackRating;
    private handleFeedbackImprovement;
    private completeFeedbackSurvey;
    private completeFeedback;
    private startAIChat;
    private handleAIAnalyzeProfile;
    private handleAITaskRecommendations;
    private handleAICustomQuestion;
    private handleAIChatMessage;
    private handleRelativeReminderRequest;
    private handleReminderRequest;
    private handleReminderTimeInput;
    private handleAudioMessage;
    private transcribeAudio;
    private processReminderFromText;
    private isReminderWithoutTime;
    private isReminderRequest;
    private showTasksAIAdvice;
    private showHabitsAIAdvice;
    private showHabitsMenu;
    private showMoodMenu;
    private showMoodAIAnalysis;
    private showFocusSession;
    private showFocusAITips;
    private createPayment;
    private getOrCreateUser;
    private handleXPPurchase;
    private checkIfUserOwnsItem;
    private processXPPurchase;
    private getItemActivationMessage;
    private completeHabit;
    private showAllHabitsList;
    private confirmTimezone;
    private showTimezoneList;
}
