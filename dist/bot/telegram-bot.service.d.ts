import { OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf } from 'telegraf';
import { BotContext } from './bot-context.interface';
import { UserService } from '../services/user.service';
import { OpenAIService } from '../services/openai.service';
import { TaskService } from '../services/task.service';
import { HabitService } from '../services/habit.service';
import { BillingService } from '../services/billing.service';
import { AiContextService } from '../services/ai-context.service';
import { PaymentService } from '../services/payment.service';
import { PrismaService } from '../database/prisma.service';
import { NotificationService } from '../services/notification.service';
export declare class TelegramBotService implements OnModuleInit, OnModuleDestroy {
    private readonly configService;
    private readonly userService;
    private readonly openaiService;
    private readonly taskService;
    private readonly habitService;
    private readonly billingService;
    private readonly aiContextService;
    private readonly paymentService;
    private readonly prisma;
    private readonly notificationService;
    setup(ctx: BotContext): Promise<void>;
    private readonly logger;
    private bot;
    private activePomodoroSessions;
    private activeIntervalReminders;
    constructor(configService: ConfigService, userService: UserService, openaiService: OpenAIService, taskService: TaskService, habitService: HabitService, billingService: BillingService, aiContextService: AiContextService, paymentService: PaymentService, prisma: PrismaService, notificationService: NotificationService);
    private setupMiddleware;
    private setupErrorHandling;
    private setupHandlers;
    private handleAITaskRecommendations;
    private handleAIHabitHelp;
    private handleAICreateHabit;
    private handleAIHabitCreationMessage;
    private parseAIHabitResponse;
    private handleNaturalReminderRequest;
    private extractReminderText;
    private extractTimeFromText;
    private askForReminderTime;
    private handleSimpleReminderRequest;
    private handleAITimePlanning;
    private handleAICustomQuestion;
    private handleReferralRegistration;
    private sendReferralAchievementNotification;
    private updateUserActivity;
    private getReferralsCount;
    private getReferralStats;
    onModuleInit(): Promise<void>;
    private startMotivationalMessagesService;
    private sendMotivationalMessages;
    onModuleDestroy(): Promise<void>;
    private startOnboarding;
    private showOnboardingStep1;
    private showOnboardingStep2;
    private showOnboardingStep3;
    private showMainMenu;
    launch(): Promise<void>;
    stop(): Promise<void>;
    getBotInstance(): Telegraf<BotContext>;
    private showTasksMenu;
    private startAddingTask;
    private handleTaskCreation;
    private showTasksList;
    private showAllTasksList;
    private showTodayTasks;
    private showCompletedTasks;
    private completeTask;
    private getPriorityEmoji;
    private askForTimezone;
    private showManualTimezoneSelection;
    private detectTimezoneByIP;
    private handleCityInput;
    private createProgressBar;
    private checkAndShowFeedbackRequest;
    private showFeedbackSurvey;
    private showFeedbackRequest;
    private handleFeedbackRating;
    private handleFeedbackImprovement;
    private completeFeedbackSurvey;
    private completeFeedback;
    private startAIChat;
    private handleAIAnalyzeProfile;
    private handleAIChatMessage;
    private handleRelativeReminderRequest;
    private handleReminderRequest;
    private handleReminderTimeInput;
    private handleAudioMessage;
    private transcribeAudio;
    private processReminderFromText;
    private isReminderWithoutTime;
    private parseRussianNumber;
    private isReminderRequest;
    private isVerbByEnding;
    private findVerbsInText;
    private isSimpleReminderRequest;
    private isTaskRequest;
    private isGeneralChatMessage;
    private processTaskFromText;
    private createTaskFromText;
    private showTasksAIAdvice;
    private showHabitsAIAdvice;
    private showHabitsMenu;
    private showHabitDetails;
    private showMoodMenu;
    private showMoodAIAnalysis;
    private showFocusSession;
    private showRemindersMenu;
    private showAllReminders;
    private showCreateReminderHelp;
    private showVoiceReminderHelp;
    private showManageReminders;
    private showRemindersStats;
    private handleDeleteReminder;
    private showFocusAITips;
    private createPayment;
    private getOrCreateUser;
    private handleXPPurchase;
    private checkIfUserOwnsItem;
    private processXPPurchase;
    private getItemActivationMessage;
    private completeHabit;
    private showAllHabitsList;
    private showHabitsManagement;
    private showHabitsNotificationsSettings;
    private getHabitFrequencyText;
    private showHabitNotificationSettings;
    private updateHabitFrequency;
    private getFrequencyDisplayText;
    private showHabitFrequencySettings;
    private showHabitTimeSettings;
    private updateHabitTime;
    private confirmHabitDeletion;
    private deleteHabit;
    private confirmTimezone;
    private showTimezoneList;
    private formatTimeWithTimezone;
    private formatDateWithTimezone;
    private startAddingHabit;
    private analyzeAndCreateFromVoice;
    private showVoiceAnalysisOptions;
    private isHabitRequest;
    private extractHabitName;
    private extractTaskName;
    private createHabitFromVoice;
    private createTaskFromVoice;
    private mapDependencyType;
    private mapEnumToCallbackType;
    private startDailyMotivation;
    private handleLongTermReminder;
    private parseSpecificTimeExpressions;
    private getUnitText;
    private handleLongTermTask;
    private createTaskWithDeadline;
    private parseSpecificTimeExpressionsForTasks;
    sendMessageToUser(userId: number, text: string, options?: any): Promise<void>;
    private completeHabitFromNotification;
    private snoozeHabitFromNotification;
    private showHabitStatsFromNotification;
    private skipHabitFromNotification;
    private showReminderSetup;
    private setHabitReminder;
    private calculateNextReminderTime;
    private extractTimeIntervalFromText;
    private handleIntervalReminder;
    private startIntervalReminder;
    private stopIntervalReminder;
    private handleQuickReminderTime;
    private handleTomorrowReminder;
    private askForCustomReminderTime;
    private createHabitFromExample;
    private showPomodoroMenu;
    private showActivePomodoroSession;
    isHabitSkippedToday(habitId: string, userId?: string): Promise<boolean>;
    private createReminderWithRelativeTime;
    private createReminderWithSpecificTime;
    private handleReminderTimeInputFromTask;
    private showSystemInfo;
    private getDependencyTypeRussian;
    private testMotivationSystem;
}
