"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var NotificationService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationService = void 0;
const common_1 = require("@nestjs/common");
const schedule_1 = require("@nestjs/schedule");
const prisma_service_1 = require("../database/prisma.service");
const telegram_bot_service_1 = require("../bot/telegram-bot.service");
const habit_service_1 = require("./habit.service");
const openai_service_1 = require("./openai.service");
const task_service_1 = require("./task.service");
const cron = __importStar(require("node-cron"));
let NotificationService = NotificationService_1 = class NotificationService {
    prisma;
    telegramBotService;
    habitService;
    openaiService;
    taskService;
    schedulerRegistry;
    logger = new common_1.Logger(NotificationService_1.name);
    activeReminders = new Map();
    constructor(prisma, telegramBotService, habitService, openaiService, taskService, schedulerRegistry) {
        this.prisma = prisma;
        this.telegramBotService = telegramBotService;
        this.habitService = habitService;
        this.openaiService = openaiService;
        this.taskService = taskService;
        this.schedulerRegistry = schedulerRegistry;
    }
    async onModuleInit() {
        this.logger.log('Notification service initialized');
        await this.loadActiveHabitReminders();
    }
    async loadActiveHabitReminders() {
        this.logger.log('Individual habit reminders disabled - using AI notifications only');
    }
    async scheduleHabitReminder(habit) {
        const cronPattern = this.parseReminderPattern(habit.reminderTime, habit.frequency);
        if (!cronPattern) {
            this.logger.warn(`Could not parse reminder pattern for habit ${habit.id}`);
            return;
        }
        const jobName = `habit_reminder_${habit.id}`;
        if (this.activeReminders.has(jobName)) {
            this.cancelHabitReminder(habit.id);
        }
        try {
            const task = cron.schedule(cronPattern, async () => {
                await this.sendHabitReminder(habit);
            });
            this.activeReminders.set(jobName, task);
            task.start();
            this.logger.log(`Scheduled reminder for habit "${habit.title}" with pattern: ${cronPattern}`);
        }
        catch (error) {
            this.logger.error(`Failed to schedule reminder for habit ${habit.id}:`, error);
        }
    }
    parseReminderPattern(reminderTime, frequency) {
        if (reminderTime.includes('–∫–∞–∂–¥—ã–π —á–∞—Å') ||
            reminderTime.includes('hourly')) {
            return '0 * * * *';
        }
        if (reminderTime.includes('–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞') ||
            reminderTime.includes('every 2 hours')) {
            return '0 */2 * * *';
        }
        if (reminderTime.includes('–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞') ||
            reminderTime.includes('every 3 hours')) {
            return '0 */3 * * *';
        }
        if (reminderTime.includes('–∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞') ||
            reminderTime.includes('every 4 hours')) {
            return '0 */4 * * *';
        }
        if (reminderTime.includes('–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤') ||
            reminderTime.includes('every 6 hours')) {
            return '0 */6 * * *';
        }
        const timeMatch = reminderTime.match(/(\d{1,2}):(\d{2})/);
        if (timeMatch) {
            const [, hours, minutes] = timeMatch;
            if (frequency === 'DAILY') {
                return `${minutes} ${hours} * * *`;
            }
            if (frequency === 'WEEKLY') {
                return `${minutes} ${hours} * * 1`;
            }
        }
        if (reminderTime.includes('–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É') ||
            reminderTime.includes('every minute')) {
            return '* * * * *';
        }
        if (reminderTime.includes('–∫–∞–∂–¥—ã–µ –¥–≤–µ –º–∏–Ω—É—Ç—ã') ||
            reminderTime.includes('–∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã') ||
            reminderTime.includes('every 2 minutes')) {
            return '*/2 * * * *';
        }
        if (reminderTime.includes('–∫–∞–∂–¥—ã–µ —Ç—Ä–∏ –º–∏–Ω—É—Ç—ã') ||
            reminderTime.includes('–∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã') ||
            reminderTime.includes('every 3 minutes')) {
            return '*/3 * * * *';
        }
        if (reminderTime.includes('–∫–∞–∂–¥—ã–µ –ø—è—Ç—å –º–∏–Ω—É—Ç') ||
            reminderTime.includes('–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç') ||
            reminderTime.includes('every 5 minutes')) {
            return '*/5 * * * *';
        }
        if (reminderTime.includes('–∫–∞–∂–¥—ã–µ –¥–µ—Å—è—Ç—å –º–∏–Ω—É—Ç') ||
            reminderTime.includes('–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç') ||
            reminderTime.includes('every 10 minutes')) {
            return '*/10 * * * *';
        }
        if (reminderTime.includes('–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç') ||
            reminderTime.includes('every 15 minutes')) {
            return '*/15 * * * *';
        }
        if (reminderTime.includes('–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç') ||
            reminderTime.includes('–∫–∞–∂–¥—ã–µ –ø–æ–ª—á–∞—Å–∞') ||
            reminderTime.includes('every 30 minutes')) {
            return '*/30 * * * *';
        }
        if (frequency === 'DAILY') {
            return '0 9 * * *';
        }
        return null;
    }
    async sendHabitReminder(habit) {
        try {
            const user = habit.user ||
                (await this.prisma.user.findUnique({
                    where: { id: habit.userId },
                }));
            if (!user) {
                this.logger.warn(`User not found for habit ${habit.id}`);
                return;
            }
            if (!user.dailyReminders) {
                this.logger.log(`User ${user.id} has disabled reminders, skipping habit reminder`);
                return;
            }
            if (await this.telegramBotService.isHabitSkippedToday(habit.id, user.id)) {
                this.logger.log(`Habit ${habit.id} is skipped for today, not sending reminder`);
                return;
            }
            const thirtyMinutesAgo = new Date(Date.now() - 30 * 60 * 1000);
            if (habit.updatedAt && habit.updatedAt > thirtyMinutesAgo) {
                this.logger.log(`Habit reminder for ${habit.id} was already sent recently, skipping`);
                return;
            }
            const message = this.generateReminderMessage(habit);
            const keyboard = this.generateReminderKeyboard(habit.id);
            await this.telegramBotService.sendMessageToUser(parseInt(user.id), message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard,
            });
            await this.prisma.habit.update({
                where: { id: habit.id },
                data: { updatedAt: new Date() },
            });
            this.logger.log(`Sent reminder for habit "${habit.title}" to user ${user.id}`);
        }
        catch (error) {
            this.logger.error(`Failed to send reminder for habit ${habit.id}:`, error);
        }
    }
    generateReminderMessage(habit) {
        const messages = {
            '–ø–∏—Ç—å –≤–æ–¥—É –∫–∞–∂–¥—ã–π —á–∞—Å': [
                'üíß –í—Ä–µ–º—è –ø–∏—Ç—å –≤–æ–¥—É! –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏!',
                'üö∞ –ü–æ—Ä–∞ –≤—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã! –í–∞—à –æ—Ä–≥–∞–Ω–∏–∑–º —Å–∫–∞–∂–µ—Ç —Å–ø–∞—Å–∏–±–æ!',
                'üí¶ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—Ä–µ–º—è –¥–ª—è –≤–æ–¥—ã! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å!',
            ],
            '–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É': [
                'üèÉ‚Äç‚ôÇÔ∏è –í—Ä–µ–º—è –¥–ª—è –∑–∞—Ä—è–¥–∫–∏! –†–∞–∑–æ–º–Ω–∏—Ç–µ —Ç–µ–ª–æ!',
                'üí™ –ü–æ—Ä–∞ –¥–µ–ª–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è! –í–∞—à–µ —Ç–µ–ª–æ –∂–¥–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è!',
                'ü§∏‚Äç‚ôÄÔ∏è –í—Ä–µ–º—è –∑–∞—Ä—è–¥–∫–∏! –ù–µ—Å–∫–æ–ª—å–∫–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø—Ä–∏–¥–∞–¥—É—Ç –±–æ–¥—Ä–æ—Å—Ç–∏!',
            ],
            –º–µ–¥–∏—Ç–∞—Ü–∏—è: [
                'üßò‚Äç‚ôÇÔ∏è –í—Ä–µ–º—è –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏. –ù–∞–π–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª—è —Å–µ–±—è!',
                'üå∏ –ü–æ—Ä–∞ –ø–æ–º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å! –£—Å–ø–æ–∫–æ–π—Ç–µ —É–º –∏ —Ä–∞—Å—Å–ª–∞–±—å—Ç–µ—Å—å!',
                '‚òØÔ∏è –í—Ä–µ–º—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –≥–∞—Ä–º–æ–Ω–∏–∏! –ù–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏!',
            ],
        };
        const habitTitle = habit.title.toLowerCase();
        for (const [key, messageList] of Object.entries(messages)) {
            if (habitTitle.includes(key)) {
                return messageList[Math.floor(Math.random() * messageList.length)];
            }
        }
        return `‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤—ã—á–∫–µ*\n\nüéØ ${habit.title}\n\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à—É –ø—Ä–∏–≤—ã—á–∫—É!`;
    }
    generateReminderKeyboard(habitId) {
        return {
            inline_keyboard: [
                [
                    { text: '‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª', callback_data: `complete_habit_${habitId}` },
                    {
                        text: '‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 15 –º–∏–Ω',
                        callback_data: `snooze_habit_${habitId}_15`,
                    },
                ],
                [
                    { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: `habit_stats_${habitId}` },
                    {
                        text: '‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è',
                        callback_data: `skip_habit_${habitId}`,
                    },
                ],
                [
                    {
                        text: 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                        callback_data: 'disable_all_reminders',
                    },
                ],
            ],
        };
    }
    async cancelHabitReminder(habitId) {
        const jobName = `habit_reminder_${habitId}`;
        if (this.activeReminders.has(jobName)) {
            const task = this.activeReminders.get(jobName);
            task?.stop();
            task?.destroy();
            this.activeReminders.delete(jobName);
            this.logger.log(`Cancelled reminder for habit ${habitId}`);
        }
    }
    async updateHabitReminder(habitId) {
        this.logger.log(`Individual habit reminder update skipped for habit ${habitId} - using AI notifications only`);
    }
    async snoozeHabitReminder(habitId, minutes) {
        const delayMs = minutes * 60 * 1000;
        setTimeout(async () => {
            const habit = await this.prisma.habit.findUnique({
                where: { id: habitId },
                include: { user: true },
            });
            if (habit) {
                await this.sendHabitReminder(habit);
            }
        }, delayMs);
        this.logger.log(`Snoozed habit ${habitId} for ${minutes} minutes`);
    }
    async checkAndSendReminders() {
        return;
        try {
            const now = new Date();
            const currentMinuteStart = new Date(now);
            currentMinuteStart.setSeconds(0, 0);
            const currentMinuteEnd = new Date(currentMinuteStart);
            currentMinuteEnd.setMinutes(currentMinuteEnd.getMinutes() + 1);
            const remindersToSend = await this.prisma.reminder.findMany({
                where: {
                    status: 'ACTIVE',
                    scheduledTime: {
                        gte: currentMinuteStart,
                        lt: currentMinuteEnd,
                    },
                },
                include: {
                    user: true,
                },
            });
            for (const reminder of remindersToSend) {
                try {
                    if (!reminder.user.dailyReminders) {
                        this.logger.log(`User ${reminder.userId} has disabled reminders, skipping`);
                        await this.prisma.reminder.update({
                            where: { id: reminder.id },
                            data: { status: 'DISMISSED' },
                        });
                        continue;
                    }
                    await this.sendGeneralReminder(reminder);
                    await this.prisma.reminder.update({
                        where: { id: reminder.id },
                        data: {
                            status: 'COMPLETED',
                        },
                    });
                    this.logger.log(`Sent reminder "${reminder.title}" to user ${reminder.userId}`);
                }
                catch (error) {
                    this.logger.error(`Failed to send reminder ${reminder.id}:`, error);
                    await this.prisma.reminder.update({
                        where: { id: reminder.id },
                        data: { status: 'DISMISSED' },
                    });
                }
            }
            if (remindersToSend.length > 0) {
                this.logger.log(`Processed ${remindersToSend.length} reminders`);
            }
        }
        catch (error) {
            this.logger.error('Error in checkAndSendReminders:', error);
        }
    }
    async sendGeneralReminder(reminder) {
        const message = `üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\n${reminder.message}`;
        await this.telegramBotService.sendMessageToUser(parseInt(reminder.user.id), message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '‚úÖ –ì–æ—Ç–æ–≤–æ',
                            callback_data: `reminder_done_${reminder.id.substring(0, 20)}`,
                        },
                    ],
                    [
                        {
                            text: '‚è∞ –ß–µ—Ä–µ–∑ 15 –º–∏–Ω',
                            callback_data: `reminder_snooze_15_${reminder.id.substring(0, 20)}`,
                        },
                        {
                            text: '‚è∞ –ß–µ—Ä–µ–∑ —á–∞—Å',
                            callback_data: `reminder_snooze_60_${reminder.id.substring(0, 20)}`,
                        },
                    ],
                    [
                        {
                            text: 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                            callback_data: 'disable_all_reminders',
                        },
                    ],
                ],
            },
        });
    }
    async cleanupOldJobs() {
        this.logger.log('Running daily cleanup of notification jobs');
        const inactiveHabits = await this.prisma.habit.findMany({
            where: { isActive: false },
            select: { id: true },
        });
        for (const habit of inactiveHabits) {
            await this.cancelHabitReminder(habit.id);
        }
        this.logger.log(`Cleaned up ${inactiveHabits.length} inactive habit reminders`);
    }
    async sendMorningMotivation() {
        this.logger.log('Running morning motivation messages');
        try {
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const activeDependencies = await this.prisma.dependencySupport.findMany({
                where: {
                    status: 'ACTIVE',
                    OR: [{ lastMorningSent: null }, { lastMorningSent: { lt: today } }],
                },
                include: { user: true },
            });
            for (const dependency of activeDependencies) {
                try {
                    const motivation = this.generateMorningMotivation(dependency.type);
                    await this.telegramBotService.sendMessageToUser(parseInt(dependency.user.id), `üåÖ *–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!*\n\n${motivation}\n\nüí™ –¢—ã —Å–º–æ–∂–µ—à—å —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —ç—Ç–∏–º!`, {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: 'ü§ù –û–±–µ—â–∞—é —Å–∞–º —Å–µ–±–µ',
                                        callback_data: `morning_promise_${dependency.type.toLowerCase()}`,
                                    },
                                ],
                            ],
                        },
                        parse_mode: 'Markdown',
                    });
                    await this.prisma.dependencySupport.update({
                        where: { id: dependency.id },
                        data: {
                            totalPromises: dependency.totalPromises + 1,
                            lastMorningSent: new Date(),
                        },
                    });
                }
                catch (error) {
                    this.logger.error(`Failed to send morning message to ${dependency.user.id}:`, error);
                }
            }
            this.logger.log(`Sent morning messages to ${activeDependencies.length} users`);
        }
        catch (error) {
            this.logger.error('Error in morning motivation job:', error);
        }
    }
    async sendEveningCheck() {
        this.logger.log('Running evening check messages');
        try {
            const activeDependencies = await this.prisma.dependencySupport.findMany({
                where: { status: 'ACTIVE' },
                include: { user: true },
            });
            for (const dependency of activeDependencies) {
                try {
                    const checkMessage = this.generateEveningCheck(dependency.type);
                    await this.telegramBotService.sendMessageToUser(parseInt(dependency.user.id), `üåô *–í—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –¥–Ω—è*\n\n${checkMessage}\n\n‚ùì –ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å? –ü—Ä–æ–¥–µ—Ä–∂–∞–ª—Å—è?`, {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: 'üí™ –î–µ—Ä–∂—É—Å—å',
                                        callback_data: `evening_holding_${dependency.type.toLowerCase()}`,
                                    },
                                    {
                                        text: 'üòî –°–¥–∞–ª—Å—è',
                                        callback_data: `evening_failed_${dependency.type.toLowerCase()}`,
                                    },
                                ],
                            ],
                        },
                        parse_mode: 'Markdown',
                    });
                }
                catch (error) {
                    this.logger.error(`Failed to send evening message to ${dependency.user.id}:`, error);
                }
            }
            this.logger.log(`Sent evening messages to ${activeDependencies.length} users`);
        }
        catch (error) {
            this.logger.error('Error in evening check job:', error);
        }
    }
    generateMorningMotivation(dependencyType) {
        const motivations = {
            SMOKING: [
                'üö≠ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –±–µ–∑ —Å–∏–≥–∞—Ä–µ—Ç - —ç—Ç–æ –¥–µ–Ω—å, –∫–æ–≥–¥–∞ —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —Å–∏–ª—å–Ω–µ–µ',
                'üå± –¢–≤–æ—ë —Ç–µ–ª–æ —É–∂–µ –Ω–∞—á–∏–Ω–∞–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è. –ü—Ä–æ–¥–æ–ª–∂–∞–π!',
                'üí® –ö–∞–∂–¥—ã–π –≤–¥–æ—Ö —á–∏—Å—Ç–æ–≥–æ –≤–æ–∑–¥—É—Ö–∞ - —ç—Ç–æ —Ç–≤–æ—è –ø–æ–±–µ–¥–∞',
            ],
            ALCOHOL: [
                'üß† –Ø—Å–Ω–æ—Å—Ç—å –º—ã—Å–ª–∏ –∏ —ç–Ω–µ—Ä–≥–∏—è - —ç—Ç–æ —Ç–≤–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Ç—Ä–µ–∑–≤–æ—Å—Ç—å',
                'üí™ –¢—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—à—å —Å–≤–æ—é –∂–∏–∑–Ω—å, –∞ –Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å',
                'üåü –ö–∞–∂–¥—ã–π —Ç—Ä–µ–∑–≤—ã–π –¥–µ–Ω—å –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è',
            ],
            DRUGS: [
                'üÜì –°–≤–æ–±–æ–¥–∞ –æ—Ç –≤–µ—â–µ—Å—Ç–≤ - —ç—Ç–æ —Å–≤–æ–±–æ–¥–∞ –±—ã—Ç—å —Å–æ–±–æ–π',
                'üßò‚Äç‚ôÇÔ∏è –¢–≤–æ–π —Ä–∞–∑—É–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —è—Å–Ω–µ–µ —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º',
                'üåà –ñ–∏–∑–Ω—å –ø–æ–ª–Ω–∞ –∫—Ä–∞—Å–æ–∫, –∫–æ–≥–¥–∞ —Ç—ã –≤–∏–¥–∏—à—å –µ—ë —Ä–µ–∞–ª—å–Ω–æ–π',
            ],
            GAMING: [
                'üéØ –†–µ–∞–ª—å–Ω–∞—è –∂–∏–∑–Ω—å - —ç—Ç–æ —Ç–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∏–≥—Ä–∞',
                '‚è∞ –í—Ä–µ–º—è, –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ç–µ—Ä—è–µ—Ç—Å—è',
                'üå± –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –±–µ–∑ –∏–≥—Ä - —à–∞–≥ –∫ –Ω–æ–≤—ã–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º',
            ],
            SOCIAL_MEDIA: [
                'üì± –†–µ–∞–ª—å–Ω—ã–π –º–∏—Ä –Ω–∞–º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ',
                'üë• –ñ–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ –¥–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é, –∫–æ—Ç–æ—Ä—É—é –Ω–µ –¥–∞—Å—Ç —ç–∫—Ä–∞–Ω',
                'üßò‚Äç‚ôÄÔ∏è –ü–æ–∫–æ–π —É–º–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –æ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
            ],
        };
        const typeMotivations = motivations[dependencyType] || motivations.SMOKING;
        return typeMotivations[Math.floor(Math.random() * typeMotivations.length)];
    }
    generateEveningCheck(dependencyType) {
        const checks = {
            SMOKING: 'üö≠ –ö–∞–∫ –¥–µ–ª–∞ —Å –æ—Ç–∫–∞–∑–æ–º –æ—Ç –∫—É—Ä–µ–Ω–∏—è?',
            ALCOHOL: 'üç∑ –ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è?',
            DRUGS: 'üíä –£–¥–∞–ª–æ—Å—å –ª–∏ –∏–∑–±–µ–∂–∞—Ç—å —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è?',
            GAMING: 'üéÆ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞–ª –ª–∏ –≤—Ä–µ–º—è –∑–∞ –∏–≥—Ä–∞–º–∏?',
            SOCIAL_MEDIA: 'üì± –ö–∞–∫ –¥–µ–ª–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–æ—Ü—Å–µ—Ç–µ–π?',
        };
        return checks[dependencyType] || checks.SMOKING;
    }
    async sendMorningAINotifications() {
        this.logger.log('Running morning AI notifications for all users');
        try {
            const users = await this.prisma.user.findMany({
                where: {
                    timezone: { not: null },
                    OR: [
                        { habits: { some: { isActive: true } } },
                        { tasks: { some: { status: 'PENDING' } } },
                    ],
                },
                include: {
                    habits: { where: { isActive: true } },
                    tasks: { where: { status: 'PENDING' } },
                },
            });
            for (const user of users) {
                try {
                    const tasksText = user.tasks.map((t) => t.title).join(', ');
                    const habitsText = user.habits.map((h) => h.title).join(', ');
                    const aiPrompt = `
–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ (–Ω–µ –±–æ–ª–µ–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${tasksText || '–ù–µ—Ç –∑–∞–¥–∞—á'}
–ü—Ä–∏–≤—ã—á–∫–∏: ${habitsText || '–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫'}

–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:
- –≠–Ω–µ—Ä–≥–∏—á–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º
- –ö—Ä–∞—Ç–∫–∏–º –∏ –µ–º–∫–∏–º
- –°–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
- –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —ç–º–æ–¥–∑–∏ —É—Ç—Ä–∞ (üåÖ –∏–ª–∏ ‚òÄÔ∏è)
`;
                    const aiAdvice = await this.openaiService.getAIResponse(aiPrompt);
                    await this.telegramBotService.sendMessageToUser(parseInt(user.id), `${aiAdvice}\n\nüí™ –£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è!`, {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üéØ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'my_habits' }],
                                [{ text: 'üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'my_tasks' }],
                            ],
                        },
                        parse_mode: 'Markdown',
                    });
                    this.logger.log(`Sent morning AI notification to user ${user.id}`);
                }
                catch (error) {
                    this.logger.error(`Failed to send morning AI notification to ${user.id}:`, error);
                }
            }
            this.logger.log(`Sent morning AI notifications to ${users.length} users`);
        }
        catch (error) {
            this.logger.error('Error in morning AI notifications job:', error);
        }
    }
    async sendEveningAISummary() {
        this.logger.log('Running evening AI summary for all users');
        try {
            const users = await this.prisma.user.findMany({
                where: {
                    timezone: { not: null },
                    OR: [
                        { habits: { some: { isActive: true } } },
                        {
                            tasks: {
                                some: {
                                    status: 'COMPLETED',
                                    updatedAt: { gte: new Date(new Date().setHours(0, 0, 0, 0)) },
                                },
                            },
                        },
                    ],
                },
                include: {
                    habits: { where: { isActive: true } },
                    tasks: {
                        where: {
                            status: 'COMPLETED',
                            updatedAt: { gte: new Date(new Date().setHours(0, 0, 0, 0)) },
                        },
                    },
                },
            });
            for (const user of users) {
                try {
                    const completedTasksText = user.tasks.map((t) => t.title).join(', ');
                    const habitsText = user.habits.map((h) => h.title).join(', ');
                    const aiPrompt = `
–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π (–Ω–µ –±–æ–ª–µ–µ 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –≤–µ—á–µ—Ä–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –¥–Ω—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è: ${completedTasksText || '–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á'}
–ü—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${habitsText || '–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫'}

–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º
- –°–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
- –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –≤–µ—á–µ—Ä–Ω–µ–≥–æ —ç–º–æ–¥–∑–∏ (üåô –∏–ª–∏ üåÜ)
`;
                    const aiAnalysis = await this.openaiService.getAIResponse(aiPrompt);
                    await this.telegramBotService.sendMessageToUser(parseInt(user.id), `${aiAnalysis}\n\nüò¥ –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏!`, {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', callback_data: 'my_progress' }],
                                [
                                    {
                                        text: 'üéØ –ó–∞–≤—Ç—Ä–∞ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞!',
                                        callback_data: 'back_to_menu',
                                    },
                                ],
                            ],
                        },
                        parse_mode: 'Markdown',
                    });
                    this.logger.log(`Sent evening AI summary to user ${user.id}`);
                }
                catch (error) {
                    this.logger.error(`Failed to send evening AI summary to ${user.id}:`, error);
                }
            }
            this.logger.log(`Sent evening AI summaries to ${users.length} users`);
        }
        catch (error) {
            this.logger.error('Error in evening AI summary job:', error);
        }
    }
};
exports.NotificationService = NotificationService;
__decorate([
    (0, schedule_1.Cron)(schedule_1.CronExpression.EVERY_DAY_AT_MIDNIGHT),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], NotificationService.prototype, "cleanupOldJobs", null);
__decorate([
    (0, schedule_1.Cron)('0 9 * * *'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], NotificationService.prototype, "sendMorningMotivation", null);
__decorate([
    (0, schedule_1.Cron)('0 21 * * *'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], NotificationService.prototype, "sendEveningCheck", null);
__decorate([
    (0, schedule_1.Cron)('0 9 * * *'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], NotificationService.prototype, "sendMorningAINotifications", null);
__decorate([
    (0, schedule_1.Cron)('0 21 * * *'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], NotificationService.prototype, "sendEveningAISummary", null);
exports.NotificationService = NotificationService = NotificationService_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(1, (0, common_1.Inject)((0, common_1.forwardRef)(() => telegram_bot_service_1.TelegramBotService))),
    __metadata("design:paramtypes", [prisma_service_1.PrismaService,
        telegram_bot_service_1.TelegramBotService,
        habit_service_1.HabitService,
        openai_service_1.OpenAIService,
        task_service_1.TaskService,
        schedule_1.SchedulerRegistry])
], NotificationService);
//# sourceMappingURL=notification.service.js.map