"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AiContextService = void 0;
const common_1 = require("@nestjs/common");
const prisma_service_1 = require("../database/prisma.service");
const openai_service_1 = require("./openai.service");
let AiContextService = class AiContextService {
    prisma;
    openaiService;
    constructor(prisma, openaiService) {
        this.prisma = prisma;
        this.openaiService = openaiService;
    }
    async getUserContext(userId) {
        try {
            const user = await this.prisma.user.findUnique({
                where: { id: userId },
                include: {
                    tasks: {
                        take: 10,
                        orderBy: { createdAt: 'desc' },
                    },
                    habits: {
                        take: 10,
                        orderBy: { createdAt: 'desc' },
                    },
                    moods: {
                        take: 7,
                        orderBy: { createdAt: 'desc' },
                    },
                    focusSessions: {
                        take: 10,
                        orderBy: { createdAt: 'desc' },
                    },
                    userAchievements: {
                        include: {
                            achievement: true,
                        },
                    },
                },
            });
            if (!user) {
                return { userId };
            }
            const context = {
                userId,
                name: user.firstName || user.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                timezone: user.timezone || undefined,
                totalXp: user.totalXp || 0,
                currentStreak: user.currentStreak || 0,
                subscriptionType: user.subscriptionType || 'FREE',
                tasks: user.tasks?.map((task) => ({
                    title: task.title,
                    priority: task.priority.toString(),
                    category: task.category || 'general',
                    completed: task.status === 'COMPLETED',
                    dueDate: task.dueDate || undefined,
                })) || [],
                moodHistory: user.moods?.map((mood) => ({
                    mood: mood.mood.toString(),
                    date: mood.createdAt,
                    notes: mood.note || undefined,
                })) || [],
                habits: user.habits?.map((habit) => ({
                    name: habit.title,
                    category: habit.category || 'general',
                    streak: habit.currentStreak || 0,
                    lastCompleted: habit.updatedAt,
                })) || [],
                focusSessions: user.focusSessions?.map((session) => ({
                    duration: session.actualDuration || session.plannedDuration || 0,
                    date: session.createdAt,
                    productivity: session.productivityRating || 5,
                })) || [],
                achievements: user.userAchievements?.map((ua) => ua.achievement.name) || [],
            };
            return context;
        }
        catch (error) {
            console.error('Error getting user context:', error);
            return { userId };
        }
    }
    async generatePersonalizedMessage(userId, messageType, customPrompt) {
        const context = await this.getUserContext(userId);
        const systemPrompts = {
            motivation: this.getMotivationPrompt(context),
            task_suggestion: this.getTaskSuggestionPrompt(context),
            habit_advice: this.getHabitAdvicePrompt(context),
            mood_analysis: this.getMoodAnalysisPrompt(context),
            focus_tips: this.getFocusTipsPrompt(context),
            dependency_help: this.getDependencyHelpPrompt(context),
        };
        const systemPrompt = systemPrompts[messageType] || systemPrompts.motivation;
        const userPrompt = customPrompt || this.getDefaultUserPrompt(messageType);
        try {
            const fullPrompt = `${systemPrompt}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userPrompt}`;
            console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è habit_advice:', {
                userId,
                habitsCount: context.habits?.length || 0,
                habits: context.habits?.map((h) => h.name).join(', ') || '–Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫',
            });
            const response = await this.openaiService.getAIResponse(fullPrompt);
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenAI:', response?.substring(0, 200) + '...');
            return response;
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–ò –æ—Ç–≤–µ—Ç–∞:', error);
            console.log('üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Å–æ–æ–±—â–µ–Ω–∏–µ');
            return this.getFallbackMessage(messageType, context);
        }
    }
    getMotivationPrompt(context) {
        return `–¢—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. 
    
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
- –ò–º—è: ${context.name}
- –û–ø—ã—Ç: ${context.totalXp} XP
- –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: ${context.currentStreak} –¥–Ω–µ–π
- –ü–æ–¥–ø–∏—Å–∫–∞: ${context.subscriptionType}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: ${context.tasks?.filter((t) => !t.completed).length || 0}
- –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ${context.tasks?.filter((t) => t.completed).length || 0}
- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${context.moodHistory?.[0]?.mood || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}

–¢–≤–æ—è —Ä–æ–ª—å - –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∏ –¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã. 
–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —Å —ç–º–æ–¥–∑–∏, –∫—Ä–∞—Ç–∫–æ (–¥–æ 200 —Å–ª–æ–≤).
–£—á–∏—Ç—ã–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞–π –µ–≥–æ.`;
    }
    getTaskSuggestionPrompt(context) {
        return `–¢—ã –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–¥–∞—á–∞–º–∏.
    
–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: ${JSON.stringify(context.tasks?.filter((t) => !t.completed) || [])}
- –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: ${JSON.stringify(context.tasks?.filter((t) => t.completed) || [])}
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${context.moodHistory?.[0]?.mood || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
- –°—Ç—Ä–∏–∫: ${context.currentStreak} –¥–Ω–µ–π

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π:
1. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∑–∞–¥–∞—á
2. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
3. –†–∞–∑–±–∏–≤–∫—É —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á
4. –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã

–û—Ç–≤–µ—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –¥–µ–π—Å—Ç–≤–µ–Ω–Ω–æ, —Å —ç–º–æ–¥–∑–∏.`;
    }
    getHabitAdvicePrompt(context) {
        const habits = context.habits || [];
        const activeHabits = habits.filter((h) => h.streak > 0);
        const strugglingHabits = habits.filter((h) => h.streak === 0);
        const avgStreak = habits.length > 0
            ? Math.round(habits.reduce((acc, h) => acc + h.streak, 0) / habits.length)
            : 0;
        const habitDetails = habits
            .map((h) => {
            const daysSinceLastCompleted = h.lastCompleted
                ? Math.floor((Date.now() - new Date(h.lastCompleted).getTime()) /
                    (1000 * 60 * 60 * 24))
                : '–Ω–∏–∫–æ–≥–¥–∞';
            return `"${h.name}" (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${h.category}, —Å—Ç—Ä–∏–∫: ${h.streak} –¥–Ω–µ–π, –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: ${daysSinceLastCompleted === '–Ω–∏–∫–æ–≥–¥–∞' ? '–Ω–∏–∫–æ–≥–¥–∞' : daysSinceLastCompleted + ' –¥–Ω–µ–π –Ω–∞–∑–∞–¥'})`;
        })
            .join('; ');
        return `–¢—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∫–æ—É—á –ø–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–∏–≤—ã—á–µ–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¥–∞—Ç—å –ö–û–ù–ö–†–ï–¢–ù–´–ï –∏ –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï —Å–æ–≤–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- –í—Å–µ–≥–æ –ø—Ä–∏–≤—ã—á–µ–∫: ${habits.length}
- –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ (—Å–æ —Å—Ç—Ä–∏–∫–æ–º > 0): ${activeHabits.length}
- –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ (—Å—Ç—Ä–∏–∫ = 0): ${strugglingHabits.length}
- –°—Ä–µ–¥–Ω–∏–π —Å—Ç—Ä–∏–∫: ${avgStreak} –¥–Ω–µ–π
- –î–µ—Ç–∞–ª–∏ –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º: ${habitDetails || '–Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫'}
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${context.moodHistory?.[0]?.mood || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
- –û–±—â–∏–π –æ–ø—ã—Ç: ${context.totalXp} XP

–í–ê–ñ–ù–û: 
1. –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–∞–π –û–î–ù–û –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤)
2. –î–∞–ª–µ–µ –¥–∞–π 3 –ö–û–ù–ö–†–ï–¢–ù–´–• —Å–æ–≤–µ—Ç–∞ –¥–ª—è –ö–û–ù–ö–†–ï–¢–ù–´–• –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
   - –î–ª—è –ø—Ä–∏–≤—ã—á–µ–∫ —Å —Ö–æ—Ä–æ—à–∏–º —Å—Ç—Ä–∏–∫–æ–º: –∫–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é
   - –î–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   - –î–ª—è –Ω–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫: –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—á–∞—Ç—å

–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö —Å–æ–≤–µ—Ç–æ–≤:
- "–î–ª—è –ø—Ä–∏–≤—ã—á–∫–∏ '–ë—Ä–æ—Å–∏—Ç—å –∫—É—Ä–∏—Ç—å': –∫–æ–≥–¥–∞ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∂–µ–ª–∞–Ω–∏–µ –∑–∞–∫—É—Ä–∏—Ç—å, —Å–¥–µ–ª–∞–π 10 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤ –∏–ª–∏ –≤—ã–ø–µ–π —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã"
- "–î–ª—è '–ó–∞—Ä—è–¥–∫–∞ –ø–æ —É—Ç—Ä–∞–º': –ø–æ—Å—Ç–∞–≤—å –æ–¥–µ–∂–¥—É –¥–ª—è –∑–∞—Ä—è–¥–∫–∏ —Ä—è–¥–æ–º —Å –∫—Ä–æ–≤–∞—Ç—å—é —Å –≤–µ—á–µ—Ä–∞"
- "–î–ª—è '–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥': —á–∏—Ç–∞–π —Ö–æ—Ç—è –±—ã 1 —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ–¥ —Å–Ω–æ–º - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É"

–ù–ï –¥–∞–≤–∞–π –æ–±—â–∏–µ —Å–æ–≤–µ—Ç—ã —Ç–∏–ø–∞ "–≤–µ—Ä—å –≤ —Å–µ–±—è" - —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!`;
    }
    getMoodAnalysisPrompt(context) {
        const recentMoods = context.moodHistory?.slice(0, 5) || [];
        return `–¢—ã –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.
    
–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${JSON.stringify(recentMoods)}
–ó–∞–¥–∞—á–∏: ${context.tasks?.length || 0} (–∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${context.tasks?.filter((t) => t.completed).length || 0})
–°—Ç—Ä–∏–∫: ${context.currentStreak} –¥–Ω–µ–π

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π:
- –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
- –°–≤—è–∑—å —Å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
- –¢–µ—Ö–Ω–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏—è–º–∏

–ë—É–¥—å —ç–º–ø–∞—Ç–∏—á–Ω—ã–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º, —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏.`;
    }
    getFocusTipsPrompt(context) {
        return `–¢—ã –ò–ò-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∏ —Ñ–æ–∫—É—Å—É.
    
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
- –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: ${context.tasks?.filter((t) => !t.completed).length || 0}
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${context.moodHistory?.[0]?.mood || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
- –ü–æ–¥–ø–∏—Å–∫–∞: ${context.subscriptionType}

–ü—Ä–µ–¥–ª–∞–≥–∞–π:
- –¢–µ—Ö–Ω–∏–∫–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–π
- –ë–æ—Ä—å–±—É —Å –æ—Ç–≤–ª–µ—á–µ–Ω–∏—è–º–∏
- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

–ò—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–æ–¥—ã –ü–æ–º–æ–¥–æ—Ä–æ, Deep Work, –∏ –¥—Ä—É–≥–∏–µ –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã.`;
    }
    getDependencyHelpPrompt(context) {
        return `–¢—ã –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∏–∑–±–∞–≤–ª–µ–Ω–∏—é –æ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
    
–ö–æ–Ω—Ç–µ–∫—Å—Ç:
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${context.moodHistory?.[0]?.mood || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
- –°—Ç—Ä–∏–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${context.currentStreak} –¥–Ω–µ–π
- –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${context.tasks?.filter((t) => t.completed).length || 0} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á

–ü–æ–º–æ–≥–∞–π —Å:
- –ê–Ω–∞–ª–∏–∑–æ–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
- –°—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –∑–∞–º–µ—â–µ–Ω–∏—è
- –ú–æ—Ç–∏–≤–∞—Ü–∏–µ–π –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

–ë—É–¥—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º, –Ω–µ –æ—Å—É–∂–¥–∞—é—â–∏–º, —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏.`;
    }
    getDefaultUserPrompt(messageType) {
        const prompts = {
            motivation: '–ú–æ—Ç–∏–≤–∏—Ä—É–π –º–µ–Ω—è –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!',
            task_suggestion: '–ü–æ–º–æ–≥–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–∏ –∑–∞–¥–∞—á–∏.',
            habit_advice: '–î–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∫–∞–∂–¥–æ–π –∏–∑ –º–æ–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫: –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å —Ç–µ, —á—Ç–æ –∏–¥—É—Ç —Ö–æ—Ä–æ—à–æ, –∏ –∫–∞–∫ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã. –ù—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏, –∞ –Ω–µ –æ–±—â–∏–µ —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.',
            mood_analysis: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.',
            focus_tips: '–ö–∞–∫ –ª—É—á—à–µ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∑–∞–¥–∞—á–∞—Ö?',
            dependency_help: '–ü–æ–º–æ–≥–∏ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –≤—Ä–µ–¥–Ω—ã–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏.',
        };
        return prompts[messageType] || prompts.motivation;
    }
    getFallbackMessage(messageType, context) {
        const messages = {
            motivation: `üöÄ ${context.name}, —Ç—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! –£ —Ç–µ–±—è ${context.totalXp} XP –∏ —Å—Ç—Ä–∏–∫ ${context.currentStreak} –¥–Ω–µ–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ —Å–≤–æ–∏–º —Ü–µ–ª—è–º!`,
            task_suggestion: 'üìù –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö, —Ä–∞–∑–±–∏–≤–∞–π –±–æ–ª—å—à–∏–µ –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —á–∞—Å—Ç–∏, –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π –æ—Ç–º–µ—á–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å!',
            habit_advice: 'üîÑ –ù–∞—á–∏–Ω–∞–π —Å –º–∞–ª–æ–≥–æ, –±—É–¥—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–Ω, –æ—Ç–º–µ—á–∞–π —É—Å–ø–µ—Ö–∏. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!',
            mood_analysis: 'üòä –¢–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –ü–æ–ø—Ä–æ–±—É–π —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –æ—Ç–¥—ã—Ö.',
            focus_tips: 'üçÖ –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ö–Ω–∏–∫—É –ü–æ–º–æ–¥–æ—Ä–æ: 25 –º–∏–Ω—É—Ç —Ñ–æ–∫—É—Å–∞, 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö. –£–±–µ—Ä–∏ –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã!',
            dependency_help: 'üí™ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –±–µ–∑ –≤—Ä–µ–¥–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ - —ç—Ç–æ –ø–æ–±–µ–¥–∞. –ó–∞–º–µ–Ω–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º!',
        };
        return messages[messageType] || messages.motivation;
    }
    async analyzeProductivity(userId) {
        const context = await this.getUserContext(userId);
        const completedTasks = context.tasks?.filter((t) => t.completed).length || 0;
        const totalTasks = context.tasks?.length || 0;
        const completionRate = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;
        const recentMood = context.moodHistory?.[0]?.mood || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        return this.generatePersonalizedMessage(userId, 'task_suggestion', `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ${completedTasks} –∏–∑ ${totalTasks} –∑–∞–¥–∞—á (${completionRate}%), —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${recentMood}, —Å—Ç—Ä–∏–∫: ${context.currentStreak} –¥–Ω–µ–π. –î–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.`);
    }
    async generateDailyMotivation(userId) {
        return this.generatePersonalizedMessage(userId, 'motivation', '–ú–æ—Ç–∏–≤–∏—Ä—É–π –º–µ–Ω—è –Ω–∞ –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å!');
    }
    async analyzeMoodPattern(userId) {
        return this.generatePersonalizedMessage(userId, 'mood_analysis', '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –¥–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.');
    }
};
exports.AiContextService = AiContextService;
exports.AiContextService = AiContextService = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [prisma_service_1.PrismaService,
        openai_service_1.OpenAIService])
], AiContextService);
//# sourceMappingURL=ai-context.service.js.map