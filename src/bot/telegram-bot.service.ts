import {
  Injectable,
  Logger,
  OnModuleInit,
  OnModuleDestroy,
} from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf, session } from 'telegraf';
import { User } from '@prisma/client';
import { BotContext } from './bot-context.interface';
import { UserService } from '../services/user.service';
import { OpenAIService } from '../services/openai.service';
import { TaskService } from '../services/task.service';
import { HabitService } from '../services/habit.service';
import { BillingService } from '../services/billing.service';
import { AiContextService } from '../services/ai-context.service';
import { PaymentService } from '../services/payment.service';

@Injectable()
export class TelegramBotService implements OnModuleInit, OnModuleDestroy {
  private readonly logger = new Logger(TelegramBotService.name);
  private bot: Telegraf<BotContext>;
  private activePomodoroSessions: Map<
    string,
    {
      focusTimer?: NodeJS.Timeout;
      breakTimer?: NodeJS.Timeout;
      startTime: Date;
    }
  > = new Map();

  constructor(
    private readonly configService: ConfigService,
    private readonly userService: UserService,
    private readonly openaiService: OpenAIService,
    private readonly taskService: TaskService,
    private readonly habitService: HabitService,
    private readonly billingService: BillingService,
    private readonly aiContextService: AiContextService,
    private readonly paymentService: PaymentService,
  ) {
    const token = this.configService.get<string>('bot.token');
    if (!token) {
      throw new Error('BOT_TOKEN is not provided');
    }

    this.bot = new Telegraf<BotContext>(token);
    this.setupMiddleware();
    this.setupHandlers();
  }

  private setupMiddleware() {
    // Session middleware
    this.bot.use(
      session({
        defaultSession: () => ({
          step: undefined,
          data: {},
          waitingForInput: false,
          currentAction: undefined,
          tempData: {},
        }),
      }),
    );

    // User context middleware
    this.bot.use(async (ctx, next) => {
      if (ctx.from) {
        ctx.userId = ctx.from.id.toString();

        // Ensure user exists in database
        const existingUser = await this.userService
          .findByTelegramId(ctx.from.id.toString())
          .catch(() => null);

        if (!existingUser) {
          // Create new user
          await this.userService.findOrCreateUser({
            id: ctx.from.id.toString(),
            username: ctx.from.username,
            firstName: ctx.from.first_name,
            lastName: ctx.from.last_name,
          });

          // Initialize trial period for new user
          await this.billingService.initializeTrialForUser(
            ctx.from.id.toString(),
          );
        }
      }

      // Add helper methods
      ctx.replyWithMarkdown = (text: string, extra: any = {}) => {
        return ctx.reply(text, { parse_mode: 'Markdown', ...extra });
      };

      ctx.editMessageTextWithMarkdown = (text: string, extra: any = {}) => {
        return ctx.editMessageText(text, { parse_mode: 'Markdown', ...extra });
      };

      return next();
    });
  }

  private setupHandlers() {
    // Start command
    this.bot.start(async (ctx) => {
      try {
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = {
          id: ctx.from?.id.toString() || ctx.userId,
          username: ctx.from?.username || undefined,
          firstName: ctx.from?.first_name || undefined,
          lastName: ctx.from?.last_name || undefined,
        };

        const user = await this.userService.findOrCreateUser(userData);

        this.logger.log(
          `User ${user.id} started bot. Onboarding passed: ${user.onboardingPassed}`,
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        if (!user.onboardingPassed) {
          this.logger.log(`Starting onboarding for user ${user.id}`);
          await this.startOnboarding(ctx);
        } else {
          this.logger.log(`Showing main menu for user ${user.id}`);
          await this.showMainMenu(ctx);
        }
      } catch (error) {
        this.logger.error('Error in start command:', error);
        await ctx.replyWithMarkdown(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        );
      }
    }); // Help command
    this.bot.help(async (ctx) => {
      await ctx.replyWithMarkdown(`
ü§ñ *DailyCheck Bot - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ
/tasks - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
/habits - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
/mood - –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
/focus - –°–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏

*–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*
üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É
üîÑ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
üòä –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
‚è∞ –°–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu
      `);
    });

    // Main menu command
    this.bot.command('menu', async (ctx) => {
      await this.showMainMenu(ctx);
    });

    // Tasks command
    this.bot.command('tasks', async (ctx) => {
      await this.showTasksMenu(ctx);
    });

    // Habits command
    this.bot.command('habits', async (ctx) => {
      await this.showHabitsMenu(ctx);
    });

    // Mood command
    this.bot.command('mood', async (ctx) => {
      await this.showMoodMenu(ctx);
    });

    // Focus command
    this.bot.command('focus', async (ctx) => {
      await this.showFocusSession(ctx);
    });

    // Help command
    this.bot.command('help', async (ctx) => {
      await ctx.replyWithMarkdown(`
ü§ñ *DailyCheck Bot - –°–ø—Ä–∞–≤–∫–∞*

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ
/tasks - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
/habits - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
/mood - –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
/focus - –°–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
üòä –¢—Ä–µ–∫–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
üçÖ –¢–µ—Ö–Ω–∏–∫–∞ –ü–æ–º–æ–¥–æ—Ä–æ –¥–ª—è —Ñ–æ–∫—É—Å–∞
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
üíé –°–∏—Å—Ç–µ–º–∞ –±–∏–ª–ª–∏–Ω–≥–∞ —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu
      `);
    });

    // Billing command
    this.bot.command('billing', async (ctx) => {
      // Redirect to show_limits handler
      const subscriptionStatus =
        await this.billingService.getSubscriptionStatus(ctx.userId);

      const limitsText =
        subscriptionStatus.limits.dailyReminders === -1
          ? '‚àû (–±–µ–∑–ª–∏–º–∏—Ç)'
          : subscriptionStatus.limits.dailyReminders.toString();
      const aiLimitsText =
        subscriptionStatus.limits.dailyAiQueries === -1
          ? '‚àû (–±–µ–∑–ª–∏–º–∏—Ç)'
          : subscriptionStatus.limits.dailyAiQueries.toString();

      let statusMessage = '';
      if (subscriptionStatus.isTrialActive) {
        statusMessage = `üéÅ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:** ${subscriptionStatus.daysRemaining} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å`;
      } else {
        statusMessage = `üíé **–ü–æ–¥–ø–∏—Å–∫–∞:** ${
          subscriptionStatus.type === 'FREE'
            ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è'
            : subscriptionStatus.type === 'PREMIUM'
              ? 'Premium'
              : 'Premium Plus'
        }`;
      }

      await ctx.replyWithMarkdown(
        `
üìä *–í–∞—à–∏ –ª–∏–º–∏—Ç—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ*

${statusMessage}

**–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:**
üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${subscriptionStatus.usage.dailyReminders}/${limitsText}
üß† –ò–ò-–∑–∞–ø—Ä–æ—Å—ã: ${subscriptionStatus.usage.dailyAiQueries}/${aiLimitsText}
üìù –ó–∞–¥–∞—á–∏: ${subscriptionStatus.usage.dailyTasks}/${subscriptionStatus.limits.dailyTasks === -1 ? '‚àû' : subscriptionStatus.limits.dailyTasks}
üîÑ –ü—Ä–∏–≤—ã—á–∫–∏: ${subscriptionStatus.usage.dailyHabits}/${subscriptionStatus.limits.dailyHabits === -1 ? '‚àû' : subscriptionStatus.limits.dailyHabits}

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: ${subscriptionStatus.limits.advancedAnalytics ? '‚úÖ' : '‚ùå'}
üé® –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–º—ã: ${subscriptionStatus.limits.customThemes ? '‚úÖ' : '‚ùå'}
üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: ${subscriptionStatus.limits.prioritySupport ? '‚úÖ' : '‚ùå'}
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Premium',
                  callback_data: 'upgrade_premium',
                },
              ],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });

    // Reset onboarding command (for testing)
    this.bot.command('reset_onboarding', async (ctx) => {
      try {
        await this.userService.updateUser(ctx.userId, {
          onboardingPassed: false,
        });
        await ctx.replyWithMarkdown(
          'üîÑ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ —Å–±—Ä–æ—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ.',
        );
        this.logger.log(`Onboarding reset for user ${ctx.userId}`);
      } catch (error) {
        this.logger.error('Error resetting onboarding:', error);
        await ctx.replyWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞.');
      }
    });

    // Onboarding callback handlers
    this.bot.action('onboarding_start', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showOnboardingStep2(ctx);
    });

    this.bot.action('onboarding_examples', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(`
üìã *–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ —è —É–º–µ—é:*

*–ó–∞–¥–∞—á–∏:*
‚Ä¢ "–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"
‚Ä¢ "–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é"
‚Ä¢ "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É"

*–ü—Ä–∏–≤—ã—á–∫–∏:*
‚Ä¢ "–ü–∏—Ç—å 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã"
‚Ä¢ "–î–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É"
‚Ä¢ "–ß–∏—Ç–∞—Ç—å 30 –º–∏–Ω—É—Ç"

*–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:*
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ —à–∫–∞–ª–µ 1-10
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      `);

      setTimeout(async () => {
        await this.showOnboardingStep2(ctx);
      }, 3000);
    });

    this.bot.action('onboarding_add_habit', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(`
‚úçÔ∏è *–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –ø–µ—Ä–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏.*

–ù–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ –ü–∏—Ç—å –≤–æ–¥—É –∫–∞–∂–¥—ã–π —á–∞—Å
‚Ä¢ –î–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É —É—Ç—Ä–æ–º
‚Ä¢ –ß–∏—Ç–∞—Ç—å –ø–µ—Ä–µ–¥ —Å–Ω–æ–º

*–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:*
      `);
      ctx.session.step = 'onboarding_waiting_habit';
    });

    this.bot.action('onboarding_skip_habit', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showOnboardingStep3(ctx);
    });

    this.bot.action('onboarding_complete', async (ctx) => {
      await ctx.answerCbQuery();

      try {
        // Mark onboarding as completed
        await this.userService.updateUser(ctx.userId, {
          onboardingPassed: true,
        });

        this.logger.log(`Onboarding completed for user ${ctx.userId}`);

        await ctx.replyWithMarkdown(`
üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!*

–¢–µ–ø–µ—Ä—å —Ç—ã –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Å DailyCheck AI!

üöÄ –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
        `);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        setTimeout(() => {
          this.showMainMenu(ctx);
        }, 2000);
      } catch (error) {
        this.logger.error('Error completing onboarding:', error);
        await ctx.replyWithMarkdown(
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        );
      }
    });

    // Handle text input during onboarding
    this.bot.on('text', async (ctx) => {
      const user = await this.getOrCreateUser(ctx);

      // Handle AI Chat mode
      if (ctx.session.aiChatMode) {
        await this.handleAIChatMessage(ctx, ctx.message.text);
        return;
      }

      // Check if user needs to provide timezone first
      if (
        !user.timezone &&
        (ctx.session.step === 'adding_task' ||
          ctx.session.step === 'adding_habit')
      ) {
        await this.askForTimezone(ctx);
        return;
      }

      // Handle timezone setting
      if (ctx.session.step === 'waiting_for_city') {
        await this.handleCityInput(ctx, ctx.message.text);
        return;
      }

      // Handle task creation
      if (ctx.session.step === 'waiting_for_task_title') {
        await this.handleTaskCreation(ctx, ctx.message.text);
        return;
      }

      // Handle custom feedback
      if (ctx.session.step === 'waiting_for_custom_feedback') {
        await this.completeFeedback(ctx, ctx.message.text);
        return;
      }

      // Handle custom dependency creation
      if (ctx.session.step === 'waiting_custom_dependency') {
        const dependencyName = ctx.message.text.trim();

        if (!dependencyName || dependencyName.length < 2) {
          await ctx.replyWithMarkdown(
            '‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
          );
          return;
        }

        ctx.session.step = undefined;

        await ctx.replyWithMarkdown(
          `
üéØ *–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –±–æ—Ä—å–±—É —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é: "${dependencyName}"*

ü§ñ –°–∏—Å—Ç–µ–º–∞ –ò–ò –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å.

ÔøΩ *–¢—ã —É–∂–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ —Å–≤–æ–±–æ–¥–µ!*

–ß—Ç–æ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç:
‚Ä¢ –ï–∂–µ—á–∞—Å–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –ò–ò
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç–≤–æ–∏—Ö —Ü–µ–ª—è—Ö
‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏–π

‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!*
        `,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
                    callback_data: 'choose_dependency',
                  },
                ],
              ],
            },
          },
        );

        // Here you would typically save the custom dependency to the database
        // and set up the hourly reminder job
        return;
      }

      // Handle waiting for reminder time
      if (ctx.session.waitingForReminderTime && ctx.session.pendingReminder) {
        await this.handleReminderTimeInput(ctx, ctx.message.text);
        return;
      }

      if (ctx.session.step === 'onboarding_waiting_habit') {
        const habitName = ctx.message.text;

        // Here you would typically save the habit to database
        // For now, just acknowledge and continue

        await ctx.replyWithMarkdown(`
‚úÖ *–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞: "${habitName}"*

–ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.

üéØ –ü—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É...
        `);

        setTimeout(async () => {
          await this.showOnboardingStep3(ctx);
        }, 2000);
        return;
      }

      // Handle regular habit creation
      if (ctx.session.step === 'adding_habit') {
        const habitTitle = ctx.message.text.trim();

        if (!habitTitle || habitTitle.length < 2) {
          await ctx.replyWithMarkdown(
            '‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
          );
          return;
        }

        try {
          // Create the habit using the habit service
          await this.habitService.createHabit({
            userId: ctx.userId,
            title: habitTitle,
            description: undefined,
            frequency: 'DAILY' as const,
            targetCount: 1,
          });

          ctx.session.step = undefined;

          await ctx.replyWithMarkdown(
            `
‚úÖ *–ü—Ä–∏–≤—ã—á–∫–∞ "${habitTitle}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*

üéØ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏".

*–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å - –∫–ª—é—á –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–∏–≤—ã—á–µ–∫!
          `,
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üîÑ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'menu_habits' }],
                  [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                ],
              },
            },
          );
        } catch (error) {
          this.logger.error(`Error creating habit: ${error}`);
          await ctx.replyWithMarkdown(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          );
        }
        return;
      }

      // Handle reminder requests in regular text mode
      if (this.isReminderRequest(ctx.message.text)) {
        await this.processReminderFromText(ctx, ctx.message.text);
        return;
      }

      // Skip if this is a command (starts with /)
      if (ctx.message.text.startsWith('/')) {
        return; // Let command handlers process it
      }

      // Default: show help or main menu
      await ctx.replyWithMarkdown(`
ü§î *–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É*

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.

üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å "–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ..." —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
      `);
    });

    // Handle voice messages
    this.bot.on('voice', async (ctx) => {
      await this.handleAudioMessage(ctx, 'voice');
    });

    // Handle audio files
    this.bot.on('audio', async (ctx) => {
      await this.handleAudioMessage(ctx, 'audio');
    });

    // Main menu callback handlers
    this.bot.action('menu_tasks', async (ctx) => {
      await ctx.answerCbQuery();

      const user = await this.userService.findByTelegramId(ctx.userId);
      if (!user.timezone) {
        ctx.session.step = 'adding_task';
        await this.askForTimezone(ctx);
      } else {
        await this.showTasksMenu(ctx);
      }
    });

    this.bot.action('menu_habits', async (ctx) => {
      await ctx.answerCbQuery();

      const user = await this.userService.findByTelegramId(ctx.userId);
      if (!user.timezone) {
        ctx.session.step = 'adding_habit';
        await this.askForTimezone(ctx);
      } else {
        await this.showHabitsMenu(ctx);
      }
    });

    this.bot.action('habits_list', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showHabitsMenu(ctx);
    });

    // Handle AI advice for habits
    this.bot.action('habits_ai_advice', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showHabitsAIAdvice(ctx);
    });

    // Handle adding habits
    this.bot.action('habits_add', async (ctx) => {
      await ctx.answerCbQuery();

      const user = await this.userService.findByTelegramId(ctx.userId);
      if (!user.timezone) {
        ctx.session.pendingAction = 'adding_habit';
        await this.askForTimezone(ctx);
      } else {
        ctx.session.step = 'adding_habit';
        await ctx.replyWithMarkdown(
          'üîÑ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      }
    });

    // Handle habit completion
    this.bot.action(/^habit_complete_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const habitId = ctx.match[1];
      await this.completeHabit(ctx, habitId);
    });

    // Handle showing more habits
    this.bot.action('habits_list_more', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showAllHabitsList(ctx);
    });

    this.bot.action('menu_mood', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showMoodMenu(ctx);
    });

    this.bot.action('menu_focus', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown('‚è∞ *–°–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    });

    this.bot.action('menu_stats', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown('üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    });

    this.bot.action('menu_settings', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown('‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    });

    this.bot.action('menu_achievements', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown('üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    });

    this.bot.action('menu_ai', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown('üí° *–ò–ò –ü–æ–º–æ—â–Ω–∏–∫* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    });

    // New main menu handlers
    this.bot.action('add_item', async (ctx) => {
      await ctx.answerCbQuery();
      const keyboard = {
        inline_keyboard: [
          [{ text: 'üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'tasks_add' }],
          [{ text: 'üîÑ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É', callback_data: 'habits_add' }],
          [{ text: 'üéôÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'voice_message' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }],
        ],
      };
      await ctx.replyWithMarkdown('‚ûï *–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?*', {
        reply_markup: keyboard,
      });
    });

    this.bot.action('voice_message', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `üéôÔ∏è *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*

–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∏–∫—Ç–æ–≤–∞—Ç—å:
‚Ä¢ üìù –ù–æ–≤—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
‚Ä¢ üîÑ –ù–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É
‚Ä¢ ‚ùì –õ—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã

–ü—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—à–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üé§`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'add_item' }],
            ],
          },
        },
      );
    });

    this.bot.action('my_items', async (ctx) => {
      await ctx.answerCbQuery();
      const keyboard = {
        inline_keyboard: [
          [{ text: 'üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'tasks_list' }],
          [{ text: 'üîÑ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'habits_list' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }],
        ],
      };
      await ctx.replyWithMarkdown('üìã *–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?*', {
        reply_markup: keyboard,
      });
    });

    this.bot.action('my_progress', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);
      const userStats = await this.userService.getUserStats(ctx.userId);

      // Calculate level progress
      const currentLevelXp = this.userService.getCurrentLevelXp(user);
      const nextLevelXp = this.userService.getNextLevelXp(user);
      const progressXp = this.userService.getProgressXp(user);
      const xpToNextLevel = this.userService.getXpToNextLevel(user);
      const progressRatio = this.userService.getLevelProgressRatio(user);

      // Create progress bar
      const progressBarLength = 10;
      const filledBars = Math.floor(progressRatio * progressBarLength);
      const emptyBars = progressBarLength - filledBars;
      const progressBar = '‚ñà'.repeat(filledBars) + '‚ñë'.repeat(emptyBars);

      await ctx.replyWithMarkdown(
        `
ÔøΩ *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å*

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
‚≠ê –û–ø—ã—Ç: ${user.totalXp} XP
üéñÔ∏è –£—Ä–æ–≤–µ–Ω—å: ${user.level}

ÔøΩüìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${user.totalTasks}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${user.completedTasks}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${userStats.completionRate}%

üéØ **–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è:**
\`${progressBar}\` ${Math.round(progressRatio * 100)}%
${progressXp}/${nextLevelXp - currentLevelXp} XP –¥–æ ${user.level + 1} —É—Ä–æ–≤–Ω—è

üìÖ **–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω:** ${user.createdAt.toLocaleDateString('ru-RU')}

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üöÄ
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üéØ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                  callback_data: 'progress_stats',
                },
                { text: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data: 'achievements' },
              ],
              [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });

    this.bot.action('ai_chat', async (ctx) => {
      await ctx.answerCbQuery();
      await this.startAIChat(ctx);
    });

    this.bot.action('more_functions', async (ctx) => {
      await ctx.answerCbQuery();
      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', callback_data: 'progress_stats' },
            { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'user_settings' },
          ],
          [
            { text: 'ü•á –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data: 'achievements' },
            { text: 'üöÄ –ß–µ–ª–ª–µ–Ω–¥–∂–∏', callback_data: 'challenges' },
          ],
          [
            {
              text: 'üí∞ –ë–æ–Ω—É—Å—ã –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã',
              callback_data: 'bonuses_referrals',
            },
            { text: 'ÔøΩÔ∏è –ú–∞–≥–∞–∑–∏–Ω', callback_data: 'shop' },
          ],
          [
            { text: 'üé≠ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏', callback_data: 'dependencies' },
            { text: 'üçÖ –§–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'pomodoro_focus' },
          ],
          [
            { text: 'üë§', callback_data: 'user_profile' },
            { text: '‚öôÔ∏è', callback_data: 'settings_menu' },
            { text: 'üè†', callback_data: 'back_to_menu' },
          ],
        ],
      };
      await ctx.replyWithMarkdown(
        `
üöÄ *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏*

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:
      `,
        {
          reply_markup: keyboard,
        },
      );
    });

    // Additional functions handlers
    this.bot.action('progress_stats', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);
      const userStats = await this.userService.getUserStats(ctx.userId);

      // Get today's date for progress display
      const today = new Date();
      const todayStr = today.toLocaleDateString('ru-RU');

      await ctx.replyWithMarkdown(
        `
üéØ *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üìä **–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚≠ê –û–ø—ã—Ç: ${user.totalXp} XP
üéñÔ∏è –£—Ä–æ–≤–µ–Ω—å: ${user.level}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.createdAt.toLocaleDateString('ru-RU')}

ÔøΩ **–ó–∞–¥–∞—á–∏:**
üìù –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: ${user.totalTasks}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${user.completedTasks}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${userStats.completionRate}%
üéØ –°–µ–≥–æ–¥–Ω—è: ${user.todayTasks}

üîÑ **–ü—Ä–∏–≤—ã—á–∫–∏:**
üí™ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: ${user.totalHabits}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${user.completedHabits}
ÔøΩ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${userStats.habitCompletionRate}%
üéØ –°–µ–≥–æ–¥–Ω—è: ${user.todayHabits}

üìà **–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:** ${todayStr}
${user.todayTasks > 0 || user.todayHabits > 0 ? 'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å!' : 'üî¥ –ü–æ–∫–∞ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'}

üéÆ **–°–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –∏–≥—Ä—ã!**
üåÖ –†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞ (–ø–æ–¥—ä–µ–º –¥–æ 7:00)
üèÉ –°–ø—Ä–∏–Ω—Ç–µ—Ä –∑–∞–¥–∞—á (–≤—ã–ø–æ–ª–Ω–∏—Ç—å 5 –∑–∞–¥–∞—á –ø–æ–¥—Ä—è–¥)  
üî• –°–µ—Ä–∏—è —É—Å–ø–µ—Ö–æ–≤ (–≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–Ω—è)
üéØ –°–Ω–∞–π–ø–µ—Ä —Ü–µ–ª–µ–π (–ø–æ–ø–∞—Å—Ç—å –≤ –¥–µ–¥–ª–∞–π–Ω)

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è XP! üöÄ
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üìä –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                  callback_data: 'my_progress',
                },
                { text: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data: 'achievements' },
              ],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    });

    this.bot.action('user_settings', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await ctx.replyWithMarkdown(
        `
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
üÜî ID: ${user.id}
üë§ –ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìß Username: ${user.username ? `@${user.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.notifications ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${user.reminderTime}
üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞: ${user.weeklySummary ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}

üé® **–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å:**
üé≠ –¢–µ–º–∞: ${user.theme}
‚ú® –ê–Ω–∏–º–∞—Ü–∏–∏: ${user.showAnimations ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã: ${user.voiceCommands ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}

ü§ñ **AI –∏ —Ä–µ–∂–∏–º—ã:**
üß† AI —Ä–µ–∂–∏–º: ${user.aiMode ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}
üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: ${user.dryMode ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}

üîí **–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:**
üëÅÔ∏è –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: ${user.privacyLevel}
üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üèôÔ∏è –ì–æ—Ä–æ–¥: ${user.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                  callback_data: 'settings_notifications',
                },
                { text: 'üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å', callback_data: 'settings_interface' },
              ],
              [
                { text: 'ü§ñ AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings_ai' },
                { text: 'üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å', callback_data: 'settings_privacy' },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    });

    // Settings handlers
    this.bot.action('settings_notifications', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await ctx.replyWithMarkdown(
        `
üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.notifications ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${user.reminderTime}
üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞: ${user.weeklySummary ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}
üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${user.dailyReminders ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: user.notifications
                    ? 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
                    : 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                  callback_data: 'toggle_notifications',
                },
              ],
              [
                {
                  text: '‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π',
                  callback_data: 'change_reminder_time',
                },
              ],
              [
                {
                  text: user.weeklySummary
                    ? 'üìä‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —Å–≤–æ–¥–∫—É'
                    : 'üìä‚úÖ –í–∫–ª—é—á–∏—Ç—å —Å–≤–æ–¥–∫—É',
                  callback_data: 'toggle_weekly_summary',
                },
              ],
              [
                {
                  text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
                  callback_data: 'user_settings',
                },
              ],
            ],
          },
        },
      );
    });

    this.bot.action('settings_interface', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await ctx.replyWithMarkdown(
        `
üé® *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞*

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
üé≠ –¢–µ–º–∞: ${user.theme}
‚ú® –ê–Ω–∏–º–∞—Ü–∏–∏: ${user.showAnimations ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã: ${user.voiceCommands ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: user.showAnimations
                    ? '‚ú®‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏'
                    : '‚ú®‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏',
                  callback_data: 'toggle_animations',
                },
              ],
              [
                {
                  text: user.voiceCommands
                    ? 'üéôÔ∏è‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å'
                    : 'üéôÔ∏è‚úÖ –í–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å',
                  callback_data: 'toggle_voice_commands',
                },
              ],
              [{ text: 'üé≠ –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', callback_data: 'change_theme' }],
              [
                {
                  text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
                  callback_data: 'user_settings',
                },
              ],
            ],
          },
        },
      );
    });

    this.bot.action('settings_ai', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await ctx.replyWithMarkdown(
        `
ü§ñ *AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
üß† AI —Ä–µ–∂–∏–º: ${user.aiMode ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}
üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: ${user.dryMode ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}

üí° AI —Ä–µ–∂–∏–º –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É –¥–∞–≤–∞—Ç—å —É–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: user.aiMode ? 'üß†‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å AI' : 'üß†‚úÖ –í–∫–ª—é—á–∏—Ç—å AI',
                  callback_data: 'toggle_ai_mode',
                },
              ],
              [
                {
                  text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
                  callback_data: 'user_settings',
                },
              ],
            ],
          },
        },
      );
    });

    this.bot.action('settings_privacy', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await ctx.replyWithMarkdown(
        `
üîí *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏*

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
üëÅÔ∏è –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: ${user.privacyLevel}
üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üèôÔ∏è –ì–æ—Ä–æ–¥: ${user.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üí° –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∏–¥–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üëÅÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å',
                  callback_data: 'change_privacy_level',
                },
              ],
              [
                {
                  text: 'üåç –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å',
                  callback_data: 'change_timezone',
                },
              ],
              [
                {
                  text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
                  callback_data: 'user_settings',
                },
              ],
            ],
          },
        },
      );
    });

    // Toggle handlers for settings
    this.bot.action('toggle_notifications', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await this.userService.updateUser(ctx.userId, {
        notifications: !user.notifications,
      });

      await ctx.editMessageTextWithMarkdown(
        `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${!user.notifications ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º',
                  callback_data: 'settings_notifications',
                },
              ],
            ],
          },
        },
      );
    });

    this.bot.action('toggle_weekly_summary', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await this.userService.updateUser(ctx.userId, {
        weeklySummary: !user.weeklySummary,
      });

      await ctx.editMessageTextWithMarkdown(
        `‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ ${!user.weeklySummary ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º',
                  callback_data: 'settings_notifications',
                },
              ],
            ],
          },
        },
      );
    });

    this.bot.action('toggle_animations', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await this.userService.updateUser(ctx.userId, {
        showAnimations: !user.showAnimations,
      });

      await ctx.editMessageTextWithMarkdown(
        `‚úÖ –ê–Ω–∏–º–∞—Ü–∏–∏ ${!user.showAnimations ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É',
                  callback_data: 'settings_interface',
                },
              ],
            ],
          },
        },
      );
    });

    this.bot.action('toggle_voice_commands', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await this.userService.updateUser(ctx.userId, {
        voiceCommands: !user.voiceCommands,
      });

      await ctx.editMessageTextWithMarkdown(
        `‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ${!user.voiceCommands ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É',
                  callback_data: 'settings_interface',
                },
              ],
            ],
          },
        },
      );
    });

    this.bot.action('toggle_ai_mode', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await this.userService.updateUser(ctx.userId, {
        aiMode: !user.aiMode,
      });

      await ctx.editMessageTextWithMarkdown(
        `‚úÖ AI —Ä–µ–∂–∏–º ${!user.aiMode ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
                  callback_data: 'settings_ai',
                },
              ],
            ],
          },
        },
      );
    });

    this.bot.action('achievements', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await ctx.replyWithMarkdown(
        `
ü•á *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*

**–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:**
üèÜ –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ - –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
‚≠ê –ù–æ–≤–∏—á–æ–∫ - –ü–æ–ª—É—á–∏—Ç—å 100 XP
üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç 3 –¥–Ω—è

**–í –ø—Ä–æ—Ü–µ—Å—Å–µ:**
 –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π - –í—ã–ø–æ–ª–Ω–∏—Ç—å 50 –∑–∞–¥–∞—á (${user.completedTasks}/50)
üöÄ –≠–Ω—Ç—É–∑–∏–∞—Å—Ç - –ü–æ–ª—É—á–∏—Ç—å 1000 XP (${user.totalXp}/1000)
üéØ –¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π - –°–æ–∑–¥–∞—Ç—å 20 –∑–∞–¥–∞—á (${user.totalTasks}/20)

**–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:**
‚ö° –ú–æ–ª–Ω–∏—è - –í—ã–ø–æ–ª–Ω–∏—Ç—å 10 –∑–∞–¥–∞—á –∑–∞ –¥–µ–Ω—å
üåü –õ–µ–≥–µ–Ω–¥–∞ - –ü–æ–ª—É—á–∏—Ç—å 10000 XP
üèÖ –ú–∞—Å—Ç–µ—Ä - –í—ã–ø–æ–ª–Ω–∏—Ç—å 200 –∑–∞–¥–∞—á

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π! üéâ
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    });

    this.bot.action('challenges', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
üöÄ *–ß–µ–ª–ª–µ–Ω–¥–∂–∏*

**–ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è:**
‚è∞ 7-–¥–Ω–µ–≤–Ω—ã–π –º–∞—Ä–∞—Ñ–æ–Ω –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
üìù –í—ã–ø–æ–ª–Ω–∏—Ç—å 21 –∑–∞–¥–∞—á—É –∑–∞ –Ω–µ–¥–µ–ª—é

**–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã:**
üåÖ –†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞ - 5 –∑–∞–¥–∞—á –¥–æ 10:00
üåô –ù–æ—á–Ω–∞—è —Å–æ–≤–∞ - 3 –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ 20:00
‚ö° –°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —Ä–µ–∂–∏–º - 10 –∑–∞–¥–∞—á –∑–∞ –¥–µ–Ω—å

**–ù–∞–≥—Ä–∞–¥—ã:**
üèÜ –ó–Ω–∞—á–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
‚≠ê –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ XP
üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

*–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —Å–∫–æ—Ä–æ –Ω–æ–≤—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏!*
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    });

    this.bot.action('bonuses_referrals', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
üí∞ *–ë–æ–Ω—É—Å—ã –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã*

**–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:**
üîó –í–∞—à –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: \`REF${ctx.userId.slice(-6)}\`
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: 0
üéÅ –ë–æ–Ω—É—Å –∑–∞ –¥—Ä—É–≥–∞: +500 XP

**–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã:**
üìÖ –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É: +50 XP
üéØ –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–Ω—è: +100 XP

**–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:**
üèÜ 7 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: +300 XP
‚≠ê 21 –∑–∞–¥–∞—á–∞ –≤ –Ω–µ–¥–µ–ª—é: +500 XP

**–ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞:**
1. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
2. –î—Ä—É–≥ –≤–≤–æ–¥–∏—Ç –∫–æ–¥ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏  
3. –í—ã –æ–±–∞ –ø–æ–ª—É—á–∞–µ—Ç–µ +500 XP!

*–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —Å–∫–æ—Ä–æ –ø–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫!*
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    });

    this.bot.action('user_profile', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await ctx.replyWithMarkdown(
        `
üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*

**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
üìõ –ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üÜî ID: ${user.id}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${user.createdAt.toLocaleDateString('ru-RU')}
üåç –ì–æ—Ä–æ–¥: ${user.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone || '–ù–µ —É–∫–∞–∑–∞–Ω'}

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚≠ê –û–±—â–∏–π –æ–ø—ã—Ç: ${user.totalXp} XP  
üéñÔ∏è –£—Ä–æ–≤–µ–Ω—å: ${user.level}
üìã –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: ${user.completedTasks}

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.notifications ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
üé® –¢–µ–º–∞: ${user.theme || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'}
ü§ñ –ò–ò-—Ä–µ–∂–∏–º: ${user.aiMode ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'edit_profile' },
                { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' },
              ],
            ],
          },
        },
      );
    });

    this.bot.action('settings_menu', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*

üöß *–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*

–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!

–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚Ä¢ üé® –¢–µ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
‚Ä¢ üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
‚Ä¢ ü§ñ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
‚Ä¢ üë§ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è
‚Ä¢ ÔøΩ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏

ÔøΩ –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π email –≤ –ø—Ä–æ—Ñ–∏–ª–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ.
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    });

    this.bot.action('shop', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await ctx.replyWithMarkdown(
        `
üõçÔ∏è *–ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π*

üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${user.totalXp} XP

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:**
‚ö° –ü—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç - 299‚ÇΩ/–º–µ—Å—è—Ü
üéØ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞  
üé® –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ç–µ–º—ã
ü§ñ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ò–ò

**–ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è:**
üé® –¢–µ–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ - –æ—Ç 99‚ÇΩ
üèÜ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–∫–∏ - –æ—Ç 49‚ÇΩ
‚ö° –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ - –æ—Ç 29‚ÇΩ

**–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è:**
üìà –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel - 199‚ÇΩ
üì± –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - 399‚ÇΩ
üîî Smart-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - 149‚ÇΩ

üí° **XP –ú–∞–≥–∞–∑–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∏–∂–µ!**
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚ú® XP –ú–∞–≥–∞–∑–∏–Ω', callback_data: 'xp_shop' },
                { text: 'üí≥ –ü—Ä–µ–º–∏—É–º', callback_data: 'premium_shop' },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    });

    // XP Shop handler
    this.bot.action('xp_shop', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await ctx.replyWithMarkdown(
        `
‚ú® *XP –ú–∞–≥–∞–∑–∏–Ω*

üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${user.totalXp} XP

**üé® –ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è:**
‚Ä¢ üé≠ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è —Ç–µ–º–∞ "–¢–µ–º–Ω–∞—è –º–∞—Ç–µ—Ä–∏—è" - 2000 XP
‚Ä¢ üèÜ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ "–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" - 1500 XP
‚Ä¢ ‚ö° –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ –Ω–∞–±–æ—Ä - 800 XP
‚Ä¢ üåü –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã - 1200 XP

**üöÄ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:**
‚Ä¢ üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - 3000 XP
‚Ä¢ üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á - 2500 XP
‚Ä¢ üîî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - 1800 XP
‚Ä¢ üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö - 2200 XP

–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ XP –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏! üí™
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üé≠ –¢–µ–º—ã (2000 XP)', callback_data: 'buy_theme_2000' },
                {
                  text: 'üèÜ –ó–Ω–∞—á–∫–∏ (1500 XP)',
                  callback_data: 'buy_badge_1500',
                },
              ],
              [
                { text: '‚ö° –≠–º–æ–¥–∑–∏ (800 XP)', callback_data: 'buy_emoji_800' },
                {
                  text: 'üåü –°—Ç–∏–∫–µ—Ä—ã (1200 XP)',
                  callback_data: 'buy_stickers_1200',
                },
              ],
              [
                {
                  text: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (3000 XP)',
                  callback_data: 'buy_stats_3000',
                },
                {
                  text: 'üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (2500 XP)',
                  callback_data: 'buy_categories_2500',
                },
              ],
              [
                {
                  text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (1800 XP)',
                  callback_data: 'buy_notifications_1800',
                },
                {
                  text: 'üìä –≠–∫—Å–ø–æ—Ä—Ç (2200 XP)',
                  callback_data: 'buy_export_2200',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω', callback_data: 'shop' }],
            ],
          },
        },
      );
    });

    // Premium shop handler
    this.bot.action('premium_shop', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
üí≥ *–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞*

**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Premium –∞–∫–∫–∞—É–Ω—Ç–∞:**
‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏
‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ AI
‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –∑–Ω–∞—á–∫–∏
‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏

**–¢–∞—Ä–∏—Ñ—ã:**
ü•à **–ë–∞–∑–æ–≤—ã–π** - 299‚ÇΩ/–º–µ—Å—è—Ü
ü•á **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π** - 499‚ÇΩ/–º–µ—Å—è—Ü  
üíé **–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π** - 799‚ÇΩ/–º–µ—Å—è—Ü

*–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã!*
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'ü•à –ë–∞–∑–æ–≤—ã–π', callback_data: 'premium_basic' },
                { text: 'ü•á –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', callback_data: 'premium_advanced' },
              ],
              [{ text: 'üíé –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π', callback_data: 'premium_pro' }],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω', callback_data: 'shop' }],
            ],
          },
        },
      );
    });

    // XP Purchase handlers
    this.bot.action('buy_theme_2000', async (ctx) => {
      await this.handleXPPurchase(
        ctx,
        'theme',
        2000,
        '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è —Ç–µ–º–∞ "–¢–µ–º–Ω–∞—è –º–∞—Ç–µ—Ä–∏—è"',
        'dark_matter',
      );
    });

    this.bot.action('buy_badge_1500', async (ctx) => {
      await this.handleXPPurchase(
        ctx,
        'badge',
        1500,
        '–ó–Ω–∞—á–æ–∫ "–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"',
        'productivity_master',
      );
    });

    this.bot.action('buy_emoji_800', async (ctx) => {
      await this.handleXPPurchase(
        ctx,
        'emoji',
        800,
        '–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ –Ω–∞–±–æ—Ä',
        'animated_emoji_pack',
      );
    });

    this.bot.action('buy_stickers_1200', async (ctx) => {
      await this.handleXPPurchase(
        ctx,
        'sticker',
        1200,
        '–ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã',
        'custom_stickers',
      );
    });

    this.bot.action('buy_stats_3000', async (ctx) => {
      await this.handleXPPurchase(
        ctx,
        'feature',
        3000,
        '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        'advanced_stats',
      );
    });

    this.bot.action('buy_categories_2500', async (ctx) => {
      await this.handleXPPurchase(
        ctx,
        'feature',
        2500,
        '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á',
        'extra_categories',
      );
    });

    this.bot.action('buy_notifications_1800', async (ctx) => {
      await this.handleXPPurchase(
        ctx,
        'feature',
        1800,
        '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        'personal_notifications',
      );
    });

    this.bot.action('buy_export_2200', async (ctx) => {
      await this.handleXPPurchase(
        ctx,
        'feature',
        2200,
        '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
        'data_export',
      );
    });

    // Billing handlers
    this.bot.action('show_limits', async (ctx) => {
      await ctx.answerCbQuery();
      const subscriptionStatus =
        await this.billingService.getSubscriptionStatus(ctx.userId);

      const limitsText =
        subscriptionStatus.limits.dailyReminders === -1
          ? '‚àû (–±–µ–∑–ª–∏–º–∏—Ç)'
          : subscriptionStatus.limits.dailyReminders.toString();
      const aiLimitsText =
        subscriptionStatus.limits.dailyAiQueries === -1
          ? '‚àû (–±–µ–∑–ª–∏–º–∏—Ç)'
          : subscriptionStatus.limits.dailyAiQueries.toString();

      let statusMessage = '';
      if (subscriptionStatus.isTrialActive) {
        statusMessage = `üéÅ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:** ${subscriptionStatus.daysRemaining} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å`;
      } else {
        statusMessage = `üíé **–ü–æ–¥–ø–∏—Å–∫–∞:** ${
          subscriptionStatus.type === 'FREE'
            ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è'
            : subscriptionStatus.type === 'PREMIUM'
              ? 'Premium'
              : 'Premium Plus'
        }`;
      }

      await ctx.replyWithMarkdown(
        `
üìä *–í–∞—à–∏ –ª–∏–º–∏—Ç—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ*

${statusMessage}

**–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:**
üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${subscriptionStatus.usage.dailyReminders}/${limitsText}
üß† –ò–ò-–∑–∞–ø—Ä–æ—Å—ã: ${subscriptionStatus.usage.dailyAiQueries}/${aiLimitsText}
üìù –ó–∞–¥–∞—á–∏: ${subscriptionStatus.usage.dailyTasks}/${subscriptionStatus.limits.dailyTasks === -1 ? '‚àû' : subscriptionStatus.limits.dailyTasks}
üîÑ –ü—Ä–∏–≤—ã—á–∫–∏: ${subscriptionStatus.usage.dailyHabits}/${subscriptionStatus.limits.dailyHabits === -1 ? '‚àû' : subscriptionStatus.limits.dailyHabits}

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: ${subscriptionStatus.limits.advancedAnalytics ? '‚úÖ' : '‚ùå'}
üé® –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–º—ã: ${subscriptionStatus.limits.customThemes ? '‚úÖ' : '‚ùå'}
üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: ${subscriptionStatus.limits.prioritySupport ? '‚úÖ' : '‚ùå'}
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Premium',
                  callback_data: 'upgrade_premium',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });

    this.bot.action('upgrade_premium', async (ctx) => {
      await ctx.answerCbQuery();
      const trialInfo = await this.billingService.getTrialInfo(ctx.userId);

      let trialText = '';
      if (trialInfo.isTrialActive) {
        trialText = `üéÅ **–£ –≤–∞—Å –µ—Å—Ç—å ${trialInfo.daysRemaining} –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞!**

`;
      }

      await ctx.replyWithMarkdown(
        `
üíé *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ Premium*

${trialText}**Premium –ø–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:**

üîî **50 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π** –≤ –¥–µ–Ω—å (—Å–µ–π—á–∞—Å 5)
üß† **100 –ò–ò-–∑–∞–ø—Ä–æ—Å–æ–≤** –≤ –¥–µ–Ω—å (—Å–µ–π—á–∞—Å 10)
üìù **100 –∑–∞–¥–∞—á** –≤ –¥–µ–Ω—å (—Å–µ–π—á–∞—Å 10)
üîÑ **20 –ø—Ä–∏–≤—ã—á–µ–∫** –≤ –¥–µ–Ω—å (—Å–µ–π—á–∞—Å 3)
üìä **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**
üé® **–ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–º—ã**
‚ö° **20 —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–π** –≤ –¥–µ–Ω—å

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** 299‚ÇΩ/–º–µ—Å—è—Ü

**Premium Plus** (–±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø–ª–∞–Ω):
‚àû **–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ** –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∑–∞–¥–∞—á–∏, –ø—Ä–∏–≤—ã—á–∫–∏
üöÄ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞**
üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** 599‚ÇΩ/–º–µ—Å—è—Ü

–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üíé Premium - 299‚ÇΩ', callback_data: 'buy_premium' },
                {
                  text: 'üöÄ Premium Plus - 599‚ÇΩ',
                  callback_data: 'buy_premium_plus',
                },
              ],
              [{ text: 'üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã', callback_data: 'show_limits' }],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });

    // Handle Premium purchase
    this.bot.action('buy_premium', async (ctx) => {
      await ctx.answerCbQuery();
      await this.createPayment(ctx, 'PREMIUM');
    });

    // Handle Premium Plus purchase
    this.bot.action('buy_premium_plus', async (ctx) => {
      await ctx.answerCbQuery();
      await this.createPayment(ctx, 'PREMIUM_PLUS');
    });

    // Handle payment status check
    this.bot.action(/^check_payment_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const paymentId = ctx.match[1];

      try {
        const status = await this.paymentService.checkPaymentStatus(paymentId);

        if (status === 'succeeded') {
          await ctx.replyWithMarkdown(
            '‚úÖ *–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.',
          );
        } else if (status === 'canceled') {
          await ctx.replyWithMarkdown(
            '‚ùå *–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞–Ω–æ–≤–æ.',
          );
        } else {
          await ctx.replyWithMarkdown(
            '‚è≥ *–ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.',
          );
        }
      } catch (error) {
        await ctx.replyWithMarkdown(
          '‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        );
      }
    });

    this.bot.action('dependencies', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
üé≠ *–ë–ª–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π*

**–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ –±–∞–∑–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —á—Ç–æ–±—ã —Ç—ã —Å–º–æ–≥ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å—Å—è –æ—Ç –ª—é–±–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.**

      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üéØ –í—ã–±—Ä–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å',
                  callback_data: 'choose_dependency',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    });

    this.bot.action('choose_dependency', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
üéØ *–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å*

**–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:**
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üö≠ –ö—É—Ä–µ–Ω–∏–µ', callback_data: 'dep_smoking' },
                { text: 'üç∫ –ê–ª–∫–æ–≥–æ–ª—å', callback_data: 'dep_alcohol' },
              ],
              [
                { text: 'üì± –°–æ—Ü—Å–µ—Ç–∏', callback_data: 'dep_social' },
                { text: 'üéÆ –ò–≥—Ä—ã', callback_data: 'dep_gaming' },
              ],
              [
                { text: 'üõí –ü–æ–∫—É–ø–∫–∏', callback_data: 'dep_shopping' },
                { text: 'üç∞ –°–ª–∞–¥–∫–æ–µ', callback_data: 'dep_sweets' },
              ],
              [{ text: '‚úçÔ∏è –°–≤–æ—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å', callback_data: 'dep_custom' }],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'dependencies' }],
            ],
          },
        },
      );
    });

    // Dependency tracking handlers
    ['smoking', 'alcohol', 'social', 'gaming', 'shopping', 'sweets'].forEach(
      (type) => {
        this.bot.action(`dep_${type}`, async (ctx) => {
          await ctx.answerCbQuery();

          const dependencyName =
            type === 'smoking'
              ? '–∫—É—Ä–µ–Ω–∏—è'
              : type === 'alcohol'
                ? '–∞–ª–∫–æ–≥–æ–ª—è'
                : type === 'social'
                  ? '—Å–æ—Ü—Å–µ—Ç–µ–π'
                  : type === 'gaming'
                    ? '–∏–≥—Ä'
                    : type === 'shopping'
                      ? '–ø–æ–∫—É–ø–æ–∫'
                      : '—Å–ª–∞–¥–∫–æ–≥–æ';

          await ctx.replyWithMarkdown(
            `
üéØ *–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –±–æ—Ä—å–±—É —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç ${dependencyName}*

ü§ñ –°–∏—Å—Ç–µ–º–∞ –ò–ò –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å.

üí™ *–¢—ã —É–∂–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ —Å–≤–æ–±–æ–¥–µ!*

–ß—Ç–æ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç:
‚Ä¢ –ï–∂–µ—á–∞—Å–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –ò–ò
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç–≤–æ–∏—Ö —Ü–µ–ª—è—Ö
‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏–π

        `,
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: 'üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
                      callback_data: `setup_reminders_${type}`,
                    },
                  ],
                  [
                    {
                      text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                      callback_data: 'choose_dependency',
                    },
                  ],
                ],
              },
            },
          );
        });
      },
    );

    // Custom dependency handler
    this.bot.action('dep_custom', async (ctx) => {
      await ctx.answerCbQuery();
      ctx.session.step = 'waiting_custom_dependency';
      await ctx.replyWithMarkdown(
        `
‚úçÔ∏è *–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏*

–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–±–∞–≤–∏—Ç—å—Å—è:

*–ù–∞–ø—Ä–∏–º–µ—Ä:* "–ü–µ—Ä–µ–µ–¥–∞–Ω–∏–µ", "–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è", "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º—ã—Å–ª–∏" –∏ —Ç.–¥.
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'choose_dependency' }],
            ],
          },
        },
      );
    });

    // Setup reminders for dependencies
    ['smoking', 'alcohol', 'social', 'gaming', 'shopping', 'sweets'].forEach(
      (type) => {
        this.bot.action(`setup_reminders_${type}`, async (ctx) => {
          await ctx.answerCbQuery();

          const dependencyName =
            type === 'smoking'
              ? '–∫—É—Ä–µ–Ω–∏—è'
              : type === 'alcohol'
                ? '–∞–ª–∫–æ–≥–æ–ª—è'
                : type === 'social'
                  ? '—Å–æ—Ü—Å–µ—Ç–µ–π'
                  : type === 'gaming'
                    ? '–∏–≥—Ä'
                    : type === 'shopping'
                      ? '–ø–æ–∫—É–ø–æ–∫'
                      : '—Å–ª–∞–¥–∫–æ–≥–æ';

          await ctx.replyWithMarkdown(
            `
üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: **${dependencyName}**

ü§ñ –ò–ò –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å —Å 8:00 –¥–æ 22:00

üí™ –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –≤–∞—à—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∏ –≤–∫–ª—é—á–∞—Ç—å:
‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∞—à–∏—Ö —Ü–µ–ª—è—Ö

‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!*
          `,
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: '‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
                      callback_data: 'choose_dependency',
                    },
                  ],
                ],
              },
            },
          );

          // Here you would typically save the dependency info to the database
          // and set up the hourly reminder job
        });
      },
    );

    // Pomodoro Focus handler
    this.bot.action('pomodoro_focus', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
üçÖ *–¢–µ—Ö–Ω–∏–∫–∞ –ü–æ–º–æ–¥–æ—Ä–æ*

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
‚è∞ 25 –º–∏–Ω—É—Ç —Ñ–æ–∫—É—Å–∞ –Ω–∞ –∑–∞–¥–∞—á–µ
‚òï 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö
üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å 4 —Ä–∞–∑–∞
üèñÔ∏è –ë–æ–ª—å—à–æ–π –ø–µ—Ä–µ—Ä—ã–≤ 15-30 –º–∏–Ω—É—Ç

**–í–∞—à–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:**
üéØ –°–µ—Å—Å–∏–π —Å–µ–≥–æ–¥–Ω—è: 0
‚ö° –û–±—â–µ–µ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: 0 –º–∏–Ω
üìà –õ—É—á—à–∏–π –¥–µ–Ω—å: 0 —Å–µ—Å—Å–∏–π

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚è±Ô∏è –í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: 25 –º–∏–Ω
‚òï –í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞: 5 –º–∏–Ω
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–∫–ª—é—á–µ–Ω—ã
üéµ –§–æ–Ω–æ–≤—ã–µ –∑–≤—É–∫–∏: –≤—ã–∫–ª—é—á–µ–Ω—ã

*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üöÄ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é',
                  callback_data: 'start_pomodoro_session',
                },
              ],
              [
                {
                  text: 'üìä –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–π',
                  callback_data: 'pomodoro_history',
                },
                {
                  text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                  callback_data: 'pomodoro_settings',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    });

    // Pomodoro session handlers
    this.bot.action('start_pomodoro_session', async (ctx) => {
      await ctx.answerCbQuery();

      const user = await this.getOrCreateUser(ctx);

      // Check if user needs to provide timezone first
      if (!user.timezone) {
        await this.askForTimezone(ctx);
        return;
      }

      const startTime = new Date();
      const endTime = new Date(startTime.getTime() + 25 * 60 * 1000);

      // Format time according to user's timezone
      const endTimeFormatted = this.formatTimeWithTimezone(
        endTime,
        user.timezone,
      );

      await ctx.replyWithMarkdown(
        `
üçÖ *–°–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞ –∑–∞–ø—É—â–µ–Ω–∞!*

‚è∞ **–¢–∞–π–º–µ—Ä**: 25 –º–∏–Ω—É—Ç (–¥–æ ${endTimeFormatted})
üéØ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ
üì± –£–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
üí™ –†–∞–±–æ—Ç–∞–π—Ç–µ –¥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

üîî **–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 25 –º–∏–Ω—É—Ç**

*–£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã! üí™*
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '‚è∏Ô∏è –ü–∞—É–∑–∞',
                  callback_data: 'pause_pomodoro',
                },
                {
                  text: '‚èπÔ∏è –°—Ç–æ–ø',
                  callback_data: 'stop_pomodoro',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
            ],
          },
        },
      );

      // Clear any existing session for this user
      const existingSession = this.activePomodoroSessions.get(ctx.userId);
      if (existingSession) {
        if (existingSession.focusTimer)
          clearTimeout(existingSession.focusTimer);
        if (existingSession.breakTimer)
          clearTimeout(existingSession.breakTimer);
      }

      // Start new 25-minute focus timer
      const focusTimer = setTimeout(
        async () => {
          try {
            await ctx.replyWithMarkdown(`
üîî *–í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å!*

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–ª–∏ 25 –º–∏–Ω—É—Ç.

‚òï –í—Ä–µ–º—è –¥–ª—è 5-–º–∏–Ω—É—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞:
‚Ä¢ –í—Å—Ç–∞–Ω—å—Ç–µ –∏ —Ä–∞–∑–æ–º–Ω–∏—Ç–µ—Å—å
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –æ–∫–Ω–æ
‚Ä¢ –í—ã–ø–µ–π—Ç–µ –≤–æ–¥—ã
‚Ä¢ –ù–µ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–æ—Ü—Å–µ—Ç–∏!

‚è∞ –ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.
          `);

            // Start 5-minute break timer
            const breakTimer = setTimeout(
              async () => {
                try {
                  await ctx.replyWithMarkdown(
                    `
‚è∞ *–ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!*

üçÖ 5-–º–∏–Ω—É—Ç–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω. –ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏ —Ñ–æ–∫—É—Å–∞?

üí™ –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª:
‚Ä¢ 25 –º–∏–Ω—É—Ç —Ñ–æ–∫—É—Å–∞
‚Ä¢ 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞  
‚Ä¢ –ü–æ—Å–ª–µ 4 —Ü–∏–∫–ª–æ–≤ - –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ 15-30 –º–∏–Ω—É—Ç

üéØ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?
              `,
                    {
                      reply_markup: {
                        inline_keyboard: [
                          [
                            {
                              text: 'üöÄ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é',
                              callback_data: 'start_pomodoro_session',
                            },
                          ],
                          [
                            {
                              text: 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
                              callback_data: 'pomodoro_history',
                            },
                          ],
                          [
                            {
                              text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                              callback_data: 'pomodoro_focus',
                            },
                          ],
                        ],
                      },
                    },
                  );

                  // Remove session from active sessions after break completes
                  this.activePomodoroSessions.delete(ctx.userId);
                } catch (error) {
                  console.log(
                    'Failed to send break completion message:',
                    error,
                  );
                }
              },
              5 * 60 * 1000,
            ); // 5 minutes break

            // Update session with break timer
            const session = this.activePomodoroSessions.get(ctx.userId);
            if (session) {
              session.breakTimer = breakTimer;
            }
          } catch (error) {
            console.log('Failed to send pomodoro completion message:', error);
          }
        },
        25 * 60 * 1000,
      ); // 25 minutes = 1500000 milliseconds

      // Save the session with timers
      this.activePomodoroSessions.set(ctx.userId, {
        focusTimer,
        startTime,
      });
    });

    this.bot.action('pause_pomodoro', async (ctx) => {
      await ctx.answerCbQuery();

      const session = this.activePomodoroSessions.get(ctx.userId);
      if (session) {
        // Calculate remaining time
        const elapsed = Math.floor(
          (new Date().getTime() - session.startTime.getTime()) / (1000 * 60),
        );
        const remaining = Math.max(0, 25 - elapsed);
        const remainingMinutes = remaining;
        const remainingSeconds = Math.max(
          0,
          Math.floor(
            (25 * 60 * 1000 -
              (new Date().getTime() - session.startTime.getTime())) /
              1000,
          ) % 60,
        );

        await ctx.replyWithMarkdown(
          `
‚è∏Ô∏è *–°–µ—Å—Å–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞*

‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: ${remainingMinutes}:${remainingSeconds.toString().padStart(2, '0')}
‚ö° –ü—Ä–æ—à–ª–æ: ${elapsed} –º–∏–Ω
üéØ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ

*–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?*
          `,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                    callback_data: 'resume_pomodoro',
                  },
                  {
                    text: '‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å',
                    callback_data: 'stop_pomodoro',
                  },
                ],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
              ],
            },
          },
        );
      } else {
        await ctx.replyWithMarkdown(`
‚ö†Ô∏è *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏*

–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–∞—É–∑—ã.
        `);
      }
    });

    this.bot.action('resume_pomodoro', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(`
‚ñ∂Ô∏è *–°–µ—Å—Å–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞*

‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å 15:30
üéØ –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –∑–∞–¥–∞—á–µ!
      `);
    });

    this.bot.action('stop_pomodoro', async (ctx) => {
      await ctx.answerCbQuery();

      // Stop any active timers for this user
      const session = this.activePomodoroSessions.get(ctx.userId);
      if (session) {
        if (session.focusTimer) clearTimeout(session.focusTimer);
        if (session.breakTimer) clearTimeout(session.breakTimer);

        // Calculate elapsed time
        const elapsed = Math.floor(
          (new Date().getTime() - session.startTime.getTime()) / (1000 * 60),
        );
        const elapsedMinutes = elapsed % 60;
        const elapsedHours = Math.floor(elapsed / 60);
        const timeText =
          elapsedHours > 0
            ? `${elapsedHours}:${elapsedMinutes.toString().padStart(2, '0')}`
            : `${elapsedMinutes}:${(((new Date().getTime() - session.startTime.getTime()) % 60000) / 1000).toFixed(0).padStart(2, '0')}`;

        this.activePomodoroSessions.delete(ctx.userId);

        await ctx.replyWithMarkdown(
          `
‚èπÔ∏è *–°–µ—Å—Å–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞*

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${timeText} –∏–∑ 25:00
üìù –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ —É—Å–ø–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?

*–°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:*
          `,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üìù –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å',
                    callback_data: 'log_pomodoro_progress',
                  },
                ],
                [
                  {
                    text: 'üçÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è',
                    callback_data: 'start_pomodoro_session',
                  },
                  {
                    text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                    callback_data: 'pomodoro_history',
                  },
                ],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
              ],
            },
          },
        );
      } else {
        // No active session
        await ctx.replyWithMarkdown(
          `
‚ö†Ô∏è *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏*

–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Ñ–æ–∫—É—Å–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.

*–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é?*
          `,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üöÄ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é',
                    callback_data: 'start_pomodoro_session',
                  },
                ],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
              ],
            },
          },
        );
      }
    });

    this.bot.action('pomodoro_history', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
üìä *–ò—Å—Ç–æ—Ä–∏—è —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–π*

**–°–µ–≥–æ–¥–Ω—è (19.08.2025):**
üçÖ –°–µ—Å—Å–∏–π: 0
‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è: 0 –º–∏–Ω
üéØ –ó–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ: 0

**–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:**
üìÖ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: 0
üìà –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: 0
üèÜ –õ—É—á—à–∏–π –¥–µ–Ω—å: 0 —Å–µ—Å—Å–∏–π

**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üéØ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: 0
‚ö° –û–±—â–µ–µ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: 0 —á
üìö –°–∞–º–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞—è –Ω–µ–¥–µ–ª—è: 0 —Å–µ—Å—Å–∏–π

*–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è!*
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üìà –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞',
                  callback_data: 'pomodoro_chart',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
            ],
          },
        },
      );
    });

    this.bot.action('pomodoro_settings', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ü–æ–º–æ–¥–æ—Ä–æ*

**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚è±Ô∏è –í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: 25 –º–∏–Ω
‚òï –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤: 5 –º–∏–Ω
üèñÔ∏è –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤: 15 –º–∏–Ω
üî¢ –°–µ—Å—Å–∏–π –¥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞: 4

**–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
üîî –ó–≤—É–∫–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã: ‚úÖ
üì± Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ
‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö: ‚úÖ

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**
üéµ –§–æ–Ω–æ–≤—ã–µ –∑–≤—É–∫–∏: ‚ùå
üìä –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ‚úÖ
üéØ –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ —Å–µ—Å—Å–∏–µ–π: ‚ùå

*–§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!*
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è',
                  callback_data: 'change_pomodoro_time',
                },
              ],
              [
                {
                  text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                  callback_data: 'pomodoro_notifications',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
            ],
          },
        },
      );
    });

    // Additional Pomodoro handlers
    this.bot.action('log_pomodoro_progress', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
üìù *–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å*

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:30 –∏–∑ 25:00
üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 38%

*–ß—Ç–æ –≤—ã —É—Å–ø–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?*
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üìö –ò–∑—É—á–µ–Ω–∏–µ',
                  callback_data: 'progress_studying',
                },
                {
                  text: 'üíª –†–∞–±–æ—Ç–∞',
                  callback_data: 'progress_work',
                },
              ],
              [
                {
                  text: 'üìù –ù–∞–ø–∏—Å–∞–Ω–∏–µ',
                  callback_data: 'progress_writing',
                },
                {
                  text: 'üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ',
                  callback_data: 'progress_creative',
                },
              ],
              [
                {
                  text: '‚úèÔ∏è –î—Ä—É–≥–æ–µ',
                  callback_data: 'progress_custom',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
            ],
          },
        },
      );
    });

    this.bot.action('pomodoro_chart', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(`
üìà *–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞*

üöß *–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*

–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:
üìä –ì—Ä–∞—Ñ–∏–∫ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–π –ø–æ –¥–Ω—è–º
üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
üéØ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á
‚è∞ –õ—É—á—à–∏–µ —á–∞—Å—ã –¥–ª—è —Ñ–æ–∫—É—Å–∞

üìß –í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø—É—Å–∫!
      `);
    });

    this.bot.action('change_pomodoro_time', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
‚è±Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏*

**–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞:**
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '15 –º–∏–Ω', callback_data: 'set_focus_15' },
                { text: '25 –º–∏–Ω ‚úÖ', callback_data: 'set_focus_25' },
                { text: '30 –º–∏–Ω', callback_data: 'set_focus_30' },
              ],
              [
                { text: '45 –º–∏–Ω', callback_data: 'set_focus_45' },
                { text: '60 –º–∏–Ω', callback_data: 'set_focus_60' },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_settings' }],
            ],
          },
        },
      );
    });

    this.bot.action('pomodoro_notifications', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
üîä –ó–≤—É–∫–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã: ‚úÖ
üì± Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ
‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö: ‚úÖ
üéµ –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞: ‚ùå

*–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!*
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_settings' }],
            ],
          },
        },
      );
    });

    // Handle AI tips for focus
    this.bot.action('focus_ai_tips', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showFocusAITips(ctx);
    });

    // Progress category handlers
    ['studying', 'work', 'writing', 'creative', 'custom'].forEach(
      (category) => {
        this.bot.action(`progress_${category}`, async (ctx) => {
          await ctx.answerCbQuery();
          await ctx.replyWithMarkdown(`
‚úÖ *–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!*

üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${
            category === 'studying'
              ? '–ò–∑—É—á–µ–Ω–∏–µ'
              : category === 'work'
                ? '–†–∞–±–æ—Ç–∞'
                : category === 'writing'
                  ? '–ù–∞–ø–∏—Å–∞–Ω–∏–µ'
                  : category === 'creative'
                    ? '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ'
                    : '–î—Ä—É–≥–æ–µ'
          }
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:30

üéØ +10 XP –∑–∞ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é!
üìà –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —É—á—Ç–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.
          `);
        });
      },
    );

    // Focus time setting handlers
    [15, 25, 30, 45, 60].forEach((minutes) => {
      this.bot.action(`set_focus_${minutes}`, async (ctx) => {
        await ctx.answerCbQuery();
        await ctx.replyWithMarkdown(`
‚è±Ô∏è *–í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–æ*

–ù–æ–≤–æ–µ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: ${minutes} –º–∏–Ω—É—Ç
–í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞: ${minutes <= 25 ? 5 : 10} –º–∏–Ω—É—Ç

‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!
        `);
      });
    });

    // Mood handlers
    ['excellent', 'good', 'neutral', 'sad', 'angry', 'anxious'].forEach(
      (mood) => {
        this.bot.action(`mood_${mood}`, async (ctx) => {
          await ctx.answerCbQuery();

          const moodEmoji = {
            excellent: 'üòÑ',
            good: 'üòä',
            neutral: 'üòê',
            sad: 'üòî',
            angry: 'üò§',
            anxious: 'üò∞',
          }[mood];

          const moodText = {
            excellent: '–æ—Ç–ª–∏—á–Ω–æ–µ',
            good: '—Ö–æ—Ä–æ—à–µ–µ',
            neutral: '–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ',
            sad: '–≥—Ä—É—Å—Ç–Ω–æ–µ',
            angry: '–∑–ª–æ–µ',
            anxious: '—Ç—Ä–µ–≤–æ–∂–Ω–æ–µ',
          }[mood];

          await ctx.replyWithMarkdown(
            `
${moodEmoji} *–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ!*

–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: **${moodText}**
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!

*–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –≤–∞—à–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.*
        `,
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: 'üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
                      callback_data: 'mood_stats',
                    },
                  ],
                  [
                    {
                      text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                      callback_data: 'back_to_menu',
                    },
                  ],
                ],
              },
            },
          );
        });
      },
    );

    // Handle AI analysis for mood
    this.bot.action('mood_ai_analysis', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showMoodAIAnalysis(ctx);
    });

    this.bot.action('mood_stats', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è*

**–°–µ–≥–æ–¥–Ω—è:** üòä (—Ö–æ—Ä–æ—à–µ–µ)
**–ó–∞ –Ω–µ–¥–µ–ª—é:** –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ 7/10
**–ó–∞ –º–µ—Å—è—Ü:** –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ 6.5/10

**–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:**
üòä –•–æ—Ä–æ—à–µ–µ - 45%
üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ - 30% 
üòÑ –û—Ç–ª–∏—á–Ω–æ–µ - 25%

üìà *–§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!*
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é', callback_data: 'menu_mood' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });

    this.bot.action('faq_support', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(`
‚ùì *FAQ / –ü–æ–¥–¥–µ—Ä–∂–∫–∞*

*–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*

**–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É?**
–ù–∞–∂–º–∏—Ç–µ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É/–ø—Ä–∏–≤—ã—á–∫—É" ‚Üí "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"

**–ö–∞–∫ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ?**
–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏" –∏ –Ω–∞–∂–º–∏—Ç–µ ‚úÖ —Ä—è–¥–æ–º —Å –∑–∞–¥–∞—á–µ–π

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ XP?**
–ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ–ø—ã—Ç –∏ –ø–æ–≤—ã—à–∞–µ—Ç–µ —É—Ä–æ–≤–µ–Ω—å

**–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?**
–ù–∞–ø–∏—à–∏—Ç–µ /feedback –¥–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
      `);
    });

    this.bot.action('add_habit_direct', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        'üîÑ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
      );
    });

    this.bot.action('back_to_menu', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showMainMenu(ctx);
    });

    // AI Chat handlers
    this.bot.action('ai_analyze_profile', async (ctx) => {
      await this.handleAIAnalyzeProfile(ctx);
    });

    this.bot.action('ai_task_recommendations', async (ctx) => {
      await this.handleAITaskRecommendations(ctx);
    });

    this.bot.action('ai_habit_help', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
üéØ *–ü–æ–º–æ—â—å —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏*

–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥—É—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
            ],
          },
        },
      );
    });

    this.bot.action('ai_time_planning', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
‚è∞ *–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏*

–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏.
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
            ],
          },
        },
      );
    });

    this.bot.action('ai_custom_question', async (ctx) => {
      await this.handleAICustomQuestion(ctx);
    });

    this.bot.action('ai_back_menu', async (ctx) => {
      await ctx.answerCbQuery();
      await this.startAIChat(ctx);
    });

    this.bot.action('exit_ai_chat', async (ctx) => {
      await ctx.answerCbQuery();
      ctx.session.aiChatMode = false;
      await ctx.replyWithMarkdown(`
‚úÖ *–ß–∞—Ç —Å –ò–ò –∑–∞–≤–µ—Ä—à—ë–Ω*

–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—â–µ–Ω–∏–µ! –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
      `);
      await this.showMainMenu(ctx);
    });

    // Task management handlers
    this.bot.action('tasks_add', async (ctx) => {
      await ctx.answerCbQuery();
      await this.startAddingTask(ctx);
    });

    this.bot.action('tasks_list', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showTasksList(ctx);
    });

    this.bot.action('tasks_list_more', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showAllTasksList(ctx);
    });

    this.bot.action('tasks_today', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showTodayTasks(ctx);
    });

    // Handle AI advice for tasks
    this.bot.action('tasks_ai_advice', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showTasksAIAdvice(ctx);
    });

    // Handle task completion
    this.bot.action(/^task_complete_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const taskId = ctx.match[1];
      await this.completeTask(ctx, taskId);
    });

    // Handle back to tasks menu
    this.bot.action('back_to_tasks', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showTasksMenu(ctx);
    });

    // Handle back to main menu
    this.bot.action('back_to_main', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showMainMenu(ctx);
    });

    // Feedback system handlers
    this.bot.command('feedback', async (ctx) => {
      await this.showFeedbackSurvey(ctx);
    });

    this.bot.action(/^feedback_rating_(\d+)$/, async (ctx) => {
      const rating = parseInt(ctx.match[1]);
      await this.handleFeedbackRating(ctx, rating);
    });

    this.bot.action(/^feedback_like_(.+)$/, async (ctx) => {
      const feature = ctx.match[1];

      // For /feedback command, complete survey immediately
      if (!ctx.session.feedbackRating) {
        await this.completeFeedbackSurvey(ctx, feature);
      } else {
        // For automatic feedback request, show improvement options
        await this.handleFeedbackImprovement(ctx, feature);
      }
    });

    this.bot.action(/^feedback_improve_(.+)$/, async (ctx) => {
      const improvement = ctx.match[1];
      if (improvement === 'custom') {
        await ctx.answerCbQuery();
        await ctx.replyWithMarkdown(`
üìù *–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —É–ª—É—á—à–∏—Ç—å:*

–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è...
        `);
        ctx.session.step = 'waiting_for_custom_feedback';
      } else {
        // Check if this is from /feedback command (no rating) or automatic request (with rating)
        if (ctx.session.feedbackRating) {
          await this.completeFeedback(ctx, improvement);
        } else {
          await this.completeFeedbackSurvey(ctx, improvement);
        }
      }
    });

    this.bot.action('feedback_later', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(`
üïê *–•–æ—Ä–æ—à–æ, —Å–ø—Ä–æ—Å–∏–º –ø–æ–∑–∂–µ!*

–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∫–æ–º–∞–Ω–¥–æ–π /feedback
      `);
    });

    // Timezone setup handlers
    this.bot.action(/^confirm_timezone_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const timezone = ctx.match[1];
      await this.confirmTimezone(ctx, timezone);
    });

    this.bot.action('manual_timezone', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showManualTimezoneSelection(ctx);
    });

    this.bot.action('input_city', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(`
üèôÔ∏è *–í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞*

üìç –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:
(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù—å—é-–ô–æ—Ä–∫, –õ–æ–Ω–¥–æ–Ω, –ê—Å—Ç–∞–Ω–∞)
      `);
      ctx.session.step = 'waiting_for_city';
    });

    this.bot.action('select_timezone', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showTimezoneList(ctx);
    });

    // Error handling
    this.bot.catch((err, ctx) => {
      this.logger.error(`Bot error for ${ctx.updateType}:`, err);
      ctx.reply(
        'üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
      );
    });
  }

  async onModuleInit() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    this.launch().catch((error) => {
      this.logger.error('Failed to launch bot:', error);
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    this.startMotivationalMessagesService();
  }

  private startMotivationalMessagesService() {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–π —á–∞—Å —Å 8:00 –¥–æ 22:00
    setInterval(
      async () => {
        const currentHour = new Date().getHours();

        // –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å 8:00 –¥–æ 22:00
        if (currentHour >= 8 && currentHour <= 22) {
          await this.sendMotivationalMessages();
        }
      },
      60 * 60 * 1000,
    ); // –∫–∞–∂–¥—ã–π —á–∞—Å

    this.logger.log('Motivational messages service started');
  }

  private async sendMotivationalMessages() {
    try {
      // –ó–¥–µ—Å—å –≤—ã –±—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
      // –ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

      // const usersWithDependencies = await this.getUsersWithActiveDependencies();
      //
      // for (const user of usersWithDependencies) {
      //   const motivationalMessage = await this.generateMotivationalMessage(user.dependency);
      //   await this.bot.telegram.sendMessage(user.telegramId, motivationalMessage, {
      //     parse_mode: 'Markdown'
      //   });
      // }

      this.logger.log('Motivational messages sent');
    } catch (error) {
      this.logger.error('Error sending motivational messages:', error);
    }
  }

  private async generateMotivationalMessage(
    dependencyType: string,
  ): Promise<string> {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    const messages = {
      smoking: [
        'üö≠ *–ö–∞–∂–¥–∞—è –º–∏–Ω—É—Ç–∞ –±–µ–∑ —Å–∏–≥–∞—Ä–µ—Ç—ã - —ç—Ç–æ –ø–æ–±–µ–¥–∞!* –¢–≤–æ–∏ –ª–µ–≥–∫–∏–µ —É–∂–µ –Ω–∞—á–∏–Ω–∞—é—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è.',
        'üí™ *–¢—ã —Å–∏–ª—å–Ω–µ–µ —Å–≤–æ–∏—Ö –∂–µ–ª–∞–Ω–∏–π!* –ü–æ–º–Ω–∏, –∑–∞—á–µ–º —Ç—ã –Ω–∞—á–∞–ª —ç—Ç–æ—Ç –ø—É—Ç—å.',
        'üåü *–î–µ–Ω—å –∑–∞ –¥–Ω–µ–º —Ç—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —Å–≤–æ–±–æ–¥–Ω–µ–µ!* –ì–æ—Ä–¥–∏—Å—å —Å–≤–æ–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏.',
      ],
      alcohol: [
        'üçÉ *–¢—Ä–µ–∑–≤—ã–π —É–º - —è—Å–Ω—ã–µ —Ü–µ–ª–∏!* –¢—ã –¥–µ–ª–∞–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.',
        'üíé *–¢–≤–æ—è —Å–∏–ª–∞ –≤–æ–ª–∏ –¥–æ—Ä–æ–∂–µ –ª—é–±–æ–π –ø—Ä–∏–≤—ã—á–∫–∏!* –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.',
        'üåÖ *–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –±–µ–∑ –ø–æ—Ö–º–µ–ª—å—è - –ø–æ–¥–∞—Ä–æ–∫ —Å–µ–±–µ!* –¶–µ–Ω–∏ —ç—Ç—É —Å–≤–æ–±–æ–¥—É.',
      ],
      default: [
        'üéØ *–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!* –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —Ü–µ–ª–∏.',
        'üí™ *–¢–≤–æ—è —Å–∏–ª–∞ –≤–æ–ª–∏ —Ä–∞—Å—Ç–µ—Ç —Å –∫–∞–∂–¥—ã–º –¥–Ω–µ–º!* –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è.',
        'üåü *–ü–æ–º–Ω–∏, –∑–∞—á–µ–º —Ç—ã –Ω–∞—á–∞–ª!* –¢–≤–æ–∏ —Ü–µ–ª–∏ —Å—Ç–æ—è—Ç –≤—Å–µ—Ö —É—Å–∏–ª–∏–π.',
      ],
    };

    const messageArray = messages[dependencyType] || messages.default;
    return messageArray[Math.floor(Math.random() * messageArray.length)];
  }

  async onModuleDestroy() {
    await this.stop();
  }

  private async startOnboarding(ctx: BotContext) {
    // Step 1: Welcome
    await this.showOnboardingStep1(ctx);
  }

  private async showOnboardingStep1(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üöÄ –ù–∞—á–∞—Ç—å', callback_data: 'onboarding_start' },
          {
            text: 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã',
            callback_data: 'onboarding_examples',
          },
        ],
      ],
    };

    await ctx.replyWithMarkdown(
      `ü§ñ *–ü—Ä–∏–≤–µ—Ç! –Ø Ticky AI ‚Äî —Ç–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º –∏ –∑–∞–¥–∞—á–∞–º —Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π.*`,
      { reply_markup: keyboard },
    );

    ctx.session.step = 'onboarding_welcome';
  }

  private async showOnboardingStep2(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [
          {
            text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É',
            callback_data: 'onboarding_add_habit',
          },
          { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'onboarding_skip_habit' },
        ],
      ],
    };

    await ctx.replyWithMarkdown(
      `
üöÄ *–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç*

–î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º —Ç–≤–æ—é –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É!
–ù–∞–ø—Ä–∏–º–µ—Ä: "–ü–∏—Ç—å –≤–æ–¥—É"

*–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:*
    `,
      { reply_markup: keyboard },
    );

    ctx.session.step = 'onboarding_quick_start';
  }

  private async showOnboardingStep3(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [{ text: '‚úÖ –ü–æ–Ω—è—Ç–Ω–æ!', callback_data: 'onboarding_complete' }],
      ],
    };

    await ctx.replyWithMarkdown(
      `
üìö *–ú–∏–Ω–∏-FAQ*

*–ß–¢–û –£–ú–ï–ï–¢ –ë–û–¢?*

‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏
‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
‚Ä¢ –í–æ–≤–ª–µ–∫–∞—Ç—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∏
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö

üéØ –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å?
    `,
      { reply_markup: keyboard },
    );

    ctx.session.step = 'onboarding_faq';
  }

  private async showMainMenu(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É/–ø—Ä–∏–≤—ã—á–∫—É', callback_data: 'add_item' }],
        [{ text: 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'my_items' }],
        [
          { text: 'üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', callback_data: 'my_progress' },
          { text: 'üß† –ß–∞—Ç —Å –ò–ò', callback_data: 'ai_chat' },
        ],
        [
          { text: '‚öôÔ∏è –ï—â—ë —Ñ—É–Ω–∫—Ü–∏–∏', callback_data: 'more_functions' },
          { text: '‚ùì FAQ / –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'faq_support' },
        ],
        [{ text: 'üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã', callback_data: 'show_limits' }],
      ],
    };

    const user = await this.getOrCreateUser(ctx);
    const trialInfo = await this.billingService.getTrialInfo(ctx.userId);
    const subscriptionStatus = await this.billingService.getSubscriptionStatus(
      ctx.userId,
    );

    let statusText = '';
    if (trialInfo.isTrialActive) {
      statusText = `üéÅ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:** ${trialInfo.daysRemaining} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å\n`;
    } else if (subscriptionStatus.type !== 'FREE') {
      statusText = `üíé **${subscriptionStatus.type === 'PREMIUM' ? 'Premium' : 'Premium Plus'}**\n`;
    }

    await ctx.replyWithMarkdown(
      `
üëã *–ü—Ä–∏–≤–µ—Ç, ${this.userService.getDisplayName(user)}!*

${statusText}ü§ñ –Ø DailyCheck Bot - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏.
    `,
      { reply_markup: keyboard },
    );

    // Check if we should show feedback request
    setTimeout(() => this.checkAndShowFeedbackRequest(ctx), 2000);
  }

  async launch() {
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞
      await this.bot.telegram.setMyCommands([
        { command: 'start', description: 'üé¨ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
        { command: 'menu', description: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },
        { command: 'tasks', description: 'üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏' },
        { command: 'habits', description: 'üîÑ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏' },
        { command: 'mood', description: 'üòä –î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è' },
        { command: 'focus', description: 'üçÖ –†–µ–∂–∏–º —Ñ–æ–∫—É—Å–∞' },
        { command: 'billing', description: 'üíé –ú–æ–∏ –ª–∏–º–∏—Ç—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∞' },
        { command: 'feedback', description: 'üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å' },
        { command: 'help', description: 'üÜò –°–ø—Ä–∞–≤–∫–∞' },
      ]);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
      this.bot
        .launch()
        .then(() => {
          this.logger.log('üöÄ Telegram bot launched successfully');
        })
        .catch((error) => {
          this.logger.error('‚ùå Failed to launch Telegram bot:', error);
        });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
      this.logger.log('ü§ñ Telegram bot launch initiated');
    } catch (error) {
      this.logger.error('‚ùå Error during bot initialization:', error);
      throw error;
    }
  }

  async stop() {
    // Clear all active Pomodoro timers before stopping
    for (const [userId, session] of this.activePomodoroSessions.entries()) {
      if (session.focusTimer) clearTimeout(session.focusTimer);
      if (session.breakTimer) clearTimeout(session.breakTimer);
    }
    this.activePomodoroSessions.clear();

    this.bot.stop('SIGINT');
    this.logger.log('üõë Telegram bot stopped');
  }

  getBotInstance(): Telegraf<BotContext> {
    return this.bot;
  }

  // Task management methods
  private async showTasksMenu(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'tasks_add' },
          { text: 'üìã –í—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'tasks_list' },
        ],
        [{ text: 'üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data: 'tasks_today' }],
        [{ text: 'ü§ñ AI-—Å–æ–≤–µ—Ç –ø–æ –∑–∞–¥–∞—á–∞–º', callback_data: 'tasks_ai_advice' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_main' }],
      ],
    };

    await ctx.replyWithMarkdown(
      `
üìù *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    `,
      { reply_markup: keyboard },
    );
  }

  private async startAddingTask(ctx: BotContext) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏
    const user = await this.userService.findByTelegramId(ctx.userId);
    if (!user.timezone) {
      ctx.session.pendingAction = 'adding_task';
      await this.askForTimezone(ctx);
      return;
    }

    // Check billing limits for tasks
    const limitCheck = await this.billingService.checkUsageLimit(
      ctx.userId,
      'dailyTasks',
    );

    if (!limitCheck.allowed) {
      await ctx.replyWithMarkdown(
        limitCheck.message || 'üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–¥–∞—á',
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Premium',
                  callback_data: 'upgrade_premium',
                },
              ],
              [{ text: 'üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã', callback_data: 'show_limits' }],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_tasks' }],
            ],
          },
        },
      );
      return;
    }

    await ctx.replyWithMarkdown(`
‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏*

üìä **–ó–∞–¥–∞—á —Å–µ–≥–æ–¥–Ω—è:** ${limitCheck.current}/${limitCheck.limit === -1 ? '‚àû' : limitCheck.limit}

üìù –ù–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ —Å–∫–∞–∂–∏—Ç–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:
    `);

    ctx.session.step = 'waiting_for_task_title';
  }

  private async handleTaskCreation(ctx: BotContext, taskTitle: string) {
    try {
      const task = await this.taskService.createTask({
        userId: ctx.userId,
        title: taskTitle.trim(),
        description: '',
        priority: 'MEDIUM' as any,
      });

      // Increment daily tasks counter
      await this.billingService.incrementUsage(ctx.userId, 'dailyTasks');

      // Get current user stats to increment
      const user = await this.userService.findByTelegramId(ctx.userId);
      await this.userService.updateUserStats(ctx.userId, {
        totalTasks: user.totalTasks + 1,
      });

      // Get current usage for display
      const usageInfo = await this.billingService.checkUsageLimit(
        ctx.userId,
        'dailyTasks',
      );

      await ctx.replyWithMarkdown(`
‚úÖ *–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!*

üìù *${task.title}*
‚ö° XP –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${task.xpReward}
üìä **–ó–∞–¥–∞—á —Å–µ–≥–æ–¥–Ω—è:** ${usageInfo.current}/${usageInfo.limit === -1 ? '‚àû' : usageInfo.limit}

–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫!
      `);

      ctx.session.step = undefined;
      setTimeout(() => this.showTasksMenu(ctx), 1500);
    } catch (error) {
      this.logger.error('Error creating task:', error);
      await ctx.replyWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
      `);
      ctx.session.step = undefined;
    }
  }

  private async showTasksList(ctx: BotContext) {
    try {
      const tasks = await this.taskService.findTasksByUserId(ctx.userId);

      if (tasks.length === 0) {
        await ctx.replyWithMarkdown(`
üìã *–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç*

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!
        `);
        return;
      }

      const pendingTasks = tasks.filter(
        (task) => task.status === 'PENDING' || task.status === 'IN_PROGRESS',
      );
      const completedTasks = tasks.filter(
        (task) => task.status === 'COMPLETED',
      );

      let message = `üìã *–í–∞—à–∏ –∑–∞–¥–∞—á–∏:*\n\n`;
      message += `üîÑ **–ê–∫—Ç–∏–≤–Ω—ã—Ö:** ${pendingTasks.length}\n`;
      message += `‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö:** ${completedTasks.length}\n\n`;
      message += `*–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:*`;

      // Create keyboard with task completion buttons
      const keyboard = {
        inline_keyboard: [
          ...pendingTasks.slice(0, 8).map((task) => [
            {
              text: `${this.getPriorityEmoji(task.priority)} ${task.title.substring(0, 30)}${task.title.length > 30 ? '...' : ''} (${task.xpReward} XP)`,
              callback_data: `task_complete_${task.id}`,
            },
          ]),
          ...(pendingTasks.length > 8
            ? [
                [
                  {
                    text: `... –∏ –µ—â–µ ${pendingTasks.length - 8} –∑–∞–¥–∞—á`,
                    callback_data: 'tasks_list_more',
                  },
                ],
              ]
            : []),
          [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º', callback_data: 'back_to_tasks' }],
        ],
      };

      await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
    } catch (error) {
      this.logger.error('Error showing tasks list:', error);
      await ctx.replyWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á');
    }
  }

  private async showAllTasksList(ctx: BotContext) {
    try {
      const tasks = await this.taskService.findTasksByUserId(ctx.userId);

      const pendingTasks = tasks.filter(
        (task) => task.status === 'PENDING' || task.status === 'IN_PROGRESS',
      );

      if (pendingTasks.length === 0) {
        await ctx.replyWithMarkdown(`
üìã *–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏*

–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! üéâ
        `);
        return;
      }

      let message = `üìã *–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (${pendingTasks.length}):*\n\n`;
      message += `*–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:*`;

      // Create keyboard with all pending tasks
      const keyboard = {
        inline_keyboard: [
          ...pendingTasks.map((task) => [
            {
              text: `${this.getPriorityEmoji(task.priority)} ${task.title.substring(0, 35)}${task.title.length > 35 ? '...' : ''} (${task.xpReward} XP)`,
              callback_data: `task_complete_${task.id}`,
            },
          ]),
          [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º', callback_data: 'back_to_tasks' }],
        ],
      };

      await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
    } catch (error) {
      this.logger.error('Error showing all tasks list:', error);
      await ctx.replyWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á');
    }
  }

  private async showTodayTasks(ctx: BotContext) {
    try {
      const tasks = await this.taskService.getTodayTasks(ctx.userId);

      if (tasks.length === 0) {
        await ctx.replyWithMarkdown(`
üìÖ *–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*

–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç! üéâ
        `);
        return;
      }

      const pendingTasks = tasks.filter((task) => task.status !== 'COMPLETED');
      const completedTasks = tasks.filter(
        (task) => task.status === 'COMPLETED',
      );

      let message = `üìÖ *–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n`;
      message += `üîÑ **–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é:** ${pendingTasks.length}\n`;
      message += `‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–æ:** ${completedTasks.length}\n\n`;
      message += `*–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:*`;

      const keyboard = {
        inline_keyboard: [
          ...pendingTasks.map((task) => [
            {
              text: `${this.getPriorityEmoji(task.priority)} ${task.title.substring(0, 30)}${task.title.length > 30 ? '...' : ''} (${task.xpReward} XP)`,
              callback_data: `task_complete_${task.id}`,
            },
          ]),
          [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º', callback_data: 'back_to_tasks' }],
        ],
      };

      await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
    } catch (error) {
      this.logger.error('Error showing today tasks:', error);
      await ctx.replyWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è');
    }
  }

  private async completeTask(ctx: BotContext, taskId: string) {
    try {
      const result = await this.taskService.completeTask(taskId, ctx.userId);

      // Get current user stats to increment and check level up
      const userBefore = await this.userService.findByTelegramId(ctx.userId);
      const newTotalXp = userBefore.totalXp + result.xpGained;

      await this.userService.updateUserStats(ctx.userId, {
        completedTasks: userBefore.completedTasks + 1,
        todayTasks: userBefore.todayTasks + 1,
        xpGained: result.xpGained,
      });

      // Get updated user to check for level up
      const userAfter = await this.userService.findByTelegramId(ctx.userId);
      const leveledUp = userAfter.level > userBefore.level;

      let message = `
üéâ *–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*

‚úÖ ${result.task.title}
üéØ –ü–æ–ª—É—á–µ–Ω–æ XP: +${result.xpGained}
`;

      if (leveledUp) {
        message += `
üéä *–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –ù–û–í–´–ô –£–†–û–í–ï–ù–¨!*
‚≠ê –£—Ä–æ–≤–µ–Ω—å: ${userAfter.level} (–±—ã–ª–æ: ${userBefore.level})
üèÜ –û–±—â–∏–π XP: ${userAfter.totalXp}
`;
      } else {
        const xpToNext = this.userService.getXpToNextLevel(userAfter);
        const progress = this.userService.getLevelProgressRatio(userAfter);
        const progressBar = this.createProgressBar(progress);

        message += `
üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è:
${progressBar} ${Math.round(progress * 100)}%
üéØ –û—Å—Ç–∞–ª–æ—Å—å XP –¥–æ —É—Ä–æ–≤–Ω—è ${userAfter.level + 1}: ${xpToNext}
`;
      }

      message += '\n–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üëè';

      await ctx.replyWithMarkdown(message);

      setTimeout(() => this.showTasksMenu(ctx), leveledUp ? 3000 : 2000);
    } catch (error) {
      this.logger.error('Error completing task:', error);
      if (error.message.includes('already completed')) {
        await ctx.replyWithMarkdown('‚ÑπÔ∏è –≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!');
      } else {
        await ctx.replyWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
      }
    }
  }

  private getPriorityEmoji(priority: string): string {
    switch (priority) {
      case 'URGENT':
        return 'üî¥';
      case 'HIGH':
        return 'üü†';
      case 'MEDIUM':
        return 'üü°';
      case 'LOW':
        return 'üü¢';
      default:
        return '‚ö™';
    }
  }

  private async askForTimezone(ctx: BotContext) {
    // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ IP
    await ctx.replyWithMarkdown('üîç *–û–ø—Ä–µ–¥–µ–ª—è—é –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å...*');

    try {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å IP –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é
      const ipTimezone = await this.detectTimezoneByIP();

      if (ipTimezone) {
        await ctx.replyWithMarkdown(
          `
üåç *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å*

üèôÔ∏è –†–µ–≥–∏–æ–Ω: ${ipTimezone.city || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${ipTimezone.timezone}

–í—Å–µ –≤–µ—Ä–Ω–æ?`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '‚úÖ –î–∞, –≤–µ—Ä–Ω–æ',
                    callback_data: `confirm_timezone_${ipTimezone.timezone}`,
                  },
                  {
                    text: '‚ùå –ù–µ—Ç, –≤—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é',
                    callback_data: 'manual_timezone',
                  },
                ],
              ],
            },
          },
        );
        return;
      }
    } catch (error) {
      this.logger.warn('Could not detect timezone by IP:', error);
    }

    // –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä
    await this.showManualTimezoneSelection(ctx);
  }

  private async showManualTimezoneSelection(ctx: BotContext) {
    await ctx.replyWithMarkdown(
      `
üåç *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞*

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–±:`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üèôÔ∏è –í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥', callback_data: 'input_city' },
              {
                text: 'üïê –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞',
                callback_data: 'select_timezone',
              },
            ],
          ],
        },
      },
    );
  }

  private async detectTimezoneByIP(): Promise<{
    timezone: string;
    city?: string;
  } | null> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –ø–æ IP
      const fetch = (await import('node-fetch')).default;
      const response = await fetch('http://worldtimeapi.org/api/ip');

      if (!response.ok) {
        return null;
      }

      const data = await response.json();

      return {
        timezone: data.timezone,
        city: data.timezone.split('/')[1]?.replace(/_/g, ' '),
      };
    } catch (error) {
      this.logger.warn('Error detecting timezone by IP:', error);
      return null;
    }
  }

  private async handleCityInput(ctx: BotContext, cityName: string) {
    await ctx.replyWithMarkdown('üîç *–û–ø—Ä–µ–¥–µ–ª—è—é —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å...*');

    const result = await this.openaiService.getTimezoneByCity(cityName);

    if (!result) {
      await ctx.replyWithMarkdown(`
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –≥–æ—Ä–æ–¥–∞ "${cityName}"*

üìç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ:
      `);
      return;
    }

    // Save timezone and city to database
    await this.userService.updateUser(ctx.userId, {
      timezone: result.timezone,
      city: result.normalizedCity,
    });

    await ctx.replyWithMarkdown(`
‚úÖ *–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!*

üèôÔ∏è –ì–æ—Ä–æ–¥: ${result.normalizedCity}
üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${result.timezone}

–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∏!
    `);

    // Reset session step
    ctx.session.step = undefined;

    // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–º –¥–µ–π—Å—Ç–≤–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç–µ–ª —Å–¥–µ–ª–∞—Ç—å
    if (ctx.session.pendingAction === 'adding_task') {
      ctx.session.pendingAction = undefined;
      await this.startAddingTask(ctx);
    } else if (ctx.session.pendingAction === 'adding_habit') {
      ctx.session.pendingAction = undefined;
      ctx.session.step = 'adding_habit';
      await ctx.replyWithMarkdown(
        'üîÑ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    } else {
      await this.showMainMenu(ctx);
    }
  }

  // Gamification helpers
  private createProgressBar(progress: number, length: number = 10): string {
    const filled = Math.round(progress * length);
    const empty = length - filled;
    return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
  }

  // Feedback system methods
  private async checkAndShowFeedbackRequest(ctx: BotContext) {
    const user = await this.userService.findByTelegramId(ctx.userId);
    const accountAge = Date.now() - user.createdAt.getTime();
    const threeDaysInMs = 3 * 24 * 60 * 60 * 1000;

    // Show feedback request after 3 days
    if (accountAge >= threeDaysInMs && !user.feedbackGiven) {
      await this.showFeedbackRequest(ctx);
    }
  }

  private async showFeedbackSurvey(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üéØ –£–¥–æ–±—Å—Ç–≤–æ', callback_data: 'feedback_like_convenience' },
          { text: 'üöÄ –ú–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π', callback_data: 'feedback_like_features' },
        ],
        [
          {
            text: 'üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è',
            callback_data: 'feedback_like_gamification',
          },
          { text: 'üîß –î—Ä—É–≥–æ–µ', callback_data: 'feedback_like_other' },
        ],
      ],
    };

    await ctx.replyWithMarkdown(
      `
üí≠ *–ú–∏–Ω–∏-–æ–ø—Ä–æ—Å*

üëç *–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è?*

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤ –±–æ—Ç–µ:
      `,
      { reply_markup: keyboard },
    );
  }

  private async showFeedbackRequest(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚≠êÔ∏è', callback_data: 'feedback_rating_5' },
          { text: 'üòä', callback_data: 'feedback_rating_4' },
          { text: 'üòê', callback_data: 'feedback_rating_3' },
          { text: 'üò†', callback_data: 'feedback_rating_2' },
        ],
        [{ text: '‚è∞ –ü–æ–∑–∂–µ', callback_data: 'feedback_later' }],
      ],
    };

    await ctx.replyWithMarkdown(
      `
üí≠ *–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞*

–ö–∞–∫ –≤–∞–º —Ä–∞–±–æ—Ç–∞ —Å Ticky AI? –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ!
      `,
      { reply_markup: keyboard },
    );
  }

  private async handleFeedbackRating(ctx: BotContext, rating: number) {
    await ctx.answerCbQuery();

    ctx.session.feedbackRating = rating;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üéØ –£–¥–æ–±—Å—Ç–≤–æ', callback_data: 'feedback_like_convenience' },
          { text: 'üöÄ –ú–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π', callback_data: 'feedback_like_features' },
        ],
        [
          {
            text: 'üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è',
            callback_data: 'feedback_like_gamification',
          },
          { text: 'üîß –î—Ä—É–≥–æ–µ', callback_data: 'feedback_like_other' },
        ],
      ],
    };

    await ctx.replyWithMarkdown(
      `
üëç *–ß—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è?*

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤ –±–æ—Ç–µ:
      `,
      { reply_markup: keyboard },
    );
  }

  private async handleFeedbackImprovement(
    ctx: BotContext,
    likedFeature: string,
  ) {
    await ctx.answerCbQuery();

    ctx.session.feedbackLiked = likedFeature;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üîß –ë–æ–ª—å—à–µ —Ñ—É–Ω–∫—Ü–∏–π',
            callback_data: 'feedback_improve_features',
          },
          { text: 'üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å', callback_data: 'feedback_improve_interface' },
        ],
        [
          {
            text: '‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã',
            callback_data: 'feedback_improve_speed',
          },
          {
            text: 'üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ',
            callback_data: 'feedback_improve_custom',
          },
        ],
        [
          {
            text: '‚úÖ –í—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç',
            callback_data: 'feedback_improve_nothing',
          },
        ],
      ],
    };

    await ctx.replyWithMarkdown(
      `
üí° *–ß—Ç–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —É–ª—É—á—à–∏—Ç—å?*

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ:
      `,
      { reply_markup: keyboard },
    );
  }

  private async completeFeedbackSurvey(ctx: BotContext, improvement: string) {
    await ctx.answerCbQuery();

    // Save feedback to database (survey-only, no rating)
    await this.userService.updateUser(ctx.userId, {
      feedbackGiven: true,
    });

    // Prepare improvement text
    const improvements = {
      convenience: 'üéØ –£–¥–æ–±—Å—Ç–≤–æ',
      features: 'üöÄ –ú–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π',
      gamification: 'üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è',
      other: 'üîß –î—Ä—É–≥–æ–µ',
    };

    const improvementText = improvements[improvement] || improvement;

    await ctx.replyWithMarkdown(`
‚ú® *–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ!*

–í—ã –≤—ã–±—Ä–∞–ª–∏: ${improvementText}

–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üíù

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö —Ü–µ–ª–µ–π! üöÄ
    `);
  }

  private async completeFeedback(ctx: BotContext, improvement: string) {
    await ctx.answerCbQuery();

    // Save feedback to database
    await this.userService.updateUser(ctx.userId, {
      feedbackGiven: true,
    });

    const ratingEmojis = ['üò†', 'üò†', 'üòê', 'üòä', '‚≠êÔ∏è'];
    const rating = ctx.session.feedbackRating || 3;
    const ratingEmoji = ratingEmojis[rating - 1];

    await ctx.replyWithMarkdown(`
üôè *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!*

${ratingEmoji} –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: ${rating}/5
üëç –ù—Ä–∞–≤–∏—Ç—Å—è: ${ctx.session.feedbackLiked || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üí° –£–ª—É—á—à–∏—Ç—å: ${improvement}

–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å! üíö
    `);

    // Clear feedback session data
    ctx.session.feedbackRating = undefined;
    ctx.session.feedbackLiked = undefined;
  }

  private async startAIChat(ctx: BotContext) {
    await ctx.replyWithMarkdown(
      `
üß† *–ò–ò –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*

–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. 

–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –≥–æ—Ç–æ–≤ –¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ:
üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–¥–∞—á–∞–º–∏
üîÑ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–∏–≤—ã—á–µ–∫  
‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏
üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–µ–π
üìä –ü–æ–≤—ã—à–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

*–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:*
    `,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üìä –ê–Ω–∞–ª–∏–∑ –º–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è',
                callback_data: 'ai_analyze_profile',
              },
            ],
            [
              {
                text: 'üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞—á–∞–º',
                callback_data: 'ai_task_recommendations',
              },
            ],
            [
              {
                text: 'üéØ –ü–æ–º–æ—â—å —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏',
                callback_data: 'ai_habit_help',
              },
            ],
            [
              {
                text: '‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏',
                callback_data: 'ai_time_planning',
              },
            ],
            [
              {
                text: '‚úçÔ∏è –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å',
                callback_data: 'ai_custom_question',
              },
            ],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      },
    );

    // Set AI chat mode
    ctx.session.aiChatMode = true;
  }

  private async handleAIAnalyzeProfile(ctx: BotContext) {
    await ctx.answerCbQuery();

    const user = await this.userService.findByTelegramId(ctx.userId);
    const tasks = await this.taskService.findTasksByUserId(ctx.userId);

    // Create profile analysis prompt
    const profileData = {
      totalXp: user.totalXp,
      level: user.level,
      accountAge: Math.floor(
        (Date.now() - user.createdAt.getTime()) / (1000 * 60 * 60 * 24),
      ),
      totalTasks: tasks.length,
      completedTasks: tasks.filter((task) => task.completedAt !== null).length,
      timezone: user.timezone,
      city: user.city,
    };

    const analysisPrompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- –û–ø—ã—Ç: ${profileData.totalXp} XP
- –£—Ä–æ–≤–µ–Ω—å: ${profileData.level}
- –î–Ω–µ–π —Å –±–æ—Ç–æ–º: ${profileData.accountAge}
- –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${profileData.totalTasks}
- –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: ${profileData.completedTasks}
- –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${profileData.timezone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
- –ì–æ—Ä–æ–¥: ${profileData.city || '–Ω–µ —É–∫–∞–∑–∞–Ω'}

–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–¥–æ 300 —Å–ª–æ–≤) —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
`;

    try {
      const analysis = await this.openaiService.getAIResponse(analysisPrompt);

      await ctx.replyWithMarkdown(
        `
üß† *–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:*

${analysis}

üí° *–•–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ?* –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    } catch (error) {
      await ctx.replyWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ—Ñ–∏–ª—è*

–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –ò–ò-–∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
      `);
    }
  }

  private async handleAITaskRecommendations(ctx: BotContext) {
    await ctx.answerCbQuery();

    const tasks = await this.taskService.findTasksByUserId(ctx.userId);
    const activeTasks = tasks.filter((task) => task.completedAt === null);

    const taskPrompt = `
–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${activeTasks.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: ${activeTasks.map((t) => t.title).join(', ')}

–î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ:
1. –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á
2. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è  
3. –†–∞–∑–±–∏–≤–∫–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á
4. –ü–æ–≤—ã—à–µ–Ω–∏—é –º–æ—Ç–∏–≤–∞—Ü–∏–∏

–û—Ç–≤–µ—Ç –¥–æ 250 —Å–ª–æ–≤.
`;

    try {
      const recommendations =
        await this.openaiService.getAIResponse(taskPrompt);

      await ctx.replyWithMarkdown(
        `
üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–∞—à–∏–º –∑–∞–¥–∞—á–∞–º:*

${recommendations}

*–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?* –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
            ],
          },
        },
      );
    } catch (error) {
      await ctx.replyWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π*

–ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
      `);
    }
  }

  private async handleAICustomQuestion(ctx: BotContext) {
    await ctx.answerCbQuery();

    await ctx.replyWithMarkdown(
      `
‚úçÔ∏è *–†–µ–∂–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è*

–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–µ–º, –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. 

–Ø —É—á—Ç—É –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç!

*–ü—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–ö–∞–∫ –º–Ω–µ –ª—É—á—à–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Ç—Ä–æ?"
‚Ä¢ "–ü–æ—á–µ–º—É —è –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∏—Ä—É—é?"
‚Ä¢ "–ö–∞–∫ –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É —Ä–∞–Ω–æ –≤—Å—Ç–∞–≤–∞—Ç—å?"
    `,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
          ],
        },
      },
    );

    ctx.session.aiChatMode = true;
  }

  private async handleAIChatMessage(ctx: BotContext, message: string) {
    try {
      // Check billing limits for AI queries
      const limitCheck = await this.billingService.checkUsageLimit(
        ctx.userId,
        'dailyAiQueries',
      );

      if (!limitCheck.allowed) {
        await ctx.replyWithMarkdown(
          limitCheck.message || 'üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ò–ò-–∑–∞–ø—Ä–æ—Å–æ–≤',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Premium',
                    callback_data: 'upgrade_premium',
                  },
                ],
                [{ text: 'üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã', callback_data: 'show_limits' }],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
        return;
      }

      // Check if this is a reminder request
      const absoluteTimePatterns = [
        /–Ω–∞–ø–æ–º–Ω–∏\s+–º–Ω–µ\s+(.+?)\s+–≤\s+(\d{1,2}):(\d{2})/i,
        /–Ω–∞–ø–æ–º–Ω–∏\s+(.+?)\s+–≤\s+(\d{1,2}):(\d{2})/i,
        /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+(.+?)\s+–≤\s+(\d{1,2}):(\d{2})/i,
        /–ø–æ—Å—Ç–∞–≤—å\s+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+(.+?)\s+–Ω–∞\s+(\d{1,2}):(\d{2})/i,
      ];

      const relativeTimePatterns = [
        /–Ω–∞–ø–æ–º–Ω–∏\s+–º–Ω–µ\s+(.+?)\s+—á–µ—Ä–µ–∑\s+(\d+)\s+–º–∏–Ω—É—Ç/i,
        /–Ω–∞–ø–æ–º–Ω–∏\s+(.+?)\s+—á–µ—Ä–µ–∑\s+(\d+)\s+–º–∏–Ω—É—Ç/i,
        /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+(.+?)\s+—á–µ—Ä–µ–∑\s+(\d+)\s+–º–∏–Ω—É—Ç/i,
      ];

      // Check absolute time first
      let reminderMatch: RegExpMatchArray | null = null;
      for (const pattern of absoluteTimePatterns) {
        reminderMatch = message.match(pattern);
        if (reminderMatch) {
          const [, reminderText, hours, minutes] = reminderMatch;
          await this.handleReminderRequest(ctx, reminderText, hours, minutes);
          return;
        }
      }

      // Check relative time
      for (const pattern of relativeTimePatterns) {
        reminderMatch = message.match(pattern);
        if (reminderMatch) {
          const [, reminderText, minutesFromNow] = reminderMatch;
          await this.handleRelativeReminderRequest(
            ctx,
            reminderText,
            parseInt(minutesFromNow),
          );
          return;
        }
      }

      await ctx.replyWithMarkdown('ü§î *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...*');

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI Context Service
      const personalizedResponse =
        await this.aiContextService.generatePersonalizedMessage(
          ctx.userId,
          'motivation',
          message,
        );

      // Increment AI usage counter
      await this.billingService.incrementUsage(ctx.userId, 'dailyAiQueries');

      // Get current usage for display
      const usageInfo = await this.billingService.checkUsageLimit(
        ctx.userId,
        'dailyAiQueries',
      );

      await ctx.replyWithMarkdown(
        `
üß† *–ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç:*

${personalizedResponse}

üìä **–ò–ò-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è:** ${usageInfo.current}/${usageInfo.limit === -1 ? '‚àû' : usageInfo.limit}

üí° *–ï—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã?* –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              [{ text: '‚ùå –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞', callback_data: 'exit_ai_chat' }],
            ],
          },
        },
      );
    } catch (error) {
      await ctx.replyWithMarkdown(
        `
‚ùå *–û—à–∏–±–∫–∞ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞*

–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å.
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
            ],
          },
        },
      );
    }
  }

  private async handleRelativeReminderRequest(
    ctx: BotContext,
    reminderText: string,
    minutesFromNow: number,
  ) {
    try {
      const user = await this.userService.findByTelegramId(ctx.userId);

      // Validate minutes
      if (minutesFromNow <= 0 || minutesFromNow > 1440) {
        // max 24 hours
        await ctx.replyWithMarkdown(`
‚ùå *–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ—Ç 1 –¥–æ 1440 –º–∏–Ω—É—Ç (–º–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞)
        `);
        return;
      }

      // Calculate reminder time
      const now = new Date();
      const reminderDate = new Date(now.getTime() + minutesFromNow * 60 * 1000);

      // Schedule the reminder
      setTimeout(
        async () => {
          try {
            await ctx.telegram.sendMessage(
              ctx.userId,
              `üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*

${reminderText}`,
              { parse_mode: 'Markdown' },
            );
          } catch (error) {
            this.logger.error('Error sending reminder:', error);
          }
        },
        minutesFromNow * 60 * 1000,
      );

      const timeStr = this.formatTimeWithTimezone(reminderDate, user?.timezone);

      await ctx.replyWithMarkdown(
        `
‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!*

üìù **–¢–µ–∫—Å—Ç:** ${reminderText}
‚è∞ **–í—Ä–µ–º—è:** —á–µ—Ä–µ–∑ ${minutesFromNow} –º–∏–Ω—É—Ç (–≤ ${timeStr})

–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è! üîî
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );

      // Add XP for using reminders
      await this.userService.updateUser(ctx.userId, {
        totalXp: user.totalXp + 5,
      });
    } catch (error) {
      this.logger.error('Error creating relative reminder:', error);
      await ctx.replyWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*

–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.
      `);
    }
  }

  private async handleReminderRequest(
    ctx: BotContext,
    reminderText: string,
    hours: string,
    minutes: string,
  ) {
    try {
      const user = await this.userService.findByTelegramId(ctx.userId);

      // Check billing limits for reminders
      const limitCheck = await this.billingService.checkUsageLimit(
        ctx.userId,
        'dailyReminders',
      );

      if (!limitCheck.allowed) {
        await ctx.replyWithMarkdown(
          limitCheck.message || 'üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Premium',
                    callback_data: 'upgrade_premium',
                  },
                ],
                [{ text: 'üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã', callback_data: 'show_limits' }],
              ],
            },
          },
        );
        return;
      }

      // Validate time
      const hourNum = parseInt(hours);
      const minuteNum = parseInt(minutes);

      if (hourNum < 0 || hourNum > 23 || minuteNum < 0 || minuteNum > 59) {
        await ctx.replyWithMarkdown(`
‚ùå *–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 17:30)
        `);
        return;
      }

      // Create reminder time for today
      const now = new Date();
      const reminderDate = new Date();
      reminderDate.setHours(hourNum, minuteNum, 0, 0);

      // If time has already passed today, set for tomorrow
      if (reminderDate <= now) {
        reminderDate.setDate(reminderDate.getDate() + 1);
      }

      // Calculate delay in milliseconds
      const delay = reminderDate.getTime() - now.getTime();

      // Schedule the reminder
      setTimeout(async () => {
        try {
          await ctx.telegram.sendMessage(
            ctx.userId,
            `üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\n${reminderText}`,
            { parse_mode: 'Markdown' },
          );
        } catch (error) {
          this.logger.error('Error sending reminder:', error);
        }
      }, delay);

      // Increment usage counter
      await this.billingService.incrementUsage(ctx.userId, 'dailyReminders');

      const timeStr = `${hours.padStart(2, '0')}:${minutes.padStart(2, '0')}`;
      const dateStr = reminderDate.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'long',
      });

      // Get current usage for display
      const usageInfo = await this.billingService.checkUsageLimit(
        ctx.userId,
        'dailyReminders',
      );

      await ctx.replyWithMarkdown(
        `
‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!*

üìù **–¢–µ–∫—Å—Ç:** ${reminderText}
‚è∞ **–í—Ä–µ–º—è:** ${timeStr}
üìÖ **–î–∞—Ç–∞:** ${dateStr}

üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è:** ${usageInfo.current}/${usageInfo.limit === -1 ? '‚àû' : usageInfo.limit} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è! üîî
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );

      // Add XP for using reminders
      await this.userService.updateUser(ctx.userId, {
        totalXp: user.totalXp + 5,
      });
    } catch (error) {
      this.logger.error('Error creating reminder:', error);
      await ctx.replyWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*

–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.
      `);
    }
  }

  private async handleReminderTimeInput(ctx: BotContext, timeInput: string) {
    try {
      const reminderText = ctx.session.pendingReminder;

      if (!reminderText) {
        await ctx.replyWithMarkdown('‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      // Try to parse different time formats
      let hours: string | undefined, minutes: string | undefined;

      // Format: HH:MM –∏–ª–∏ H:MM
      const timeMatch = timeInput.match(/(\d{1,2}):(\d{2})/);
      if (timeMatch) {
        hours = timeMatch[1];
        minutes = timeMatch[2];
      }
      // Format: "–≤ HH" –∏–ª–∏ "–≤ HH:MM"
      else {
        const inTimeMatch = timeInput.match(/–≤\s*(\d{1,2})(?::(\d{2}))?/i);
        if (inTimeMatch) {
          hours = inTimeMatch[1];
          minutes = inTimeMatch[2] || '00';
        }
        // Format: "—á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç"
        else {
          const minutesMatch = timeInput.match(/—á–µ—Ä–µ–∑\s*(\d+)\s*–º–∏–Ω—É—Ç/i);
          if (minutesMatch) {
            const minutesToAdd = parseInt(minutesMatch[1]);
            const futureTime = new Date();
            futureTime.setMinutes(futureTime.getMinutes() + minutesToAdd);
            hours = futureTime.getHours().toString();
            minutes = futureTime.getMinutes().toString().padStart(2, '0');
          }
          // Format: "—á–µ—Ä–µ–∑ X —á–∞—Å–æ–≤"
          else {
            const hoursMatch = timeInput.match(/—á–µ—Ä–µ–∑\s*(\d+)\s*—á–∞—Å/i);
            if (hoursMatch) {
              const hoursToAdd = parseInt(hoursMatch[1]);
              const futureTime = new Date();
              futureTime.setHours(futureTime.getHours() + hoursToAdd);
              hours = futureTime.getHours().toString();
              minutes = futureTime.getMinutes().toString().padStart(2, '0');
            }
            // Try to parse just numbers as HH:MM
            else if (
              timeInput.match(/^\d{1,2}$/) &&
              parseInt(timeInput) <= 23
            ) {
              hours = timeInput;
              minutes = '00';
            }
          }
        }
      }

      // If no valid time format found
      if (!hours || !minutes) {
        await ctx.replyWithMarkdown(`
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –≤—Ä–µ–º—è*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:
‚Ä¢ **17:30** - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ **–≤ 18:00** - —Å –ø—Ä–µ–¥–ª–æ–≥–æ–º
‚Ä¢ **—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç** - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ **—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞** - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ **18** - —Ü–µ–ª—ã–π —á–∞—Å (18:00)

_–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑_
        `);
        return;
      }

      // Validate parsed time
      const hourNum = parseInt(hours);
      const minuteNum = parseInt(minutes);

      if (hourNum < 0 || hourNum > 23 || minuteNum < 0 || minuteNum > 59) {
        await ctx.replyWithMarkdown(`
‚ùå *–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è*

–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 0 –¥–æ 59.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
        `);
        return;
      }

      // Clear session state
      ctx.session.pendingReminder = undefined;
      ctx.session.waitingForReminderTime = false;

      // Create the reminder
      await this.handleReminderRequest(ctx, reminderText, hours, minutes);
    } catch (error) {
      this.logger.error('Error processing reminder time input:', error);

      // Clear session state on error
      ctx.session.pendingReminder = undefined;
      ctx.session.waitingForReminderTime = false;

      await ctx.replyWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.
      `);
    }
  }

  private async handleAudioMessage(ctx: BotContext, type: 'voice' | 'audio') {
    try {
      const emoji = type === 'voice' ? 'üé§' : 'üéµ';
      const messageType =
        type === 'voice' ? '–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' : '–∞—É–¥–∏–æ —Ñ–∞–π–ª';

      await ctx.replyWithMarkdown(`${emoji} *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ${messageType}...*`);

      const transcribedText = await this.transcribeAudio(ctx, type);
      if (!transcribedText) {
        await ctx.replyWithMarkdown(
          `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ${messageType}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`,
        );
        return;
      }

      await ctx.replyWithMarkdown(`üéØ *–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:* "${transcribedText}"`);

      // Handle AI Chat mode for audio messages
      if (ctx.session.aiChatMode) {
        await this.handleAIChatMessage(ctx, transcribedText);
        return;
      }

      // Handle audio reminders
      if (this.isReminderRequest(transcribedText)) {
        await this.processReminderFromText(ctx, transcribedText);
        return;
      }

      // Handle voice commands for tasks
      if (
        transcribedText.toLowerCase().includes('–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É') ||
        transcribedText.toLowerCase().includes('–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞') ||
        transcribedText.toLowerCase().includes('—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É')
      ) {
        await this.startAddingTask(ctx);
        return;
      }

      // Handle voice commands for menu
      if (
        transcribedText.toLowerCase().includes('–º–µ–Ω—é') ||
        transcribedText.toLowerCase().includes('–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') ||
        transcribedText.toLowerCase().includes('–ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é')
      ) {
        await this.showMainMenu(ctx);
        return;
      }

      // Handle voice commands for help
      if (
        transcribedText.toLowerCase().includes('–ø–æ–º–æ—â—å') ||
        transcribedText.toLowerCase().includes('—Å–ø—Ä–∞–≤–∫–∞') ||
        transcribedText.toLowerCase().includes('—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å')
      ) {
        await ctx.replyWithMarkdown(`
ü§ñ *DailyCheck Bot - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É  
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ

*–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
üé§ "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ..." - —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
üé§ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É" - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
üé§ "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é" - –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
üé§ "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?" - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

*–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*
üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
üß† –ü–æ–æ–±—â–∞—Ç—å—Å—è —Å –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º
üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu
        `);
        return;
      }

      // Handle voice commands for feedback
      if (
        transcribedText.toLowerCase().includes('–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å') ||
        transcribedText.toLowerCase().includes('–æ—Ç–∑—ã–≤') ||
        transcribedText.toLowerCase().includes('—Ñ–∏–¥–±–µ–∫')
      ) {
        await this.showFeedbackSurvey(ctx);
        return;
      }

      // Default: treat as AI chat
      await this.handleAIChatMessage(ctx, transcribedText);
    } catch (error) {
      this.logger.error(`${type} message processing error:`, error);
      await ctx.replyWithMarkdown(
        `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${type === 'voice' ? '–≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è' : '–∞—É–¥–∏–æ —Ñ–∞–π–ª–∞'}.`,
      );
    }
  }

  private async transcribeAudio(
    ctx: BotContext,
    type: 'voice' | 'audio',
  ): Promise<string | null> {
    try {
      // Check if message exists and has the right type
      if (!ctx.message) {
        return null;
      }

      let fileId: string;

      if (type === 'voice' && 'voice' in ctx.message) {
        fileId = ctx.message.voice.file_id;
      } else if (type === 'audio' && 'audio' in ctx.message) {
        fileId = ctx.message.audio.file_id;
      } else {
        return null;
      }

      // Get file info and download
      const fileLink = await ctx.telegram.getFileLink(fileId);
      const response = await fetch(fileLink.href);
      const buffer = await response.arrayBuffer();

      // Create a File object for OpenAI
      const fileName = type === 'voice' ? 'voice.ogg' : 'audio.mp3';
      const mimeType = type === 'voice' ? 'audio/ogg' : 'audio/mpeg';
      const file = new File([buffer], fileName, { type: mimeType });

      // Use OpenAI Whisper for transcription
      const transcription = await this.openaiService.transcribeAudio(file);

      return transcription;
    } catch (error) {
      this.logger.error(`Error transcribing ${type}:`, error);
      return null;
    }
  }

  private async processReminderFromText(ctx: BotContext, text: string) {
    // Extract time and reminder text from voice/text input
    const timeMatch =
      text.match(/–≤\s*(\d{1,2}):(\d{2})/i) ||
      text.match(/–≤\s*(\d{1,2})\s*—á–∞—Å(?:–∞|–æ–≤)?(?:\s*(\d{2})\s*–º–∏–Ω—É—Ç)?/i) ||
      text.match(/–Ω–∞\s*(\d{1,2}):(\d{2})/i) ||
      text.match(/–∫\s*(\d{1,2}):(\d{2})/i);

    if (timeMatch) {
      const hours = timeMatch[1];
      const minutes = timeMatch[2] || '00';

      // Extract reminder text by removing time references and trigger words
      const reminderText = text
        .replace(/–Ω–∞–ø–æ–º–Ω–∏\s*(–º–Ω–µ)?/gi, '')
        .replace(/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/gi, '')
        .replace(/–ø–æ—Å—Ç–∞–≤—å/gi, '')
        .replace(/—É—Å—Ç–∞–Ω–æ–≤–∏/gi, '')
        .replace(/–≤\s*\d{1,2}:?\d{0,2}\s*(?:—á–∞—Å|–º–∏–Ω—É—Ç)?(?:–∞|–æ–≤)?/gi, '')
        .replace(/–Ω–∞\s*\d{1,2}:?\d{0,2}/gi, '')
        .replace(/–∫\s*\d{1,2}:?\d{0,2}/gi, '')
        .trim();

      // If no text left, ask for clarification
      if (!reminderText || reminderText.length < 2) {
        await ctx.replyWithMarkdown(`
ü§î *–û —á–µ–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å?*

–í—ã —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º—è ${hours}:${minutes}, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–ª–∏, –æ —á–µ–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å.

*–ü—Ä–∏–º–µ—Ä:* "–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –≤ 17:30"
        `);
        return;
      }

      await this.handleReminderRequest(ctx, reminderText, hours, minutes);
      return;
    }

    // Handle relative time (—á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤)
    const relativeMatch = text.match(/—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å)/i);
    if (relativeMatch) {
      const amount = parseInt(relativeMatch[1]);
      const unit = relativeMatch[2];

      const now = new Date();
      if (unit.includes('—á–∞—Å')) {
        now.setHours(now.getHours() + amount);
      } else {
        now.setMinutes(now.getMinutes() + amount);
      }

      const hours = now.getHours().toString().padStart(2, '0');
      const minutes = now.getMinutes().toString().padStart(2, '0');

      const reminderText = text
        .replace(/–Ω–∞–ø–æ–º–Ω–∏\s*(–º–Ω–µ)?/gi, '')
        .replace(/—á–µ—Ä–µ–∑\s*\d+\s*(?:–º–∏–Ω—É—Ç|—á–∞—Å)(?:–∞|–æ–≤)?/gi, '')
        .trim();

      await this.handleReminderRequest(ctx, reminderText, hours, minutes);
      return;
    }

    // Check if this is a reminder request without time
    const isReminderWithoutTime = this.isReminderWithoutTime(text);
    if (isReminderWithoutTime) {
      // Extract reminder text by removing trigger words
      const reminderText = text
        .replace(/–Ω–∞–ø–æ–º–Ω–∏\s*(–º–Ω–µ)?/gi, '')
        .replace(/–Ω–∞–ø–æ–º–Ω—é\s*(–º–Ω–µ)?/gi, '')
        .replace(/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/gi, '')
        .replace(/–ø–æ—Å—Ç–∞–≤—å/gi, '')
        .replace(/—É—Å—Ç–∞–Ω–æ–≤–∏/gi, '')
        .replace(/–Ω—É–∂–Ω–æ.*–Ω–∞–ø–æ–º–Ω–∏—Ç—å/gi, '')
        .replace(/–Ω–µ –∑–∞–±—ã—Ç—å/gi, '')
        .trim();

      if (reminderText && reminderText.length > 1) {
        // Store reminder text in session and ask for time
        ctx.session.pendingReminder = reminderText;
        ctx.session.waitingForReminderTime = true;

        await ctx.replyWithMarkdown(`
‚è∞ *–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?*

–û —á–µ–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å: "${reminderText}"

*–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è:*
‚Ä¢ –í –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è: "17:30", "–≤ 18:00"  
‚Ä¢ –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è: "—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç", "—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"

_–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ_
        `);
        return;
      }
    }

    // If no specific time found and not a clear reminder request, ask for clarification
    await ctx.replyWithMarkdown(`
ü§î *–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
‚Ä¢ "–Ω–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –≤ 17:30"
‚Ä¢ "–Ω–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç"
    `);
  }

  private isReminderWithoutTime(text: string): boolean {
    const reminderPatterns = [
      /–Ω–∞–ø–æ–º–Ω–∏(?:\s+–º–Ω–µ)?\s+.+/i,
      /–Ω–∞–ø–æ–º–Ω—é(?:\s+–º–Ω–µ)?\s+.+/i,
      /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+.+/i,
      /–ø–æ—Å—Ç–∞–≤—å\s+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+.+/i,
      /—É—Å—Ç–∞–Ω–æ–≤–∏\s+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+.+/i,
      /–Ω—É–∂–Ω–æ\s+–Ω–∞–ø–æ–º–Ω–∏—Ç—å\s+.+/i,
      /–Ω–µ\s+–∑–∞–±—ã—Ç—å\s+.+/i,
    ];

    // Check if it's a reminder request but doesn't have time indicators
    const hasReminderTrigger = reminderPatterns.some((pattern) =>
      pattern.test(text),
    );
    const hasTimeIndicator =
      /–≤\s*\d{1,2}:?\d{0,2}|–Ω–∞\s*\d{1,2}:?\d{0,2}|–∫\s*\d{1,2}:?\d{0,2}|—á–µ—Ä–µ–∑\s*\d+\s*(?:–º–∏–Ω—É—Ç|—á–∞—Å)/i.test(
        text,
      );

    return hasReminderTrigger && !hasTimeIndicator;
  }

  private isReminderRequest(text: string): boolean {
    const reminderPatterns = [
      // –ü–æ–ª–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º
      /–Ω–∞–ø–æ–º–Ω–∏.*–≤\s*(\d{1,2}):(\d{2})/i,
      /–Ω–∞–ø–æ–º–Ω–∏.*–≤\s*(\d{1,2})\s*—á–∞—Å/i,
      /–Ω–∞–ø–æ–º–Ω–∏.*—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å)/i,
      /–Ω–∞–ø–æ–º–Ω—é.*–≤\s*(\d{1,2}):(\d{2})/i,
      /–Ω–∞–ø–æ–º–Ω—é.*–≤\s*(\d{1,2})\s*—á–∞—Å/i,
      /–Ω–∞–ø–æ–º–Ω—é.*—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å)/i,
      /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.*–≤\s*(\d{1,2}):(\d{2})/i,
      /–¥–æ–±–∞–≤—å.*–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/i,
      /—Å–æ–∑–¥–∞–π.*–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/i,

      // –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã (–ª—é–±—ã–µ —Å–ª–æ–≤–∞ –Ω–∞–ø–æ–º–Ω–∏/–Ω–∞–ø–æ–º–Ω—é)
      /–Ω–∞–ø–æ–º–Ω–∏.+/i,
      /–Ω–∞–ø–æ–º–Ω—é.+/i,
      /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.+/i,
      /remind.*/i,

      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã
      /–ø–æ—Å—Ç–∞–≤—å.*–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/i,
      /—É—Å—Ç–∞–Ω–æ–≤–∏.*–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/i,
      /–Ω—É–∂–Ω–æ.*–Ω–∞–ø–æ–º–Ω–∏—Ç—å/i,
      /–Ω–µ –∑–∞–±—ã—Ç—å.*/i,
      /–ø–æ–º–Ω–∏.*/i,
    ];

    return reminderPatterns.some((pattern) => pattern.test(text));
  }

  private async showTasksAIAdvice(ctx: BotContext) {
    try {
      await ctx.replyWithMarkdown('ü§î *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –∑–∞–¥–∞—á–∏...*');

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –∑–∞–¥–∞—á–∞–º
      const aiAdvice = await this.aiContextService.generatePersonalizedMessage(
        ctx.userId,
        'task_suggestion',
        '',
      );

      await ctx.replyWithMarkdown(
        `
ü§ñ *AI-—Å–æ–≤–µ—Ç –ø–æ –∑–∞–¥–∞—á–∞–º:*

${aiAdvice}

üí° *–•–æ—Ç–∏—Ç–µ –µ—â—ë —Å–æ–≤–µ—Ç—ã?* –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ —á–∞—Ç!
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'tasks_add' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º', callback_data: 'back_to_tasks' }],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error('Error getting AI advice for tasks:', error);
      await ctx.replyWithMarkdown(
        `
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI-—Å–æ–≤–µ—Ç*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç!
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º', callback_data: 'back_to_tasks' }],
            ],
          },
        },
      );
    }
  }

  private async showHabitsAIAdvice(ctx: BotContext) {
    try {
      await ctx.replyWithMarkdown('ü§î *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏...*');

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º
      const aiAdvice = await this.aiContextService.generatePersonalizedMessage(
        ctx.userId,
        'habit_advice',
        '',
      );

      await ctx.replyWithMarkdown(
        `
ü§ñ *AI-—Å–æ–≤–µ—Ç –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º:*

${aiAdvice}

üí° *–•–æ—Ç–∏—Ç–µ –µ—â—ë —Å–æ–≤–µ—Ç—ã?* –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ —á–∞—Ç!
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º', callback_data: 'menu_habits' }],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error('Error getting AI advice for habits:', error);
      await ctx.replyWithMarkdown(
        `
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI-—Å–æ–≤–µ—Ç*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç!
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º', callback_data: 'menu_habits' }],
            ],
          },
        },
      );
    }
  }

  // Command handler methods
  private async showHabitsMenu(ctx: BotContext) {
    const user = await this.userService.findByTelegramId(ctx.userId);
    if (!user.timezone) {
      ctx.session.step = 'adding_habit';
      await this.askForTimezone(ctx);
    } else {
      try {
        const habits = await this.habitService.findHabitsByUserId(ctx.userId);

        let message = `üîÑ *–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏*\n\n`;

        if (habits.length === 0) {
          message += `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.\n\nüí° –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!`;

          await ctx.replyWithMarkdown(message, {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É', callback_data: 'habits_add' }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          });
        } else {
          message += `üìä **–í—Å–µ–≥–æ –ø—Ä–∏–≤—ã—á–µ–∫:** ${habits.length}\n\n`;
          message += `*–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:*`;

          // Create keyboard with habit completion buttons
          const keyboard = {
            inline_keyboard: [
              ...habits.slice(0, 8).map((habit) => [
                {
                  text: `‚úÖ ${habit.title.substring(0, 30)}${habit.title.length > 30 ? '...' : ''}`,
                  callback_data: `habit_complete_${habit.id}`,
                },
              ]),
              ...(habits.length > 8
                ? [
                    [
                      {
                        text: `... –∏ –µ—â–µ ${habits.length - 8} –ø—Ä–∏–≤—ã—á–µ–∫`,
                        callback_data: 'habits_list_more',
                      },
                    ],
                  ]
                : []),
              [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É', callback_data: 'habits_add' }],
              [
                {
                  text: 'ü§ñ AI-—Å–æ–≤–µ—Ç –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º',
                  callback_data: 'habits_ai_advice',
                },
              ],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          };

          await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
        }
      } catch (error) {
        this.logger.error(`Error fetching habits: ${error}`);
        await ctx.replyWithMarkdown(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–≤—ã—á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      }
    }
  }

  private async showMoodMenu(ctx: BotContext) {
    await ctx.replyWithMarkdown(
      `
üòä *–î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è*

–û—Ç–º–µ—Ç—å—Ç–µ —Å–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:
      `,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üòÑ –û—Ç–ª–∏—á–Ω–æ', callback_data: 'mood_excellent' },
              { text: 'üòä –•–æ—Ä–æ—à–æ', callback_data: 'mood_good' },
            ],
            [
              { text: 'üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ', callback_data: 'mood_neutral' },
              { text: 'üòî –ì—Ä—É—Å—Ç–Ω–æ', callback_data: 'mood_sad' },
            ],
            [
              { text: 'üò§ –ó–ª–æ–π', callback_data: 'mood_angry' },
              { text: 'üò∞ –¢—Ä–µ–≤–æ–∂–Ω–æ', callback_data: 'mood_anxious' },
            ],
            [
              {
                text: 'ü§ñ AI-–∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
                callback_data: 'mood_ai_analysis',
              },
            ],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      },
    );
  }

  private async showMoodAIAnalysis(ctx: BotContext) {
    try {
      await ctx.replyWithMarkdown('ü§î *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ...*');

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
      const aiAnalysis =
        await this.aiContextService.generatePersonalizedMessage(
          ctx.userId,
          'mood_analysis',
          '',
        );

      await ctx.replyWithMarkdown(
        `
ü§ñ *AI-–∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:*

${aiAnalysis}

üí° *–•–æ—Ç–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã?* –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ —á–∞—Ç!
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üòä –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', callback_data: 'menu_mood' }],
              [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error('Error getting AI mood analysis:', error);
      await ctx.replyWithMarkdown(
        `
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI-–∞–Ω–∞–ª–∏–∑*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç!
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é', callback_data: 'menu_mood' }],
            ],
          },
        },
      );
    }
  }

  private async showFocusSession(ctx: BotContext) {
    await ctx.replyWithMarkdown(
      `
üçÖ *–¢–µ—Ö–Ω–∏–∫–∞ –ü–æ–º–æ–¥–æ—Ä–æ*

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
‚è∞ 25 –º–∏–Ω—É—Ç —Ñ–æ–∫—É—Å–∞ –Ω–∞ –∑–∞–¥–∞—á–µ
‚òï 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö
üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å 4 —Ä–∞–∑–∞
üèñÔ∏è –ë–æ–ª—å—à–æ–π –ø–µ—Ä–µ—Ä—ã–≤ 15-30 –º–∏–Ω—É—Ç

**–í–∞—à–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:**
üéØ –°–µ—Å—Å–∏–π —Å–µ–≥–æ–¥–Ω—è: 0
‚ö° –û–±—â–µ–µ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: 0 –º–∏–Ω
üìà –õ—É—á—à–∏–π –¥–µ–Ω—å: 0 —Å–µ—Å—Å–∏–π

*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*
      `,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üöÄ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é',
                callback_data: 'start_pomodoro_session',
              },
            ],
            [
              {
                text: 'üìä –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–π',
                callback_data: 'pomodoro_history',
              },
              {
                text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                callback_data: 'pomodoro_settings',
              },
            ],
            [
              {
                text: 'ü§ñ AI-—Å–æ–≤–µ—Ç—ã –ø–æ —Ñ–æ–∫—É—Å—É',
                callback_data: 'focus_ai_tips',
              },
            ],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      },
    );
  }

  private async showFocusAITips(ctx: BotContext) {
    try {
      await ctx.replyWithMarkdown('ü§î *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ–æ–∫—É—Å–∞...*');

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ñ–æ–∫—É—Å—É
      const aiTips = await this.aiContextService.generatePersonalizedMessage(
        ctx.userId,
        'focus_tips',
        '',
      );

      await ctx.replyWithMarkdown(
        `
ü§ñ *AI-—Å–æ–≤–µ—Ç—ã –ø–æ —Ñ–æ–∫—É—Å—É:*

${aiTips}

üí° *–•–æ—Ç–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å?* –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ —á–∞—Ç!
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üöÄ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é',
                  callback_data: 'start_pomodoro_session',
                },
              ],
              [{ text: 'üîô –ö —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—è–º', callback_data: 'menu_focus' }],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error('Error getting AI focus tips:', error);
      await ctx.replyWithMarkdown(
        `
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI-—Å–æ–≤–µ—Ç—ã*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç!
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ö —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—è–º', callback_data: 'menu_focus' }],
            ],
          },
        },
      );
    }
  }

  private async createPayment(
    ctx: BotContext,
    subscriptionType: 'PREMIUM' | 'PREMIUM_PLUS',
  ) {
    try {
      const plans = this.paymentService.getSubscriptionPlans();
      const plan = plans[subscriptionType];

      await ctx.replyWithMarkdown('üí≥ *–°–æ–∑–¥–∞—é –ø–ª–∞—Ç–µ–∂...*');

      const paymentResult = await this.paymentService.createPayment({
        userId: ctx.userId,
        amount: plan.amount,
        description: plan.description,
        subscriptionType: subscriptionType,
        returnUrl: 'https://t.me/daily_check_bot',
      });

      await ctx.replyWithMarkdown(
        `
üíé *–û–ø–ª–∞—Ç–∞ ${subscriptionType === 'PREMIUM' ? 'Premium' : 'Premium Plus'}*

üí∞ **–°—É–º–º–∞:** ${plan.amount}‚ÇΩ
üìÖ **–ü–µ—Ä–∏–æ–¥:** ${plan.period}

**–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:**
${plan.features.map((feature) => `‚Ä¢ ${feature}`).join('\n')}

üîó –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å',
                  url: paymentResult.confirmationUrl,
                },
              ],
              [
                {
                  text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',
                  callback_data: `check_payment_${paymentResult.paymentId}`,
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'upgrade_premium' }],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error('Error creating payment:', error);
      await ctx.replyWithMarkdown(
        `
‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'upgrade_premium' }],
            ],
          },
        },
      );
    }
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤–∞—è –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  private async getOrCreateUser(ctx: BotContext): Promise<User> {
    try {
      return await this.userService.findByTelegramId(ctx.userId);
    } catch (error) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
      const userData = {
        id: ctx.from?.id.toString() || ctx.userId,
        username: ctx.from?.username || undefined,
        firstName: ctx.from?.first_name || undefined,
        lastName: ctx.from?.last_name || undefined,
      };

      return await this.userService.findOrCreateUser(userData);
    }
  }

  /**
   * Handles XP purchases from the shop
   */
  private async handleXPPurchase(
    ctx: BotContext,
    itemType: 'theme' | 'badge' | 'emoji' | 'sticker' | 'feature',
    cost: number,
    itemName: string,
    itemId: string,
  ): Promise<void> {
    await ctx.answerCbQuery();

    try {
      const user = await this.userService.findByTelegramId(ctx.userId);

      // Check if user has enough XP
      if (user.totalXp < cost) {
        await ctx.editMessageTextWithMarkdown(
          `‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ XP*

–î–ª—è –ø–æ–∫—É–ø–∫–∏ "${itemName}" –Ω—É–∂–Ω–æ ${cost} XP.
–£ –≤–∞—Å: ${user.totalXp} XP
–ù—É–∂–Ω–æ –µ—â–µ: ${cost - user.totalXp} XP

üí™ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ XP!`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω', callback_data: 'xp_shop' }],
              ],
            },
          },
        );
        return;
      }

      // Check if user already owns this item
      const alreadyOwned = this.checkIfUserOwnsItem(user, itemType, itemId);

      if (alreadyOwned) {
        await ctx.editMessageTextWithMarkdown(
          `‚úÖ *–£–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ*

–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å "${itemName}".

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω', callback_data: 'xp_shop' }],
              ],
            },
          },
        );
        return;
      }

      // Process purchase
      await this.processXPPurchase(user, itemType, itemId);

      // Update user XP
      await this.userService.updateUserStats(ctx.userId, {
        xpGained: -cost, // Subtract XP
      });

      await ctx.editMessageTextWithMarkdown(
        `üéâ *–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!*

–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏: "${itemName}"
–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${cost} XP
–û—Å—Ç–∞—Ç–æ–∫ XP: ${user.totalXp - cost}

${this.getItemActivationMessage(itemType)}`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üõçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', callback_data: 'xp_shop' },
                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' },
              ],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error(`Error processing XP purchase: ${error}`);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω', callback_data: 'xp_shop' }],
            ],
          },
        },
      );
    }
  }

  /**
   * Check if user already owns a specific item
   */
  private checkIfUserOwnsItem(
    user: User,
    itemType: string,
    itemId: string,
  ): boolean {
    switch (itemType) {
      case 'theme':
        return user.unlockedThemes.includes(itemId);
      case 'badge':
      case 'emoji':
      case 'sticker':
        return user.stickers.includes(itemId);
      case 'feature':
        // For features, we could add a separate field or use stickers array
        return user.stickers.includes(`feature_${itemId}`);
      default:
        return false;
    }
  }

  /**
   * Process the actual purchase and update user data
   */
  private async processXPPurchase(
    user: User,
    itemType: string,
    itemId: string,
  ): Promise<void> {
    const updateData: Partial<User> = {};

    switch (itemType) {
      case 'theme':
        updateData.unlockedThemes = [...user.unlockedThemes, itemId];
        break;
      case 'badge':
      case 'emoji':
      case 'sticker':
        updateData.stickers = [...user.stickers, itemId];
        break;
      case 'feature':
        updateData.stickers = [...user.stickers, `feature_${itemId}`];
        break;
    }

    await this.userService.updateUser(user.id, updateData);
  }

  /**
   * Get activation message based on item type
   */
  private getItemActivationMessage(itemType: string): string {
    switch (itemType) {
      case 'theme':
        return 'üé® –¢–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.';
      case 'badge':
        return 'üèÜ –ó–Ω–∞—á–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!';
      case 'emoji':
        return '‚ö° –≠–º–æ–¥–∑–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —á–∞—Ç–µ!';
      case 'sticker':
        return 'üåü –°—Ç–∏–∫–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é!';
      case 'feature':
        return 'üöÄ –§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!';
      default:
        return '‚ú® –ü–æ–∫—É–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!';
    }
  }

  private async completeHabit(ctx: BotContext, habitId: string) {
    try {
      // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ —á–µ—Ä–µ–∑ HabitService
      // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.replyWithMarkdown(
        `
‚úÖ *–ü—Ä–∏–≤—ã—á–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*

üéØ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –Ω–∞ –ø—É—Ç–∏ –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ–ª–µ–∑–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏.

üí° *–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!*
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÑ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'habits_list' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error('Error completing habit:', error);
      await ctx.replyWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏');
    }
  }

  private async showAllHabitsList(ctx: BotContext) {
    try {
      const habits = await this.habitService.findHabitsByUserId(ctx.userId);

      if (habits.length === 0) {
        await ctx.replyWithMarkdown(`
üîÑ *–í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏*

–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é! üéØ
        `);
        return;
      }

      let message = `üîÑ *–í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ (${habits.length}):*\n\n`;
      message += `*–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:*`;

      // Create keyboard with all habits
      const keyboard = {
        inline_keyboard: [
          ...habits.map((habit) => [
            {
              text: `‚úÖ ${habit.title.substring(0, 35)}${habit.title.length > 35 ? '...' : ''}`,
              callback_data: `habit_complete_${habit.id}`,
            },
          ]),
          [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º', callback_data: 'habits_list' }],
        ],
      };

      await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
    } catch (error) {
      this.logger.error('Error showing all habits list:', error);
      await ctx.replyWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫');
    }
  }

  private async confirmTimezone(ctx: BotContext, timezone: string) {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.userService.updateUser(ctx.userId, {
        timezone: timezone,
      });

      await ctx.replyWithMarkdown(`
‚úÖ *–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!*

üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${timezone}

–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏!
      `);

      // Reset session step
      ctx.session.step = undefined;

      // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–º –¥–µ–π—Å—Ç–≤–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç–µ–ª —Å–¥–µ–ª–∞—Ç—å
      if (ctx.session.pendingAction === 'adding_task') {
        ctx.session.pendingAction = undefined;
        await this.startAddingTask(ctx);
      } else if (ctx.session.pendingAction === 'adding_habit') {
        ctx.session.pendingAction = undefined;
        ctx.session.step = 'adding_habit';
        await ctx.replyWithMarkdown(
          'üîÑ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      } else {
        await this.showMainMenu(ctx);
      }
    } catch (error) {
      this.logger.error('Error confirming timezone:', error);
      await ctx.replyWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞');
    }
  }

  private async showTimezoneList(ctx: BotContext) {
    const commonTimezones = [
      { name: '–ú–æ—Å–∫–≤–∞', tz: 'Europe/Moscow' },
      { name: '–°–ü–±', tz: 'Europe/Moscow' },
      { name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', tz: 'Asia/Yekaterinburg' },
      { name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', tz: 'Asia/Novosibirsk' },
      { name: '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', tz: 'Asia/Vladivostok' },
      { name: '–ê—Å—Ç–∞–Ω–∞', tz: 'Asia/Almaty' },
      { name: '–ö–∏–µ–≤', tz: 'Europe/Kiev' },
      { name: '–ú–∏–Ω—Å–∫', tz: 'Europe/Minsk' },
      { name: '–õ–æ–Ω–¥–æ–Ω', tz: 'Europe/London' },
      { name: '–ü–∞—Ä–∏–∂', tz: 'Europe/Paris' },
      { name: '–ù—å—é-–ô–æ—Ä–∫', tz: 'America/New_York' },
      { name: '–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å', tz: 'America/Los_Angeles' },
    ];

    await ctx.replyWithMarkdown(
      `
üïê *–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å*

–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π –∫ –≤–∞–º –≥–æ—Ä–æ–¥:`,
      {
        reply_markup: {
          inline_keyboard: [
            ...commonTimezones.map((city) => [
              {
                text: `üèôÔ∏è ${city.name}`,
                callback_data: `confirm_timezone_${city.tz}`,
              },
            ]),
            [{ text: 'üîô –í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é', callback_data: 'input_city' }],
          ],
        },
      },
    );
  }

  /**
   * Format time string with user's timezone
   */
  private formatTimeWithTimezone(date: Date, timezone?: string | null): string {
    return date.toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit',
      timeZone: timezone || 'Europe/Moscow',
    });
  }
}
