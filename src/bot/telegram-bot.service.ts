import {
  Injectable,
  Logger,
  OnModuleInit,
  OnModuleDestroy,
} from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf, session } from 'telegraf';
import { BotContext } from './bot-context.interface';
import { UserService } from '../services/user.service';
import { OpenAIService } from '../services/openai.service';
import { TaskService } from '../services/task.service';
import { BillingService } from '../services/billing.service';

@Injectable()
export class TelegramBotService implements OnModuleInit, OnModuleDestroy {
  private readonly logger = new Logger(TelegramBotService.name);
  private bot: Telegraf<BotContext>;

  constructor(
    private readonly configService: ConfigService,
    private readonly userService: UserService,
    private readonly openaiService: OpenAIService,
    private readonly taskService: TaskService,
    private readonly billingService: BillingService,
  ) {
    const token = this.configService.get<string>('bot.token');
    if (!token) {
      throw new Error('BOT_TOKEN is not provided');
    }

    this.bot = new Telegraf<BotContext>(token);
    this.setupMiddleware();
    this.setupHandlers();
  }

  private setupMiddleware() {
    // Session middleware
    this.bot.use(
      session({
        defaultSession: () => ({
          step: undefined,
          data: {},
          waitingForInput: false,
          currentAction: undefined,
          tempData: {},
        }),
      }),
    );

    // User context middleware
    this.bot.use(async (ctx, next) => {
      if (ctx.from) {
        ctx.userId = ctx.from.id.toString();

        // Ensure user exists in database
        const existingUser = await this.userService
          .findByTelegramId(ctx.from.id.toString())
          .catch(() => null);

        if (!existingUser) {
          // Create new user
          await this.userService.findOrCreateUser({
            id: ctx.from.id.toString(),
            username: ctx.from.username,
            firstName: ctx.from.first_name,
            lastName: ctx.from.last_name,
          });

          // Initialize trial period for new user
          await this.billingService.initializeTrialForUser(
            ctx.from.id.toString(),
          );
        }
      }

      // Add helper methods
      ctx.replyWithMarkdown = (text: string, extra: any = {}) => {
        return ctx.reply(text, { parse_mode: 'Markdown', ...extra });
      };

      ctx.editMessageTextWithMarkdown = (text: string, extra: any = {}) => {
        return ctx.editMessageText(text, { parse_mode: 'Markdown', ...extra });
      };

      return next();
    });
  }

  private setupHandlers() {
    // Start command
    this.bot.start(async (ctx) => {
      const user = await this.userService.findByTelegramId(ctx.userId);

      if (!user.onboardingPassed) {
        await this.startOnboarding(ctx);
      } else {
        await this.showMainMenu(ctx);
      }
    }); // Help command
    this.bot.help(async (ctx) => {
      await ctx.replyWithMarkdown(`
ü§ñ *DailyCheck Bot - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ
/tasks - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
/habits - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
/mood - –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
/focus - –°–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏

*–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*
üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É
üîÑ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
üòä –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
‚è∞ –°–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu
      `);
    });

    // Main menu command
    this.bot.command('menu', async (ctx) => {
      await this.showMainMenu(ctx);
    });

    // Onboarding callback handlers
    this.bot.action('onboarding_start', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showOnboardingStep2(ctx);
    });

    this.bot.action('onboarding_examples', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(`
üìã *–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ —è —É–º–µ—é:*

*–ó–∞–¥–∞—á–∏:*
‚Ä¢ "–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"
‚Ä¢ "–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é"
‚Ä¢ "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É"

*–ü—Ä–∏–≤—ã—á–∫–∏:*
‚Ä¢ "–ü–∏—Ç—å 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã"
‚Ä¢ "–î–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É"
‚Ä¢ "–ß–∏—Ç–∞—Ç—å 30 –º–∏–Ω—É—Ç"

*–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:*
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ —à–∫–∞–ª–µ 1-10
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      `);

      setTimeout(async () => {
        await this.showOnboardingStep2(ctx);
      }, 3000);
    });

    this.bot.action('onboarding_add_habit', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(`
‚úçÔ∏è *–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –ø–µ—Ä–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏.*

–ù–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ –ü–∏—Ç—å –≤–æ–¥—É –∫–∞–∂–¥—ã–π —á–∞—Å
‚Ä¢ –î–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É —É—Ç—Ä–æ–º
‚Ä¢ –ß–∏—Ç–∞—Ç—å –ø–µ—Ä–µ–¥ —Å–Ω–æ–º

*–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:*
      `);
      ctx.session.step = 'onboarding_waiting_habit';
    });

    this.bot.action('onboarding_skip_habit', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showOnboardingStep3(ctx);
    });

    this.bot.action('onboarding_complete', async (ctx) => {
      await ctx.answerCbQuery();

      // Mark onboarding as completed
      await this.userService.updateUser(ctx.userId, {
        onboardingPassed: true,
      });

      await ctx.replyWithMarkdown(`
üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!*

–¢–µ–ø–µ—Ä—å —Ç—ã –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Å Ticky AI!

üöÄ –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
      `);

      setTimeout(async () => {
        await this.showMainMenu(ctx);
      }, 2000);
    });

    // Handle text input during onboarding
    this.bot.on('text', async (ctx) => {
      const user = await this.userService.findByTelegramId(ctx.userId);

      // Handle AI Chat mode
      if (ctx.session.aiChatMode) {
        await this.handleAIChatMessage(ctx, ctx.message.text);
        return;
      }

      // Check if user needs to provide timezone first
      if (
        !user.timezone &&
        (ctx.session.step === 'adding_task' ||
          ctx.session.step === 'adding_habit')
      ) {
        await this.askForTimezone(ctx);
        return;
      }

      // Handle timezone setting
      if (ctx.session.step === 'waiting_for_city') {
        await this.handleCityInput(ctx, ctx.message.text);
        return;
      }

      // Handle task creation
      if (ctx.session.step === 'waiting_for_task_title') {
        await this.handleTaskCreation(ctx, ctx.message.text);
        return;
      }

      // Handle custom feedback
      if (ctx.session.step === 'waiting_for_custom_feedback') {
        await this.completeFeedback(ctx, ctx.message.text);
        return;
      }

      // Handle waiting for reminder time
      if (ctx.session.waitingForReminderTime && ctx.session.pendingReminder) {
        await this.handleReminderTimeInput(ctx, ctx.message.text);
        return;
      }

      if (ctx.session.step === 'onboarding_waiting_habit') {
        const habitName = ctx.message.text;

        // Here you would typically save the habit to database
        // For now, just acknowledge and continue

        await ctx.replyWithMarkdown(`
‚úÖ *–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞: "${habitName}"*

–ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.

üéØ –ü—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É...
        `);

        setTimeout(async () => {
          await this.showOnboardingStep3(ctx);
        }, 2000);
        return;
      }

      // Handle reminder requests in regular text mode
      if (this.isReminderRequest(ctx.message.text)) {
        await this.processReminderFromText(ctx, ctx.message.text);
        return;
      }

      // Skip if this is a command (starts with /)
      if (ctx.message.text.startsWith('/')) {
        return; // Let command handlers process it
      }

      // Default: show help or main menu
      await ctx.replyWithMarkdown(`
ü§î *–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É*

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.

üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å "–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ..." —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
      `);
    });

    // Handle voice messages
    this.bot.on('voice', async (ctx) => {
      await this.handleAudioMessage(ctx, 'voice');
    });

    // Handle audio files
    this.bot.on('audio', async (ctx) => {
      await this.handleAudioMessage(ctx, 'audio');
    });

    // Main menu callback handlers
    this.bot.action('menu_tasks', async (ctx) => {
      await ctx.answerCbQuery();

      const user = await this.userService.findByTelegramId(ctx.userId);
      if (!user.timezone) {
        ctx.session.step = 'adding_task';
        await this.askForTimezone(ctx);
      } else {
        await this.showTasksMenu(ctx);
      }
    });

    this.bot.action('menu_habits', async (ctx) => {
      await ctx.answerCbQuery();

      const user = await this.userService.findByTelegramId(ctx.userId);
      if (!user.timezone) {
        ctx.session.step = 'adding_habit';
        await this.askForTimezone(ctx);
      } else {
        await ctx.replyWithMarkdown(
          'üîÑ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
        );
      }
    });

    this.bot.action('menu_mood', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        'üòä *–û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
      );
    });

    this.bot.action('menu_focus', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown('‚è∞ *–°–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    });

    this.bot.action('menu_stats', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown('üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    });

    this.bot.action('menu_settings', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown('‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    });

    this.bot.action('menu_achievements', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown('üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    });

    this.bot.action('menu_ai', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown('üí° *–ò–ò –ü–æ–º–æ—â–Ω–∏–∫* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    });

    // New main menu handlers
    this.bot.action('add_item', async (ctx) => {
      await ctx.answerCbQuery();
      const keyboard = {
        inline_keyboard: [
          [{ text: 'üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'tasks_add' }],
          [{ text: 'üîÑ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É', callback_data: 'habits_add' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }],
        ],
      };
      await ctx.replyWithMarkdown('‚ûï *–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?*', {
        reply_markup: keyboard,
      });
    });

    this.bot.action('my_items', async (ctx) => {
      await ctx.answerCbQuery();
      const keyboard = {
        inline_keyboard: [
          [{ text: 'üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'tasks_list' }],
          [{ text: 'üîÑ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'habits_list' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }],
        ],
      };
      await ctx.replyWithMarkdown('üìã *–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?*', {
        reply_markup: keyboard,
      });
    });

    this.bot.action('my_progress', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await ctx.replyWithMarkdown(`
üìà *–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å*

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
‚≠ê –û–ø—ã—Ç: ${user.totalXp} XP

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

 –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: ${user.currentStreak} –¥–Ω–µ–π
üìÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${user.createdAt.toLocaleDateString('ru-RU')}

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üöÄ
      `);
    });

    this.bot.action('ai_chat', async (ctx) => {
      await ctx.answerCbQuery();
      await this.startAIChat(ctx);
    });

    this.bot.action('more_functions', async (ctx) => {
      await ctx.answerCbQuery();
      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç—Ä–∏–∫–∏', callback_data: 'progress_streaks' },
            { text: 'üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥—ã', callback_data: 'leaderboards' },
          ],
          [
            { text: 'ü•á –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data: 'achievements' },
            { text: 'üöÄ –ß–µ–ª–ª–µ–Ω–¥–∂–∏', callback_data: 'challenges' },
          ],
          [
            {
              text: 'üí∞ –ë–æ–Ω—É—Å—ã –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã',
              callback_data: 'bonuses_referrals',
            },
            { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'user_profile' },
          ],
          [
            { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings_menu' },
            { text: 'üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω', callback_data: 'shop' },
          ],
          [{ text: 'üé≠ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏', callback_data: 'dependencies' }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
        ],
      };
      await ctx.replyWithMarkdown(
        `
üöÄ *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏*

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:
      `,
        {
          reply_markup: keyboard,
        },
      );
    });

    // Additional functions handlers
    this.bot.action('progress_streaks', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await ctx.replyWithMarkdown(
        `
üéØ *–ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç—Ä–∏–∫–∏*

üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚≠ê –û–ø—ã—Ç: ${user.totalXp} XP
üî• –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: ${user.currentStreak} –¥–Ω–µ–π
üìÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${user.createdAt.toLocaleDateString('ru-RU')}

**–°—Ç—Ä–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:**
üìù –ó–∞–¥–∞—á–∏: ${user.currentStreak} –¥–Ω–µ–π
üîÑ –ü—Ä–∏–≤—ã—á–∫–∏: –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—Ç—Ä–∏–∫–∞! üöÄ
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    });

    this.bot.action('leaderboards', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
üèÜ *–õ–∏–¥–µ—Ä–±–æ—Ä–¥—ã*

**–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ XP:**
ü•á 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å1 - 5000 XP
ü•à 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å2 - 4500 XP  
ü•â 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å3 - 4000 XP
...

*–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —Å–∫–æ—Ä–æ –±—É–¥—É—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!*

–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞—á–∏ –∏ –ø–æ–¥–Ω–∏–º–∞–π—Ç–µ—Å—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ! üìà
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    });

    this.bot.action('achievements', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await ctx.replyWithMarkdown(
        `
ü•á *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*

**–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:**
üèÜ –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ - –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
‚≠ê –ù–æ–≤–∏—á–æ–∫ - –ü–æ–ª—É—á–∏—Ç—å 100 XP
üìÖ –ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ - –°—Ç—Ä–∏–∫ 3 –¥–Ω—è

**–í –ø—Ä–æ—Ü–µ—Å—Å–µ:**
üî• –ú–∞—Å—Ç–µ—Ä —Å—Ç—Ä–∏–∫–∞ - –°—Ç—Ä–∏–∫ 7 –¥–Ω–µ–π (${user.currentStreak}/7)
üí™ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π - –í—ã–ø–æ–ª–Ω–∏—Ç—å 50 –∑–∞–¥–∞—á
üöÄ –≠–Ω—Ç—É–∑–∏–∞—Å—Ç - –ü–æ–ª—É—á–∏—Ç—å 1000 XP (${user.totalXp}/1000)

**–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:**
üéØ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª - –°—Ç—Ä–∏–∫ 30 –¥–Ω–µ–π
‚ö° –ú–æ–ª–Ω–∏—è - –í—ã–ø–æ–ª–Ω–∏—Ç—å 10 –∑–∞–¥–∞—á –∑–∞ –¥–µ–Ω—å
üåü –õ–µ–≥–µ–Ω–¥–∞ - –ü–æ–ª—É—á–∏—Ç—å 10000 XP

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π! üéâ
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    });

    this.bot.action('challenges', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
üöÄ *–ß–µ–ª–ª–µ–Ω–¥–∂–∏*

**–ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è:**
‚è∞ 7-–¥–Ω–µ–≤–Ω—ã–π –º–∞—Ä–∞—Ñ–æ–Ω –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
üìù –í—ã–ø–æ–ª–Ω–∏—Ç—å 21 –∑–∞–¥–∞—á—É –∑–∞ –Ω–µ–¥–µ–ª—é
üéØ –£–ª—É—á—à–∏—Ç—å —Å—Ç—Ä–∏–∫ –¥–æ 10 –¥–Ω–µ–π

**–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã:**
üåÖ –†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞ - 5 –∑–∞–¥–∞—á –¥–æ 10:00
üåô –ù–æ—á–Ω–∞—è —Å–æ–≤–∞ - 3 –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ 20:00
‚ö° –°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —Ä–µ–∂–∏–º - 10 –∑–∞–¥–∞—á –∑–∞ –¥–µ–Ω—å

**–ù–∞–≥—Ä–∞–¥—ã:**
üèÜ –ó–Ω–∞—á–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
‚≠ê –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ XP
üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

*–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —Å–∫–æ—Ä–æ –Ω–æ–≤—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏!*
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    });

    this.bot.action('bonuses_referrals', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
üí∞ *–ë–æ–Ω—É—Å—ã –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã*

**–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:**
üîó –í–∞—à –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: \`REF${ctx.userId.slice(-6)}\`
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: 0
üéÅ –ë–æ–Ω—É—Å –∑–∞ –¥—Ä—É–≥–∞: +500 XP

**–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã:**
üìÖ –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É: +50 XP
üéØ –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–Ω—è: +100 XP
üî• –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç—Ä–∏–∫–∞: +25 XP

**–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã:**
üèÜ 7 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: +300 XP
‚≠ê 21 –∑–∞–¥–∞—á–∞ –≤ –Ω–µ–¥–µ–ª—é: +500 XP

**–ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞:**
1. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
2. –î—Ä—É–≥ –≤–≤–æ–¥–∏—Ç –∫–æ–¥ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏  
3. –í—ã –æ–±–∞ –ø–æ–ª—É—á–∞–µ—Ç–µ +500 XP!

*–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —Å–∫–æ—Ä–æ –ø–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫!*
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    });

    this.bot.action('user_profile', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await ctx.replyWithMarkdown(
        `
üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*

**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
üìõ –ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üÜî ID: ${user.id}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${user.createdAt.toLocaleDateString('ru-RU')}
üåç –ì–æ—Ä–æ–¥: ${user.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone || '–ù–µ —É–∫–∞–∑–∞–Ω'}

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚≠ê –û–±—â–∏–π –æ–ø—ã—Ç: ${user.totalXp} XP  
üî• –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: ${user.currentStreak} –¥–Ω–µ–π
üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–∫: ${user.currentStreak} –¥–Ω–µ–π

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.notifications ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
üé® –¢–µ–º–∞: ${user.theme || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'}
ü§ñ –ò–ò-—Ä–µ–∂–∏–º: ${user.aiMode ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'edit_profile' },
                { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' },
              ],
            ],
          },
        },
      );
    });

    this.bot.action('settings_menu', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*

üöß *–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*

–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!

–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚Ä¢ üé® –¢–µ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
‚Ä¢ üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
‚Ä¢ ü§ñ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
‚Ä¢ üë§ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è
‚Ä¢ ÔøΩ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏

ÔøΩ –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π email –≤ –ø—Ä–æ—Ñ–∏–ª–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ.
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    });

    this.bot.action('shop', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
üõçÔ∏è *–ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π*

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:**
‚ö° –ü—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç - 299‚ÇΩ/–º–µ—Å—è—Ü
üéØ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞  
üé® –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ç–µ–º—ã
ü§ñ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ò–ò

**–ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è:**
üé® –¢–µ–º—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ - –æ—Ç 99‚ÇΩ
üèÜ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–∫–∏ - –æ—Ç 49‚ÇΩ
‚ö° –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ - –æ—Ç 29‚ÇΩ

**–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è:**
üìà –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel - 199‚ÇΩ
üì± –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - 399‚ÇΩ
üîî Smart-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - 149‚ÇΩ

*–ú–∞–≥–∞–∑–∏–Ω –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —Å–∫–æ—Ä–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è!*
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    });

    // Billing handlers
    this.bot.action('show_limits', async (ctx) => {
      await ctx.answerCbQuery();
      const subscriptionStatus =
        await this.billingService.getSubscriptionStatus(ctx.userId);

      const limitsText =
        subscriptionStatus.limits.dailyReminders === -1
          ? '‚àû (–±–µ–∑–ª–∏–º–∏—Ç)'
          : subscriptionStatus.limits.dailyReminders.toString();
      const aiLimitsText =
        subscriptionStatus.limits.dailyAiQueries === -1
          ? '‚àû (–±–µ–∑–ª–∏–º–∏—Ç)'
          : subscriptionStatus.limits.dailyAiQueries.toString();

      let statusMessage = '';
      if (subscriptionStatus.isTrialActive) {
        statusMessage = `üéÅ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:** ${subscriptionStatus.daysRemaining} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å`;
      } else {
        statusMessage = `üíé **–ü–æ–¥–ø–∏—Å–∫–∞:** ${
          subscriptionStatus.type === 'FREE'
            ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è'
            : subscriptionStatus.type === 'PREMIUM'
              ? 'Premium'
              : 'Premium Plus'
        }`;
      }

      await ctx.replyWithMarkdown(
        `
üìä *–í–∞—à–∏ –ª–∏–º–∏—Ç—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ*

${statusMessage}

**–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:**
üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${subscriptionStatus.usage.dailyReminders}/${limitsText}
üß† –ò–ò-–∑–∞–ø—Ä–æ—Å—ã: ${subscriptionStatus.usage.dailyAiQueries}/${aiLimitsText}
üìù –ó–∞–¥–∞—á–∏: ${subscriptionStatus.usage.dailyTasks}/${subscriptionStatus.limits.dailyTasks === -1 ? '‚àû' : subscriptionStatus.limits.dailyTasks}
üîÑ –ü—Ä–∏–≤—ã—á–∫–∏: ${subscriptionStatus.usage.dailyHabits}/${subscriptionStatus.limits.dailyHabits === -1 ? '‚àû' : subscriptionStatus.limits.dailyHabits}

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: ${subscriptionStatus.limits.advancedAnalytics ? '‚úÖ' : '‚ùå'}
üé® –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–º—ã: ${subscriptionStatus.limits.customThemes ? '‚úÖ' : '‚ùå'}
üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: ${subscriptionStatus.limits.prioritySupport ? '‚úÖ' : '‚ùå'}
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Premium',
                  callback_data: 'upgrade_premium',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });

    this.bot.action('upgrade_premium', async (ctx) => {
      await ctx.answerCbQuery();
      const trialInfo = await this.billingService.getTrialInfo(ctx.userId);

      let trialText = '';
      if (trialInfo.isTrialActive) {
        trialText = `üéÅ **–£ –≤–∞—Å –µ—Å—Ç—å ${trialInfo.daysRemaining} –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞!**

`;
      }

      await ctx.replyWithMarkdown(
        `
üíé *–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ Premium*

${trialText}**Premium –ø–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:**

üîî **50 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π** –≤ –¥–µ–Ω—å (—Å–µ–π—á–∞—Å 5)
üß† **100 –ò–ò-–∑–∞–ø—Ä–æ—Å–æ–≤** –≤ –¥–µ–Ω—å (—Å–µ–π—á–∞—Å 10)
üìù **100 –∑–∞–¥–∞—á** –≤ –¥–µ–Ω—å (—Å–µ–π—á–∞—Å 10)
üîÑ **20 –ø—Ä–∏–≤—ã—á–µ–∫** –≤ –¥–µ–Ω—å (—Å–µ–π—á–∞—Å 3)
üìä **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**
üé® **–ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–º—ã**
‚ö° **20 —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–π** –≤ –¥–µ–Ω—å

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** 299‚ÇΩ/–º–µ—Å—è—Ü

**Premium Plus** (–±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø–ª–∞–Ω):
‚àû **–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ** –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∑–∞–¥–∞—á–∏, –ø—Ä–∏–≤—ã—á–∫–∏
üöÄ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞**
üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** 599‚ÇΩ/–º–µ—Å—è—Ü

*–°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!*
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã', callback_data: 'show_limits' }],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });

    this.bot.action('dependencies', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
üé≠ *–ë–ª–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π*

**–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫:**
üö≠ –ö—É—Ä–µ–Ω–∏–µ - –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üç∫ –ê–ª–∫–æ–≥–æ–ª—å - —Ç—Ä–µ–∫–∏–Ω–≥ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
üì± –°–æ—Ü—Å–µ—Ç–∏ - –≤—Ä–µ–º—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö
üéÆ –ò–≥—Ä—ã - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–≥—Ä–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
üõí –ü–æ–∫—É–ø–∫–∏ - –∫–æ–Ω—Ç—Ä–æ–ª—å —Ç—Ä–∞—Ç
üç∞ –°–ª–∞–¥–∫–æ–µ - —É—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π

**–ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:**
üìä –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –¥–Ω—è–º
‚è∞ –¢—Ä–∏–≥–≥–µ—Ä-–∞–Ω–∞–ª–∏–∑ (–∫–æ–≥–¥–∞ –∏ –ø–æ—á–µ–º—É)
üí™ –¢–µ—Ö–Ω–∏–∫–∏ –±–æ—Ä—å–±—ã —Å —Ç—è–≥–æ–π
üéØ –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–π –ø–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—é
üìù –î–Ω–µ–≤–Ω–∏–∫ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
üë• –°–æ–æ–±—â–µ—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
üìû –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è –ø–æ–º–æ—â–∏
üß† –ò–ò-—Å–æ–≤–µ—Ç—ã –¥–ª—è –±–æ—Ä—å–±—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
üìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –î–∞–Ω–Ω—ã–π –±–ª–æ–∫ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –ø–æ–º–æ—â—å.

*–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —Å–∫–æ—Ä–æ –¥–æ—Å—Ç—É–ø–Ω–∞!*
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üìä –ù–∞—á–∞—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥',
                  callback_data: 'start_dependency_tracking',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    });

    this.bot.action('start_dependency_tracking', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
üìä *–ù–∞—á–∞—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏*

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üö≠ –ö—É—Ä–µ–Ω–∏–µ', callback_data: 'track_smoking' },
                { text: 'üç∫ –ê–ª–∫–æ–≥–æ–ª—å', callback_data: 'track_alcohol' },
              ],
              [
                { text: 'üì± –°–æ—Ü—Å–µ—Ç–∏', callback_data: 'track_social' },
                { text: 'üéÆ –ò–≥—Ä—ã', callback_data: 'track_gaming' },
              ],
              [
                { text: 'üõí –ü–æ–∫—É–ø–∫–∏', callback_data: 'track_shopping' },
                { text: 'üç∞ –°–ª–∞–¥–∫–æ–µ', callback_data: 'track_sweets' },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'dependencies' }],
            ],
          },
        },
      );
    });

    // Dependency tracking handlers (placeholder for now)
    ['smoking', 'alcohol', 'social', 'gaming', 'shopping', 'sweets'].forEach(
      (type) => {
        this.bot.action(`track_${type}`, async (ctx) => {
          await ctx.answerCbQuery();
          await ctx.replyWithMarkdown(
            `
üöß *–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*

–¢—Ä–µ–∫–∏–Ω–≥ ${
              type === 'smoking'
                ? '–∫—É—Ä–µ–Ω–∏—è'
                : type === 'alcohol'
                  ? '–∞–ª–∫–æ–≥–æ–ª—è'
                  : type === 'social'
                    ? '—Å–æ—Ü—Å–µ—Ç–µ–π'
                    : type === 'gaming'
                      ? '–∏–≥—Ä'
                      : type === 'shopping'
                        ? '–ø–æ–∫—É–ø–æ–∫'
                        : '—Å–ª–∞–¥–∫–æ–≥–æ'
            } –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!

üìß –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π email –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ.
        `,
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                      callback_data: 'start_dependency_tracking',
                    },
                  ],
                ],
              },
            },
          );
        });
      },
    );

    this.bot.action('faq_support', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(`
‚ùì *FAQ / –ü–æ–¥–¥–µ—Ä–∂–∫–∞*

*–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*

**–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É?**
–ù–∞–∂–º–∏—Ç–µ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É/–ø—Ä–∏–≤—ã—á–∫—É" ‚Üí "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"

**–ö–∞–∫ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ?**
–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏" –∏ –Ω–∞–∂–º–∏—Ç–µ ‚úÖ —Ä—è–¥–æ–º —Å –∑–∞–¥–∞—á–µ–π

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ XP?**
–ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ–ø—ã—Ç –∏ –ø–æ–≤—ã—à–∞–µ—Ç–µ —É—Ä–æ–≤–µ–Ω—å

**–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?**
–ù–∞–ø–∏—à–∏—Ç–µ /feedback –¥–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
      `);
    });

    this.bot.action('add_habit_direct', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        'üîÑ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
      );
    });

    this.bot.action('back_to_menu', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showMainMenu(ctx);
    });

    // AI Chat handlers
    this.bot.action('ai_analyze_profile', async (ctx) => {
      await this.handleAIAnalyzeProfile(ctx);
    });

    this.bot.action('ai_task_recommendations', async (ctx) => {
      await this.handleAITaskRecommendations(ctx);
    });

    this.bot.action('ai_habit_help', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
üéØ *–ü–æ–º–æ—â—å —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏*

–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥—É—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
            ],
          },
        },
      );
    });

    this.bot.action('ai_time_planning', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        `
‚è∞ *–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏*

–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏.
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
            ],
          },
        },
      );
    });

    this.bot.action('ai_custom_question', async (ctx) => {
      await this.handleAICustomQuestion(ctx);
    });

    this.bot.action('ai_back_menu', async (ctx) => {
      await ctx.answerCbQuery();
      await this.startAIChat(ctx);
    });

    this.bot.action('exit_ai_chat', async (ctx) => {
      await ctx.answerCbQuery();
      ctx.session.aiChatMode = false;
      await ctx.replyWithMarkdown(`
‚úÖ *–ß–∞—Ç —Å –ò–ò –∑–∞–≤–µ—Ä—à—ë–Ω*

–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—â–µ–Ω–∏–µ! –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
      `);
      await this.showMainMenu(ctx);
    });

    // Task management handlers
    this.bot.action('tasks_add', async (ctx) => {
      await ctx.answerCbQuery();
      await this.startAddingTask(ctx);
    });

    this.bot.action('tasks_list', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showTasksList(ctx);
    });

    this.bot.action('tasks_today', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showTodayTasks(ctx);
    });

    // Handle task completion
    this.bot.action(/^task_complete_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const taskId = ctx.match[1];
      await this.completeTask(ctx, taskId);
    });

    // Handle back to tasks menu
    this.bot.action('back_to_tasks', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showTasksMenu(ctx);
    });

    // Handle back to main menu
    this.bot.action('back_to_main', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showMainMenu(ctx);
    });

    // Feedback system handlers
    this.bot.command('feedback', async (ctx) => {
      await this.showFeedbackSurvey(ctx);
    });

    this.bot.action(/^feedback_rating_(\d+)$/, async (ctx) => {
      const rating = parseInt(ctx.match[1]);
      await this.handleFeedbackRating(ctx, rating);
    });

    this.bot.action(/^feedback_like_(.+)$/, async (ctx) => {
      const feature = ctx.match[1];

      // For /feedback command, complete survey immediately
      if (!ctx.session.feedbackRating) {
        await this.completeFeedbackSurvey(ctx, feature);
      } else {
        // For automatic feedback request, show improvement options
        await this.handleFeedbackImprovement(ctx, feature);
      }
    });

    this.bot.action(/^feedback_improve_(.+)$/, async (ctx) => {
      const improvement = ctx.match[1];
      if (improvement === 'custom') {
        await ctx.answerCbQuery();
        await ctx.replyWithMarkdown(`
üìù *–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —É–ª—É—á—à–∏—Ç—å:*

–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è...
        `);
        ctx.session.step = 'waiting_for_custom_feedback';
      } else {
        // Check if this is from /feedback command (no rating) or automatic request (with rating)
        if (ctx.session.feedbackRating) {
          await this.completeFeedback(ctx, improvement);
        } else {
          await this.completeFeedbackSurvey(ctx, improvement);
        }
      }
    });

    this.bot.action('feedback_later', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(`
üïê *–•–æ—Ä–æ—à–æ, —Å–ø—Ä–æ—Å–∏–º –ø–æ–∑–∂–µ!*

–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∫–æ–º–∞–Ω–¥–æ–π /feedback
      `);
    });

    // Error handling
    this.bot.catch((err, ctx) => {
      this.logger.error(`Bot error for ${ctx.updateType}:`, err);
      ctx.reply(
        'üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
      );
    });
  }

  async onModuleInit() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    this.launch().catch((error) => {
      this.logger.error('Failed to launch bot:', error);
    });
  }

  async onModuleDestroy() {
    await this.stop();
  }

  private async startOnboarding(ctx: BotContext) {
    // Step 1: Welcome
    await this.showOnboardingStep1(ctx);
  }

  private async showOnboardingStep1(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üöÄ –ù–∞—á–∞—Ç—å', callback_data: 'onboarding_start' },
          {
            text: 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã',
            callback_data: 'onboarding_examples',
          },
        ],
      ],
    };

    await ctx.replyWithMarkdown(
      `ü§ñ *–ü—Ä–∏–≤–µ—Ç! –Ø Ticky AI ‚Äî —Ç–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º –∏ –∑–∞–¥–∞—á–∞–º —Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π.*`,
      { reply_markup: keyboard },
    );

    ctx.session.step = 'onboarding_welcome';
  }

  private async showOnboardingStep2(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [
          {
            text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É',
            callback_data: 'onboarding_add_habit',
          },
          { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'onboarding_skip_habit' },
        ],
      ],
    };

    await ctx.replyWithMarkdown(
      `
üöÄ *–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç*

–î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º —Ç–≤–æ—é –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É!
–ù–∞–ø—Ä–∏–º–µ—Ä: "–ü–∏—Ç—å –≤–æ–¥—É"

*–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:*
    `,
      { reply_markup: keyboard },
    );

    ctx.session.step = 'onboarding_quick_start';
  }

  private async showOnboardingStep3(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [{ text: '‚úÖ –ü–æ–Ω—è—Ç–Ω–æ!', callback_data: 'onboarding_complete' }],
      ],
    };

    await ctx.replyWithMarkdown(
      `
üìö *–ú–∏–Ω–∏-FAQ*

*–ß–¢–û –£–ú–ï–ï–¢ –ë–û–¢?*

‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏
‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
‚Ä¢ –í–æ–≤–ª–µ–∫–∞—Ç—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∏
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö

üéØ –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å?
    `,
      { reply_markup: keyboard },
    );

    ctx.session.step = 'onboarding_faq';
  }

  private async showMainMenu(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É/–ø—Ä–∏–≤—ã—á–∫—É', callback_data: 'add_item' }],
        [{ text: 'ÔøΩ –ú–æ–∏ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'my_items' }],
        [{ text: 'ÔøΩ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', callback_data: 'my_progress' }],
        [{ text: 'üß† –ß–∞—Ç —Å –ò–ò', callback_data: 'ai_chat' }],
        [{ text: '‚öôÔ∏è –ï—â—ë —Ñ—É–Ω–∫—Ü–∏–∏', callback_data: 'more_functions' }],
        [{ text: '‚ùì FAQ / –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'faq_support' }],
        [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É', callback_data: 'add_habit_direct' }],
      ],
    };

    const user = await this.userService.findByTelegramId(ctx.userId);

    await ctx.replyWithMarkdown(
      `
üëã *–ü—Ä–∏–≤–µ—Ç, ${this.userService.getDisplayName(user)}!*

ü§ñ –Ø DailyCheck Bot - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏.
    `,
      { reply_markup: keyboard },
    );

    // Check if we should show feedback request
    setTimeout(() => this.checkAndShowFeedbackRequest(ctx), 2000);
  }

  async launch() {
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
      this.bot
        .launch()
        .then(() => {
          this.logger.log('üöÄ Telegram bot launched successfully');
        })
        .catch((error) => {
          this.logger.error('‚ùå Failed to launch Telegram bot:', error);
        });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
      this.logger.log('ü§ñ Telegram bot launch initiated');
    } catch (error) {
      this.logger.error('‚ùå Error during bot initialization:', error);
      throw error;
    }
  }

  async stop() {
    this.bot.stop('SIGINT');
    this.logger.log('üõë Telegram bot stopped');
  }

  getBotInstance(): Telegraf<BotContext> {
    return this.bot;
  }

  // Task management methods
  private async showTasksMenu(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'tasks_add' },
          { text: 'üìã –í—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'tasks_list' },
        ],
        [{ text: 'üìÖ –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data: 'tasks_today' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_main' }],
      ],
    };

    await ctx.replyWithMarkdown(
      `
üìù *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    `,
      { reply_markup: keyboard },
    );
  }

  private async startAddingTask(ctx: BotContext) {
    // Check billing limits for tasks
    const limitCheck = await this.billingService.checkUsageLimit(
      ctx.userId,
      'dailyTasks',
    );

    if (!limitCheck.allowed) {
      await ctx.replyWithMarkdown(
        limitCheck.message || 'üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–¥–∞—á',
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Premium',
                  callback_data: 'upgrade_premium',
                },
              ],
              [{ text: 'üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã', callback_data: 'show_limits' }],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_tasks' }],
            ],
          },
        },
      );
      return;
    }

    await ctx.replyWithMarkdown(`
‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏*

üìä **–ó–∞–¥–∞—á —Å–µ–≥–æ–¥–Ω—è:** ${limitCheck.current}/${limitCheck.limit === -1 ? '‚àû' : limitCheck.limit}

üìù –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:
    `);

    ctx.session.step = 'waiting_for_task_title';
  }

  private async handleTaskCreation(ctx: BotContext, taskTitle: string) {
    try {
      const task = await this.taskService.createTask({
        userId: ctx.userId,
        title: taskTitle.trim(),
        description: '',
        priority: 'MEDIUM' as any,
      });

      // Increment daily tasks counter
      await this.billingService.incrementUsage(ctx.userId, 'dailyTasks');

      // Get current user stats to increment
      const user = await this.userService.findByTelegramId(ctx.userId);
      await this.userService.updateUserStats(ctx.userId, {
        totalTasks: user.totalTasks + 1,
      });

      // Get current usage for display
      const usageInfo = await this.billingService.checkUsageLimit(
        ctx.userId,
        'dailyTasks',
      );

      await ctx.replyWithMarkdown(`
‚úÖ *–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!*

üìù *${task.title}*
‚ö° XP –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${task.xpReward}
üìä **–ó–∞–¥–∞—á —Å–µ–≥–æ–¥–Ω—è:** ${usageInfo.current}/${usageInfo.limit === -1 ? '‚àû' : usageInfo.limit}

–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫!
      `);

      ctx.session.step = undefined;
      setTimeout(() => this.showTasksMenu(ctx), 1500);
    } catch (error) {
      this.logger.error('Error creating task:', error);
      await ctx.replyWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
      `);
      ctx.session.step = undefined;
    }
  }

  private async showTasksList(ctx: BotContext) {
    try {
      const tasks = await this.taskService.findTasksByUserId(ctx.userId);

      if (tasks.length === 0) {
        await ctx.replyWithMarkdown(`
üìã *–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç*

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!
        `);
        return;
      }

      const pendingTasks = tasks.filter(
        (task) => task.status === 'PENDING' || task.status === 'IN_PROGRESS',
      );
      const completedTasks = tasks.filter(
        (task) => task.status === 'COMPLETED',
      );

      let message = 'üìã *–í–∞—à–∏ –∑–∞–¥–∞—á–∏:*\n\n';

      if (pendingTasks.length > 0) {
        message += '*üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n';
        for (const task of pendingTasks) {
          const priorityEmoji = this.getPriorityEmoji(task.priority);
          message += `${priorityEmoji} ${task.title}\n`;
          message += `    ${task.xpReward} XP\n\n`;
        }
      }

      if (completedTasks.length > 0) {
        message += '*‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n';
        for (const task of completedTasks.slice(0, 5)) {
          message += `‚úÖ ~~${task.title}~~\n`;
        }
        if (completedTasks.length > 5) {
          message += `   ... –∏ –µ—â–µ ${completedTasks.length - 5} –∑–∞–¥–∞—á\n`;
        }
      }

      // Create keyboard with task completion buttons
      const keyboard = {
        inline_keyboard: [
          ...pendingTasks.slice(0, 5).map((task) => [
            {
              text: `‚úÖ ${task.title.substring(0, 25)}${task.title.length > 25 ? '...' : ''}`,
              callback_data: `task_complete_${task.id}`,
            },
          ]),
          [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º', callback_data: 'back_to_tasks' }],
        ],
      };

      await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
    } catch (error) {
      this.logger.error('Error showing tasks list:', error);
      await ctx.replyWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á');
    }
  }

  private async showTodayTasks(ctx: BotContext) {
    try {
      const tasks = await this.taskService.getTodayTasks(ctx.userId);

      if (tasks.length === 0) {
        await ctx.replyWithMarkdown(`
üìÖ *–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*

–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç! üéâ
        `);
        return;
      }

      let message = 'üìÖ *–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n';

      for (const task of tasks) {
        const statusEmoji = task.status === 'COMPLETED' ? '‚úÖ' : 'üîÑ';
        const priorityEmoji = this.getPriorityEmoji(task.priority);
        message += `${statusEmoji} ${priorityEmoji} ${task.title}\n`;
        if (task.status !== 'COMPLETED') {
          message += `   üéØ ${task.xpReward} XP\n`;
        }
        message += '\n';
      }

      const pendingTasks = tasks.filter((task) => task.status !== 'COMPLETED');
      const keyboard = {
        inline_keyboard: [
          ...pendingTasks.slice(0, 3).map((task) => [
            {
              text: `‚úÖ ${task.title.substring(0, 25)}${task.title.length > 25 ? '...' : ''}`,
              callback_data: `task_complete_${task.id}`,
            },
          ]),
          [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º', callback_data: 'back_to_tasks' }],
        ],
      };

      await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
    } catch (error) {
      this.logger.error('Error showing today tasks:', error);
      await ctx.replyWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è');
    }
  }

  private async completeTask(ctx: BotContext, taskId: string) {
    try {
      const result = await this.taskService.completeTask(taskId, ctx.userId);

      // Get current user stats to increment and check level up
      const userBefore = await this.userService.findByTelegramId(ctx.userId);
      const newTotalXp = userBefore.totalXp + result.xpGained;

      await this.userService.updateUserStats(ctx.userId, {
        completedTasks: userBefore.completedTasks + 1,
        todayTasks: userBefore.todayTasks + 1,
        xpGained: result.xpGained,
      });

      // Get updated user to check for level up
      const userAfter = await this.userService.findByTelegramId(ctx.userId);
      const leveledUp = userAfter.level > userBefore.level;

      let message = `
üéâ *–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*

‚úÖ ${result.task.title}
üéØ –ü–æ–ª—É—á–µ–Ω–æ XP: +${result.xpGained}
`;

      if (leveledUp) {
        message += `
üéä *–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –ù–û–í–´–ô –£–†–û–í–ï–ù–¨!*
‚≠ê –£—Ä–æ–≤–µ–Ω—å: ${userAfter.level} (–±—ã–ª–æ: ${userBefore.level})
üèÜ –û–±—â–∏–π XP: ${userAfter.totalXp}
`;
      } else {
        const xpToNext = this.userService.getXpToNextLevel(userAfter);
        const progress = this.userService.getLevelProgressRatio(userAfter);
        const progressBar = this.createProgressBar(progress);

        message += `
üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è:
${progressBar} ${Math.round(progress * 100)}%
üéØ –û—Å—Ç–∞–ª–æ—Å—å XP –¥–æ —É—Ä–æ–≤–Ω—è ${userAfter.level + 1}: ${xpToNext}
`;
      }

      message += '\n–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üëè';

      await ctx.replyWithMarkdown(message);

      setTimeout(() => this.showTasksMenu(ctx), leveledUp ? 3000 : 2000);
    } catch (error) {
      this.logger.error('Error completing task:', error);
      if (error.message.includes('already completed')) {
        await ctx.replyWithMarkdown('‚ÑπÔ∏è –≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!');
      } else {
        await ctx.replyWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
      }
    }
  }

  private getPriorityEmoji(priority: string): string {
    switch (priority) {
      case 'URGENT':
        return 'üî¥';
      case 'HIGH':
        return 'üü†';
      case 'MEDIUM':
        return 'üü°';
      case 'LOW':
        return 'üü¢';
      default:
        return '‚ö™';
    }
  }

  private async askForTimezone(ctx: BotContext) {
    await ctx.replyWithMarkdown(`
üåç *–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.*

üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:
(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù—å—é-–ô–æ—Ä–∫, –õ–æ–Ω–¥–æ–Ω)
    `);

    ctx.session.step = 'waiting_for_city';
  }

  private async handleCityInput(ctx: BotContext, cityName: string) {
    await ctx.replyWithMarkdown('üîç *–û–ø—Ä–µ–¥–µ–ª—è—é —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å...*');

    const result = await this.openaiService.getTimezoneByCity(cityName);

    if (!result) {
      await ctx.replyWithMarkdown(`
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –≥–æ—Ä–æ–¥–∞ "${cityName}"*

üìç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ:
      `);
      return;
    }

    // Save timezone and city to database
    await this.userService.updateUser(ctx.userId, {
      timezone: result.timezone,
      city: result.normalizedCity,
    });

    await ctx.replyWithMarkdown(`
‚úÖ *–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!*

üèôÔ∏è –ì–æ—Ä–æ–¥: ${result.normalizedCity}
üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${result.timezone}

–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∏!
    `);

    // Reset session step
    ctx.session.step = undefined;

    // Show main menu or continue with the original action
    await this.showMainMenu(ctx);
  }

  // Gamification helpers
  private createProgressBar(progress: number, length: number = 10): string {
    const filled = Math.round(progress * length);
    const empty = length - filled;
    return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
  }

  // Feedback system methods
  private async checkAndShowFeedbackRequest(ctx: BotContext) {
    const user = await this.userService.findByTelegramId(ctx.userId);
    const accountAge = Date.now() - user.createdAt.getTime();
    const threeDaysInMs = 3 * 24 * 60 * 60 * 1000;

    // Show feedback request after 3 days
    if (accountAge >= threeDaysInMs && !user.feedbackGiven) {
      await this.showFeedbackRequest(ctx);
    }
  }

  private async showFeedbackSurvey(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üéØ –£–¥–æ–±—Å—Ç–≤–æ', callback_data: 'feedback_like_convenience' },
          { text: 'üöÄ –ú–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π', callback_data: 'feedback_like_features' },
        ],
        [
          {
            text: 'üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è',
            callback_data: 'feedback_like_gamification',
          },
          { text: 'üîß –î—Ä—É–≥–æ–µ', callback_data: 'feedback_like_other' },
        ],
      ],
    };

    await ctx.replyWithMarkdown(
      `
üí≠ *–ú–∏–Ω–∏-–æ–ø—Ä–æ—Å*

üëç *–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è?*

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤ –±–æ—Ç–µ:
      `,
      { reply_markup: keyboard },
    );
  }

  private async showFeedbackRequest(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚≠êÔ∏è', callback_data: 'feedback_rating_5' },
          { text: 'üòä', callback_data: 'feedback_rating_4' },
          { text: 'üòê', callback_data: 'feedback_rating_3' },
          { text: 'üò†', callback_data: 'feedback_rating_2' },
        ],
        [{ text: '‚è∞ –ü–æ–∑–∂–µ', callback_data: 'feedback_later' }],
      ],
    };

    await ctx.replyWithMarkdown(
      `
üí≠ *–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞*

–ö–∞–∫ –≤–∞–º —Ä–∞–±–æ—Ç–∞ —Å Ticky AI? –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ!
      `,
      { reply_markup: keyboard },
    );
  }

  private async handleFeedbackRating(ctx: BotContext, rating: number) {
    await ctx.answerCbQuery();

    ctx.session.feedbackRating = rating;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üéØ –£–¥–æ–±—Å—Ç–≤–æ', callback_data: 'feedback_like_convenience' },
          { text: 'üöÄ –ú–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π', callback_data: 'feedback_like_features' },
        ],
        [
          {
            text: 'üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è',
            callback_data: 'feedback_like_gamification',
          },
          { text: 'üîß –î—Ä—É–≥–æ–µ', callback_data: 'feedback_like_other' },
        ],
      ],
    };

    await ctx.replyWithMarkdown(
      `
üëç *–ß—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è?*

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤ –±–æ—Ç–µ:
      `,
      { reply_markup: keyboard },
    );
  }

  private async handleFeedbackImprovement(
    ctx: BotContext,
    likedFeature: string,
  ) {
    await ctx.answerCbQuery();

    ctx.session.feedbackLiked = likedFeature;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üîß –ë–æ–ª—å—à–µ —Ñ—É–Ω–∫—Ü–∏–π',
            callback_data: 'feedback_improve_features',
          },
          { text: 'üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å', callback_data: 'feedback_improve_interface' },
        ],
        [
          {
            text: '‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã',
            callback_data: 'feedback_improve_speed',
          },
          {
            text: 'üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ',
            callback_data: 'feedback_improve_custom',
          },
        ],
        [
          {
            text: '‚úÖ –í—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç',
            callback_data: 'feedback_improve_nothing',
          },
        ],
      ],
    };

    await ctx.replyWithMarkdown(
      `
üí° *–ß—Ç–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —É–ª—É—á—à–∏—Ç—å?*

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ:
      `,
      { reply_markup: keyboard },
    );
  }

  private async completeFeedbackSurvey(ctx: BotContext, improvement: string) {
    await ctx.answerCbQuery();

    // Save feedback to database (survey-only, no rating)
    await this.userService.updateUser(ctx.userId, {
      feedbackGiven: true,
    });

    // Prepare improvement text
    const improvements = {
      convenience: 'üéØ –£–¥–æ–±—Å—Ç–≤–æ',
      features: 'üöÄ –ú–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π',
      gamification: 'üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è',
      other: 'üîß –î—Ä—É–≥–æ–µ',
    };

    const improvementText = improvements[improvement] || improvement;

    await ctx.replyWithMarkdown(`
‚ú® *–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ!*

–í—ã –≤—ã–±—Ä–∞–ª–∏: ${improvementText}

–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üíù

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö —Ü–µ–ª–µ–π! üöÄ
    `);
  }

  private async completeFeedback(ctx: BotContext, improvement: string) {
    await ctx.answerCbQuery();

    // Save feedback to database
    await this.userService.updateUser(ctx.userId, {
      feedbackGiven: true,
    });

    const ratingEmojis = ['üò†', 'üò†', 'üòê', 'üòä', '‚≠êÔ∏è'];
    const rating = ctx.session.feedbackRating || 3;
    const ratingEmoji = ratingEmojis[rating - 1];

    await ctx.replyWithMarkdown(`
üôè *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!*

${ratingEmoji} –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: ${rating}/5
üëç –ù—Ä–∞–≤–∏—Ç—Å—è: ${ctx.session.feedbackLiked || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üí° –£–ª—É—á—à–∏—Ç—å: ${improvement}

–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å! üíö
    `);

    // Clear feedback session data
    ctx.session.feedbackRating = undefined;
    ctx.session.feedbackLiked = undefined;
  }

  private async startAIChat(ctx: BotContext) {
    await ctx.replyWithMarkdown(
      `
üß† *–ò–ò –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*

–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. 

–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –≥–æ—Ç–æ–≤ –¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ:
üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∑–∞–¥–∞—á–∞–º–∏
üîÑ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–∏–≤—ã—á–µ–∫  
‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏
üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–µ–π
üìä –ü–æ–≤—ã—à–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

*–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:*
    `,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üìä –ê–Ω–∞–ª–∏–∑ –º–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è',
                callback_data: 'ai_analyze_profile',
              },
            ],
            [
              {
                text: 'üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞—á–∞–º',
                callback_data: 'ai_task_recommendations',
              },
            ],
            [
              {
                text: 'üéØ –ü–æ–º–æ—â—å —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏',
                callback_data: 'ai_habit_help',
              },
            ],
            [
              {
                text: '‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏',
                callback_data: 'ai_time_planning',
              },
            ],
            [
              {
                text: '‚úçÔ∏è –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å',
                callback_data: 'ai_custom_question',
              },
            ],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      },
    );

    // Set AI chat mode
    ctx.session.aiChatMode = true;
  }

  private async handleAIAnalyzeProfile(ctx: BotContext) {
    await ctx.answerCbQuery();

    const user = await this.userService.findByTelegramId(ctx.userId);
    const tasks = await this.taskService.findTasksByUserId(ctx.userId);

    // Create profile analysis prompt
    const profileData = {
      totalXp: user.totalXp,
      currentStreak: user.currentStreak,
      accountAge: Math.floor(
        (Date.now() - user.createdAt.getTime()) / (1000 * 60 * 60 * 24),
      ),
      totalTasks: tasks.length,
      completedTasks: tasks.filter((task) => task.completedAt !== null).length,
      timezone: user.timezone,
      city: user.city,
    };

    const analysisPrompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- –û–ø—ã—Ç: ${profileData.totalXp} XP
- –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: ${profileData.currentStreak} –¥–Ω–µ–π
- –î–Ω–µ–π —Å –±–æ—Ç–æ–º: ${profileData.accountAge}
- –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${profileData.totalTasks}
- –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: ${profileData.completedTasks}
- –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${profileData.timezone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
- –ì–æ—Ä–æ–¥: ${profileData.city || '–Ω–µ —É–∫–∞–∑–∞–Ω'}

–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–¥–æ 300 —Å–ª–æ–≤) —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
`;

    try {
      const analysis = await this.openaiService.getAIResponse(analysisPrompt);

      await ctx.replyWithMarkdown(
        `
üß† *–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:*

${analysis}

üí° *–•–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ?* –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    } catch (error) {
      await ctx.replyWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ—Ñ–∏–ª—è*

–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –ò–ò-–∞–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
      `);
    }
  }

  private async handleAITaskRecommendations(ctx: BotContext) {
    await ctx.answerCbQuery();

    const tasks = await this.taskService.findTasksByUserId(ctx.userId);
    const activeTasks = tasks.filter((task) => task.completedAt === null);

    const taskPrompt = `
–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${activeTasks.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: ${activeTasks.map((t) => t.title).join(', ')}

–î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ:
1. –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á
2. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è  
3. –†–∞–∑–±–∏–≤–∫–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á
4. –ü–æ–≤—ã—à–µ–Ω–∏—é –º–æ—Ç–∏–≤–∞—Ü–∏–∏

–û—Ç–≤–µ—Ç –¥–æ 250 —Å–ª–æ–≤.
`;

    try {
      const recommendations =
        await this.openaiService.getAIResponse(taskPrompt);

      await ctx.replyWithMarkdown(
        `
üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–∞—à–∏–º –∑–∞–¥–∞—á–∞–º:*

${recommendations}

*–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?* –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
            ],
          },
        },
      );
    } catch (error) {
      await ctx.replyWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π*

–ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
      `);
    }
  }

  private async handleAICustomQuestion(ctx: BotContext) {
    await ctx.answerCbQuery();

    await ctx.replyWithMarkdown(
      `
‚úçÔ∏è *–†–µ–∂–∏–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è*

–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–µ–º, –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. 

–Ø —É—á—Ç—É –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç!

*–ü—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–ö–∞–∫ –º–Ω–µ –ª—É—á—à–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É—Ç—Ä–æ?"
‚Ä¢ "–ü–æ—á–µ–º—É —è –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∏—Ä—É—é?"
‚Ä¢ "–ö–∞–∫ –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É —Ä–∞–Ω–æ –≤—Å—Ç–∞–≤–∞—Ç—å?"
    `,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
          ],
        },
      },
    );

    ctx.session.aiChatMode = true;
  }

  private async handleAIChatMessage(ctx: BotContext, message: string) {
    try {
      // Check billing limits for AI queries
      const limitCheck = await this.billingService.checkUsageLimit(
        ctx.userId,
        'dailyAiQueries',
      );

      if (!limitCheck.allowed) {
        await ctx.replyWithMarkdown(
          limitCheck.message || 'üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ò–ò-–∑–∞–ø—Ä–æ—Å–æ–≤',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Premium',
                    callback_data: 'upgrade_premium',
                  },
                ],
                [{ text: 'üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã', callback_data: 'show_limits' }],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
        return;
      }

      // Check if this is a reminder request
      const absoluteTimePatterns = [
        /–Ω–∞–ø–æ–º–Ω–∏\s+–º–Ω–µ\s+(.+?)\s+–≤\s+(\d{1,2}):(\d{2})/i,
        /–Ω–∞–ø–æ–º–Ω–∏\s+(.+?)\s+–≤\s+(\d{1,2}):(\d{2})/i,
        /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+(.+?)\s+–≤\s+(\d{1,2}):(\d{2})/i,
        /–ø–æ—Å—Ç–∞–≤—å\s+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+(.+?)\s+–Ω–∞\s+(\d{1,2}):(\d{2})/i,
      ];

      const relativeTimePatterns = [
        /–Ω–∞–ø–æ–º–Ω–∏\s+–º–Ω–µ\s+(.+?)\s+—á–µ—Ä–µ–∑\s+(\d+)\s+–º–∏–Ω—É—Ç/i,
        /–Ω–∞–ø–æ–º–Ω–∏\s+(.+?)\s+—á–µ—Ä–µ–∑\s+(\d+)\s+–º–∏–Ω—É—Ç/i,
        /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+(.+?)\s+—á–µ—Ä–µ–∑\s+(\d+)\s+–º–∏–Ω—É—Ç/i,
      ];

      // Check absolute time first
      let reminderMatch: RegExpMatchArray | null = null;
      for (const pattern of absoluteTimePatterns) {
        reminderMatch = message.match(pattern);
        if (reminderMatch) {
          const [, reminderText, hours, minutes] = reminderMatch;
          await this.handleReminderRequest(ctx, reminderText, hours, minutes);
          return;
        }
      }

      // Check relative time
      for (const pattern of relativeTimePatterns) {
        reminderMatch = message.match(pattern);
        if (reminderMatch) {
          const [, reminderText, minutesFromNow] = reminderMatch;
          await this.handleRelativeReminderRequest(
            ctx,
            reminderText,
            parseInt(minutesFromNow),
          );
          return;
        }
      }

      await ctx.replyWithMarkdown('ü§î *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...*');

      const user = await this.userService.findByTelegramId(ctx.userId);
      const tasks = await this.taskService.findTasksByUserId(ctx.userId);
      const activeTasks = tasks.filter((task) => task.completedAt === null);

      // Create context for AI
      const userContext = `
–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- –û–ø—ã—Ç: ${user.totalXp} XP
- –°—Ç—Ä–∏–∫: ${user.currentStreak} –¥–Ω–µ–π
- –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: ${activeTasks.length}
- –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
- –ì–æ—Ä–æ–¥: ${user.city || '–Ω–µ —É–∫–∞–∑–∞–Ω'}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${message}

–î–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç, —É—á–∏—Ç—ã–≤–∞—è —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç.
      `;

      const response = await this.openaiService.getAIResponse(userContext);

      // Increment AI usage counter
      await this.billingService.incrementUsage(ctx.userId, 'dailyAiQueries');

      // Get current usage for display
      const usageInfo = await this.billingService.checkUsageLimit(
        ctx.userId,
        'dailyAiQueries',
      );

      await ctx.replyWithMarkdown(
        `
üß† *–ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç:*

${response}

üìä **–ò–ò-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è:** ${usageInfo.current}/${usageInfo.limit === -1 ? '‚àû' : usageInfo.limit}

üí° *–ï—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã?* –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ!
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              [{ text: '‚ùå –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞', callback_data: 'exit_ai_chat' }],
            ],
          },
        },
      );
    } catch (error) {
      await ctx.replyWithMarkdown(
        `
‚ùå *–û—à–∏–±–∫–∞ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞*

–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å.
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
            ],
          },
        },
      );
    }
  }

  private async handleRelativeReminderRequest(
    ctx: BotContext,
    reminderText: string,
    minutesFromNow: number,
  ) {
    try {
      const user = await this.userService.findByTelegramId(ctx.userId);

      // Validate minutes
      if (minutesFromNow <= 0 || minutesFromNow > 1440) {
        // max 24 hours
        await ctx.replyWithMarkdown(`
‚ùå *–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ—Ç 1 –¥–æ 1440 –º–∏–Ω—É—Ç (–º–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞)
        `);
        return;
      }

      // Calculate reminder time
      const now = new Date();
      const reminderDate = new Date(now.getTime() + minutesFromNow * 60 * 1000);

      // Schedule the reminder
      setTimeout(
        async () => {
          try {
            await ctx.telegram.sendMessage(
              ctx.userId,
              `üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*

${reminderText}`,
              { parse_mode: 'Markdown' },
            );
          } catch (error) {
            this.logger.error('Error sending reminder:', error);
          }
        },
        minutesFromNow * 60 * 1000,
      );

      const timeStr = reminderDate.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
      });

      await ctx.replyWithMarkdown(
        `
‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!*

üìù **–¢–µ–∫—Å—Ç:** ${reminderText}
‚è∞ **–í—Ä–µ–º—è:** —á–µ—Ä–µ–∑ ${minutesFromNow} –º–∏–Ω—É—Ç (–≤ ${timeStr})

–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è! üîî
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );

      // Add XP for using reminders
      await this.userService.updateUser(ctx.userId, {
        totalXp: user.totalXp + 5,
      });
    } catch (error) {
      this.logger.error('Error creating relative reminder:', error);
      await ctx.replyWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*

–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.
      `);
    }
  }

  private async handleReminderRequest(
    ctx: BotContext,
    reminderText: string,
    hours: string,
    minutes: string,
  ) {
    try {
      const user = await this.userService.findByTelegramId(ctx.userId);

      // Check billing limits for reminders
      const limitCheck = await this.billingService.checkUsageLimit(
        ctx.userId,
        'dailyReminders',
      );

      if (!limitCheck.allowed) {
        await ctx.replyWithMarkdown(
          limitCheck.message || 'üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Premium',
                    callback_data: 'upgrade_premium',
                  },
                ],
                [{ text: 'üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã', callback_data: 'show_limits' }],
              ],
            },
          },
        );
        return;
      }

      // Validate time
      const hourNum = parseInt(hours);
      const minuteNum = parseInt(minutes);

      if (hourNum < 0 || hourNum > 23 || minuteNum < 0 || minuteNum > 59) {
        await ctx.replyWithMarkdown(`
‚ùå *–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 17:30)
        `);
        return;
      }

      // Create reminder time for today
      const now = new Date();
      const reminderDate = new Date();
      reminderDate.setHours(hourNum, minuteNum, 0, 0);

      // If time has already passed today, set for tomorrow
      if (reminderDate <= now) {
        reminderDate.setDate(reminderDate.getDate() + 1);
      }

      // Calculate delay in milliseconds
      const delay = reminderDate.getTime() - now.getTime();

      // Schedule the reminder
      setTimeout(async () => {
        try {
          await ctx.telegram.sendMessage(
            ctx.userId,
            `üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\n${reminderText}`,
            { parse_mode: 'Markdown' },
          );
        } catch (error) {
          this.logger.error('Error sending reminder:', error);
        }
      }, delay);

      // Increment usage counter
      await this.billingService.incrementUsage(ctx.userId, 'dailyReminders');

      const timeStr = `${hours.padStart(2, '0')}:${minutes.padStart(2, '0')}`;
      const dateStr = reminderDate.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'long',
      });

      // Get current usage for display
      const usageInfo = await this.billingService.checkUsageLimit(
        ctx.userId,
        'dailyReminders',
      );

      await ctx.replyWithMarkdown(
        `
‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!*

üìù **–¢–µ–∫—Å—Ç:** ${reminderText}
‚è∞ **–í—Ä–µ–º—è:** ${timeStr}
üìÖ **–î–∞—Ç–∞:** ${dateStr}

üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è:** ${usageInfo.current}/${usageInfo.limit === -1 ? '‚àû' : usageInfo.limit} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è! üîî
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );

      // Add XP for using reminders
      await this.userService.updateUser(ctx.userId, {
        totalXp: user.totalXp + 5,
      });
    } catch (error) {
      this.logger.error('Error creating reminder:', error);
      await ctx.replyWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*

–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.
      `);
    }
  }

  private async handleReminderTimeInput(ctx: BotContext, timeInput: string) {
    try {
      const reminderText = ctx.session.pendingReminder;

      if (!reminderText) {
        await ctx.replyWithMarkdown('‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      // Try to parse different time formats
      let hours: string | undefined, minutes: string | undefined;

      // Format: HH:MM –∏–ª–∏ H:MM
      const timeMatch = timeInput.match(/(\d{1,2}):(\d{2})/);
      if (timeMatch) {
        hours = timeMatch[1];
        minutes = timeMatch[2];
      }
      // Format: "–≤ HH" –∏–ª–∏ "–≤ HH:MM"
      else {
        const inTimeMatch = timeInput.match(/–≤\s*(\d{1,2})(?::(\d{2}))?/i);
        if (inTimeMatch) {
          hours = inTimeMatch[1];
          minutes = inTimeMatch[2] || '00';
        }
        // Format: "—á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç"
        else {
          const minutesMatch = timeInput.match(/—á–µ—Ä–µ–∑\s*(\d+)\s*–º–∏–Ω—É—Ç/i);
          if (minutesMatch) {
            const minutesToAdd = parseInt(minutesMatch[1]);
            const futureTime = new Date();
            futureTime.setMinutes(futureTime.getMinutes() + minutesToAdd);
            hours = futureTime.getHours().toString();
            minutes = futureTime.getMinutes().toString().padStart(2, '0');
          }
          // Format: "—á–µ—Ä–µ–∑ X —á–∞—Å–æ–≤"
          else {
            const hoursMatch = timeInput.match(/—á–µ—Ä–µ–∑\s*(\d+)\s*—á–∞—Å/i);
            if (hoursMatch) {
              const hoursToAdd = parseInt(hoursMatch[1]);
              const futureTime = new Date();
              futureTime.setHours(futureTime.getHours() + hoursToAdd);
              hours = futureTime.getHours().toString();
              minutes = futureTime.getMinutes().toString().padStart(2, '0');
            }
            // Try to parse just numbers as HH:MM
            else if (
              timeInput.match(/^\d{1,2}$/) &&
              parseInt(timeInput) <= 23
            ) {
              hours = timeInput;
              minutes = '00';
            }
          }
        }
      }

      // If no valid time format found
      if (!hours || !minutes) {
        await ctx.replyWithMarkdown(`
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –≤—Ä–µ–º—è*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:
‚Ä¢ **17:30** - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ **–≤ 18:00** - —Å –ø—Ä–µ–¥–ª–æ–≥–æ–º
‚Ä¢ **—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç** - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ **—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞** - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ **18** - —Ü–µ–ª—ã–π —á–∞—Å (18:00)

_–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑_
        `);
        return;
      }

      // Validate parsed time
      const hourNum = parseInt(hours);
      const minuteNum = parseInt(minutes);

      if (hourNum < 0 || hourNum > 23 || minuteNum < 0 || minuteNum > 59) {
        await ctx.replyWithMarkdown(`
‚ùå *–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è*

–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 0 –¥–æ 59.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
        `);
        return;
      }

      // Clear session state
      ctx.session.pendingReminder = undefined;
      ctx.session.waitingForReminderTime = false;

      // Create the reminder
      await this.handleReminderRequest(ctx, reminderText, hours, minutes);
    } catch (error) {
      this.logger.error('Error processing reminder time input:', error);

      // Clear session state on error
      ctx.session.pendingReminder = undefined;
      ctx.session.waitingForReminderTime = false;

      await ctx.replyWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.
      `);
    }
  }

  private async handleAudioMessage(ctx: BotContext, type: 'voice' | 'audio') {
    try {
      const emoji = type === 'voice' ? 'üé§' : 'üéµ';
      const messageType =
        type === 'voice' ? '–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' : '–∞—É–¥–∏–æ —Ñ–∞–π–ª';

      await ctx.replyWithMarkdown(`${emoji} *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ${messageType}...*`);

      const transcribedText = await this.transcribeAudio(ctx, type);
      if (!transcribedText) {
        await ctx.replyWithMarkdown(
          `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ${messageType}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`,
        );
        return;
      }

      await ctx.replyWithMarkdown(`üéØ *–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:* "${transcribedText}"`);

      // Handle AI Chat mode for audio messages
      if (ctx.session.aiChatMode) {
        await this.handleAIChatMessage(ctx, transcribedText);
        return;
      }

      // Handle audio reminders
      if (this.isReminderRequest(transcribedText)) {
        await this.processReminderFromText(ctx, transcribedText);
        return;
      }

      // Handle voice commands for tasks
      if (
        transcribedText.toLowerCase().includes('–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É') ||
        transcribedText.toLowerCase().includes('–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞') ||
        transcribedText.toLowerCase().includes('—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É')
      ) {
        await this.startAddingTask(ctx);
        return;
      }

      // Handle voice commands for menu
      if (
        transcribedText.toLowerCase().includes('–º–µ–Ω—é') ||
        transcribedText.toLowerCase().includes('–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') ||
        transcribedText.toLowerCase().includes('–ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é')
      ) {
        await this.showMainMenu(ctx);
        return;
      }

      // Handle voice commands for help
      if (
        transcribedText.toLowerCase().includes('–ø–æ–º–æ—â—å') ||
        transcribedText.toLowerCase().includes('—Å–ø—Ä–∞–≤–∫–∞') ||
        transcribedText.toLowerCase().includes('—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å')
      ) {
        await ctx.replyWithMarkdown(`
ü§ñ *DailyCheck Bot - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É  
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ

*–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
üé§ "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ..." - —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
üé§ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É" - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
üé§ "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é" - –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
üé§ "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?" - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

*–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*
üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
üß† –ü–æ–æ–±—â–∞—Ç—å—Å—è —Å –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º
üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu
        `);
        return;
      }

      // Handle voice commands for feedback
      if (
        transcribedText.toLowerCase().includes('–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å') ||
        transcribedText.toLowerCase().includes('–æ—Ç–∑—ã–≤') ||
        transcribedText.toLowerCase().includes('—Ñ–∏–¥–±–µ–∫')
      ) {
        await this.showFeedbackSurvey(ctx);
        return;
      }

      // Default: treat as AI chat
      await this.handleAIChatMessage(ctx, transcribedText);
    } catch (error) {
      this.logger.error(`${type} message processing error:`, error);
      await ctx.replyWithMarkdown(
        `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${type === 'voice' ? '–≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è' : '–∞—É–¥–∏–æ —Ñ–∞–π–ª–∞'}.`,
      );
    }
  }

  private async transcribeAudio(
    ctx: BotContext,
    type: 'voice' | 'audio',
  ): Promise<string | null> {
    try {
      // Check if message exists and has the right type
      if (!ctx.message) {
        return null;
      }

      let fileId: string;

      if (type === 'voice' && 'voice' in ctx.message) {
        fileId = ctx.message.voice.file_id;
      } else if (type === 'audio' && 'audio' in ctx.message) {
        fileId = ctx.message.audio.file_id;
      } else {
        return null;
      }

      // Get file info and download
      const fileLink = await ctx.telegram.getFileLink(fileId);
      const response = await fetch(fileLink.href);
      const buffer = await response.arrayBuffer();

      // Create a File object for OpenAI
      const fileName = type === 'voice' ? 'voice.ogg' : 'audio.mp3';
      const mimeType = type === 'voice' ? 'audio/ogg' : 'audio/mpeg';
      const file = new File([buffer], fileName, { type: mimeType });

      // Use OpenAI Whisper for transcription
      const transcription = await this.openaiService.transcribeAudio(file);

      return transcription;
    } catch (error) {
      this.logger.error(`Error transcribing ${type}:`, error);
      return null;
    }
  }

  private async processReminderFromText(ctx: BotContext, text: string) {
    // Extract time and reminder text from voice/text input
    const timeMatch =
      text.match(/–≤\s*(\d{1,2}):(\d{2})/i) ||
      text.match(/–≤\s*(\d{1,2})\s*—á–∞—Å(?:–∞|–æ–≤)?(?:\s*(\d{2})\s*–º–∏–Ω—É—Ç)?/i) ||
      text.match(/–Ω–∞\s*(\d{1,2}):(\d{2})/i) ||
      text.match(/–∫\s*(\d{1,2}):(\d{2})/i);

    if (timeMatch) {
      const hours = timeMatch[1];
      const minutes = timeMatch[2] || '00';

      // Extract reminder text by removing time references and trigger words
      let reminderText = text
        .replace(/–Ω–∞–ø–æ–º–Ω–∏\s*(–º–Ω–µ)?/gi, '')
        .replace(/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/gi, '')
        .replace(/–ø–æ—Å—Ç–∞–≤—å/gi, '')
        .replace(/—É—Å—Ç–∞–Ω–æ–≤–∏/gi, '')
        .replace(/–≤\s*\d{1,2}:?\d{0,2}\s*(?:—á–∞—Å|–º–∏–Ω—É—Ç)?(?:–∞|–æ–≤)?/gi, '')
        .replace(/–Ω–∞\s*\d{1,2}:?\d{0,2}/gi, '')
        .replace(/–∫\s*\d{1,2}:?\d{0,2}/gi, '')
        .trim();

      // If no text left, ask for clarification
      if (!reminderText || reminderText.length < 2) {
        await ctx.replyWithMarkdown(`
ü§î *–û —á–µ–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å?*

–í—ã —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º—è ${hours}:${minutes}, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–ª–∏, –æ —á–µ–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å.

*–ü—Ä–∏–º–µ—Ä:* "–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –≤ 17:30"
        `);
        return;
      }

      await this.handleReminderRequest(ctx, reminderText, hours, minutes);
      return;
    }

    // Handle relative time (—á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤)
    const relativeMatch = text.match(/—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å)/i);
    if (relativeMatch) {
      const amount = parseInt(relativeMatch[1]);
      const unit = relativeMatch[2];

      const now = new Date();
      if (unit.includes('—á–∞—Å')) {
        now.setHours(now.getHours() + amount);
      } else {
        now.setMinutes(now.getMinutes() + amount);
      }

      const hours = now.getHours().toString().padStart(2, '0');
      const minutes = now.getMinutes().toString().padStart(2, '0');

      const reminderText = text
        .replace(/–Ω–∞–ø–æ–º–Ω–∏\s*(–º–Ω–µ)?/gi, '')
        .replace(/—á–µ—Ä–µ–∑\s*\d+\s*(?:–º–∏–Ω—É—Ç|—á–∞—Å)(?:–∞|–æ–≤)?/gi, '')
        .trim();

      await this.handleReminderRequest(ctx, reminderText, hours, minutes);
      return;
    }

    // Check if this is a reminder request without time
    const isReminderWithoutTime = this.isReminderWithoutTime(text);
    if (isReminderWithoutTime) {
      // Extract reminder text by removing trigger words
      const reminderText = text
        .replace(/–Ω–∞–ø–æ–º–Ω–∏\s*(–º–Ω–µ)?/gi, '')
        .replace(/–Ω–∞–ø–æ–º–Ω—é\s*(–º–Ω–µ)?/gi, '')
        .replace(/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/gi, '')
        .replace(/–ø–æ—Å—Ç–∞–≤—å/gi, '')
        .replace(/—É—Å—Ç–∞–Ω–æ–≤–∏/gi, '')
        .replace(/–Ω—É–∂–Ω–æ.*–Ω–∞–ø–æ–º–Ω–∏—Ç—å/gi, '')
        .replace(/–Ω–µ –∑–∞–±—ã—Ç—å/gi, '')
        .trim();

      if (reminderText && reminderText.length > 1) {
        // Store reminder text in session and ask for time
        ctx.session.pendingReminder = reminderText;
        ctx.session.waitingForReminderTime = true;

        await ctx.replyWithMarkdown(`
‚è∞ *–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?*

–û —á–µ–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å: "${reminderText}"

*–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è:*
‚Ä¢ –í –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è: "17:30", "–≤ 18:00"  
‚Ä¢ –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è: "—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç", "—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"

_–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ_
        `);
        return;
      }
    }

    // If no specific time found and not a clear reminder request, ask for clarification
    await ctx.replyWithMarkdown(`
ü§î *–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
‚Ä¢ "–Ω–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –≤ 17:30"
‚Ä¢ "–Ω–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç"
    `);
  }

  private isReminderWithoutTime(text: string): boolean {
    const reminderPatterns = [
      /–Ω–∞–ø–æ–º–Ω–∏(?:\s+–º–Ω–µ)?\s+.+/i,
      /–Ω–∞–ø–æ–º–Ω—é(?:\s+–º–Ω–µ)?\s+.+/i,
      /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+.+/i,
      /–ø–æ—Å—Ç–∞–≤—å\s+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+.+/i,
      /—É—Å—Ç–∞–Ω–æ–≤–∏\s+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+.+/i,
      /–Ω—É–∂–Ω–æ\s+–Ω–∞–ø–æ–º–Ω–∏—Ç—å\s+.+/i,
      /–Ω–µ\s+–∑–∞–±—ã—Ç—å\s+.+/i,
    ];

    // Check if it's a reminder request but doesn't have time indicators
    const hasReminderTrigger = reminderPatterns.some((pattern) =>
      pattern.test(text),
    );
    const hasTimeIndicator =
      /–≤\s*\d{1,2}:?\d{0,2}|–Ω–∞\s*\d{1,2}:?\d{0,2}|–∫\s*\d{1,2}:?\d{0,2}|—á–µ—Ä–µ–∑\s*\d+\s*(?:–º–∏–Ω—É—Ç|—á–∞—Å)/i.test(
        text,
      );

    return hasReminderTrigger && !hasTimeIndicator;
  }

  private isReminderRequest(text: string): boolean {
    const reminderPatterns = [
      // –ü–æ–ª–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º
      /–Ω–∞–ø–æ–º–Ω–∏.*–≤\s*(\d{1,2}):(\d{2})/i,
      /–Ω–∞–ø–æ–º–Ω–∏.*–≤\s*(\d{1,2})\s*—á–∞—Å/i,
      /–Ω–∞–ø–æ–º–Ω–∏.*—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å)/i,
      /–Ω–∞–ø–æ–º–Ω—é.*–≤\s*(\d{1,2}):(\d{2})/i,
      /–Ω–∞–ø–æ–º–Ω—é.*–≤\s*(\d{1,2})\s*—á–∞—Å/i,
      /–Ω–∞–ø–æ–º–Ω—é.*—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å)/i,
      /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.*–≤\s*(\d{1,2}):(\d{2})/i,
      /–¥–æ–±–∞–≤—å.*–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/i,
      /—Å–æ–∑–¥–∞–π.*–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/i,

      // –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã (–ª—é–±—ã–µ —Å–ª–æ–≤–∞ –Ω–∞–ø–æ–º–Ω–∏/–Ω–∞–ø–æ–º–Ω—é)
      /–Ω–∞–ø–æ–º–Ω–∏.+/i,
      /–Ω–∞–ø–æ–º–Ω—é.+/i,
      /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.+/i,
      /remind.*/i,

      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã
      /–ø–æ—Å—Ç–∞–≤—å.*–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/i,
      /—É—Å—Ç–∞–Ω–æ–≤–∏.*–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/i,
      /–Ω—É–∂–Ω–æ.*–Ω–∞–ø–æ–º–Ω–∏—Ç—å/i,
      /–Ω–µ –∑–∞–±—ã—Ç—å.*/i,
      /–ø–æ–º–Ω–∏.*/i,
    ];

    return reminderPatterns.some((pattern) => pattern.test(text));
  }
}
