/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—ã—Å—Ç—Ä–æ–µ –º–µ–Ω—é-–≤–∏–¥–∂–µ—Ç —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
 */
import {
  Injectable,
  Logger,
  OnModuleInit,
  OnModuleDestroy,
  forwardRef,
  Inject,
} from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf, session } from 'telegraf';
import { User, Reminder, ReminderStatus } from '@prisma/client';
import { BotContext } from './bot-context.interface';
import { UserService } from '../services/user.service';
import { OpenAIService } from '../services/openai.service';
import { TaskService } from '../services/task.service';
import { HabitService } from '../services/habit.service';
import { BillingService } from '../services/billing.service';
import { AiContextService } from '../services/ai-context.service';
import { PaymentService } from '../services/payment.service';
import { PrismaService } from '../database/prisma.service';
import { NotificationService } from '../services/notification.service';

@Injectable()
export class TelegramBotService implements OnModuleInit, OnModuleDestroy {
  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç reply keyboard –∏ inline keyboard –¥–ª—è Telegram-–±–æ—Ç–∞
   */
  public async setup(ctx: BotContext) {
    // Reply Keyboard (native Telegram menu)
    await ctx.reply('–ú–µ–Ω—é', {
      reply_markup: {
        keyboard: [
          [{ text: 'üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏' }, { text: '+ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É' }],
          [{ text: '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ' }, { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' }],
          [{ text: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è' }, { text: 'üë• –î—Ä—É–∑—å—è' }],
          [{ text: 'ü§ñ AI –ß–∞—Ç' }, { text: '‚è∞ –¢–∞–π–º–µ—Ä' }],
        ],
        resize_keyboard: true,
        is_persistent: true,
      },
    });

    // Inline Keyboard (example)
    const callback_data = 'back_to_menu';
    // ...existing code...
    console.log('[LOG] Creating inline button for reminder:', {
      callback_data,
    });
    this.logger.log(
      `[LOG] Creating inline button for reminder: ${callback_data}`,
    );
    // ...existing code...
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      reply_markup: {
        inline_keyboard: [[{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data }]],
      },
    });
  }
  private readonly logger = new Logger(TelegramBotService.name);
  private bot: Telegraf<BotContext>;
  private activePomodoroSessions: Map<
    string,
    {
      focusTimer?: NodeJS.Timeout;
      breakTimer?: NodeJS.Timeout;
      startTime: Date;
      pausedAt?: Date;
      totalPausedTime?: number; // milliseconds
    }
  > = new Map();

  private activeIntervalReminders: Map<
    string,
    {
      intervalId: NodeJS.Timeout;
      reminderText: string;
      intervalMinutes: number;
      startTime: Date;
      count: number;
    }
  > = new Map();

  constructor(
    private readonly configService: ConfigService,
    private readonly userService: UserService,
    private readonly openaiService: OpenAIService,
    private readonly taskService: TaskService,
    private readonly habitService: HabitService,
    private readonly billingService: BillingService,
    private readonly aiContextService: AiContextService,
    private readonly paymentService: PaymentService,
    private readonly prisma: PrismaService,
    @Inject(forwardRef(() => NotificationService))
    private readonly notificationService: NotificationService,
  ) {
    const token = this.configService.get<string>('bot.token');
    if (!token) {
      throw new Error('BOT_TOKEN is not provided');
    }

    this.bot = new Telegraf<BotContext>(token);
    this.setupMiddleware();
    this.setupHandlers();
    this.setupErrorHandling();
  }

  private setupMiddleware() {
    // Session middleware
    this.bot.use(
      session({
        defaultSession: () => ({
          step: undefined,
          data: {},
          waitingForInput: false,
          currentAction: undefined,
          tempData: {},
        }),
      }),
    );

    // User context middleware
    this.bot.use(async (ctx, next) => {
      if (ctx.from) {
        ctx.userId = ctx.from.id.toString();

        // Ensure user exists in database
        const existingUser = await this.userService
          .findByTelegramId(ctx.from.id.toString())
          .catch(() => null);

        if (!existingUser) {
          // Create new user
          await this.userService.findOrCreateUser({
            id: ctx.from.id.toString(),
            username: ctx.from.username,
            firstName: ctx.from.first_name,
            lastName: ctx.from.last_name,
          });

          // Initialize trial period for new user
          await this.billingService.initializeTrialForUser(
            ctx.from.id.toString(),
          );
        }
      }

      // Add helper methods
      ctx.replyWithMarkdown = (text: string, extra: any = {}) => {
        return ctx.reply(text, { parse_mode: 'Markdown', ...extra });
      };

      ctx.editMessageTextWithMarkdown = (text: string, extra: any = {}) => {
        return ctx.editMessageText(text, { parse_mode: 'Markdown', ...extra });
      };

      return next();
    });
  }

  private setupErrorHandling() {
    // Global error handler for bot
    this.bot.catch(async (err, ctx) => {
      // Log concise error information to avoid dumping large objects (ctx/update)
      const error = err as Error;
      this.logger.error(`Bot error: ${error?.message || String(err)}`);
      if (error && error.stack) {
        this.logger.debug(error.stack);
      }

      try {
        // Send a friendly user-facing error message without exposing internals
        await ctx.replyWithMarkdown(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      } catch (responseError) {
        const respErr = responseError as Error;
        this.logger.error(
          `Failed to send error response: ${respErr?.message || String(responseError)}`,
        );
        if (respErr && respErr.stack) {
          this.logger.debug(respErr.stack);
        }
      }
    });
  }

  private setupHandlers() {
    // Start command
    this.bot.start(async (ctx) => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        const startPayload = ctx.startPayload;
        let referrerId: string | undefined;

        if (startPayload && startPayload.startsWith('ref_')) {
          referrerId = startPayload.replace('ref_', '');
          this.logger.log(`User started with referral from: ${referrerId}`);
        }

        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = {
          id: ctx.from?.id.toString() || ctx.userId,
          username: ctx.from?.username || undefined,
          firstName: ctx.from?.first_name || undefined,
          lastName: ctx.from?.last_name || undefined,
        };

        const user = await this.userService.findOrCreateUser(userData);

        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
        if (referrerId && referrerId !== user.id) {
          await this.handleReferralRegistration(ctx, user.id, referrerId);
        }

        this.logger.log(
          `User ${user.id} started bot. Onboarding passed: ${user.onboardingPassed}`,
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        if (!user.onboardingPassed) {
          this.logger.log(`Starting onboarding for user ${user.id}`);
          await this.startOnboarding(ctx);
        } else {
          this.logger.log(`Showing main menu for user ${user.id}`);
          await this.showMainMenu(ctx);
        }
      } catch (error) {
        this.logger.error('Error in start command:', error);
        await ctx.replyWithMarkdown(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      }
    });

    // Voice message handler - delegate to audio handler (transcription + processing)
    this.bot.on('voice', async (ctx) => {
      await this.handleAudioMessage(ctx, 'voice');
    });

    // Help command
    this.bot.help(async (ctx) => {
      await ctx.replyWithMarkdown(`
ü§ñ *Ticky AI - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ
/tasks - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
/habits - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
/mood - –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
/focus - –°–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏

*–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*
üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É
üéØ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
üòä –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
‚è∞ –°–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu
      `);
    });

    // Main menu command
    this.bot.command('menu', async (ctx) => {
      try {
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = {
          id: ctx.from?.id.toString() || ctx.userId,
          username: ctx.from?.username || undefined,
          firstName: ctx.from?.first_name || undefined,
          lastName: ctx.from?.last_name || undefined,
        };

        const user = await this.userService.findOrCreateUser(userData);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        if (!user.onboardingPassed) {
          this.logger.log(`Starting onboarding for user ${user.id}`);
          await this.startOnboarding(ctx);
        } else {
          this.logger.log(`Showing main menu for user ${user.id}`);
          await this.showMainMenu(ctx);
        }
      } catch (error) {
        this.logger.error('Error in menu command:', error);
        await ctx.replyWithMarkdown(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        );
      }
    });

    // Tasks command
    this.bot.command('tasks', async (ctx) => {
      await this.showTasksMenu(ctx);
    });

    // Habits command
    this.bot.command('habits', async (ctx) => {
      await this.showHabitsMenu(ctx);
    });

    // Mood command
    this.bot.command('mood', async (ctx) => {
      await this.showMoodMenu(ctx);
    });

    // Focus command
    this.bot.command('focus', async (ctx) => {
      await this.showFocusSession(ctx);
    });

    // Help command
    this.bot.command('help', async (ctx) => {
      const helpMessage = `
ü§ñ *Ticky AI - –°–ø—Ä–∞–≤–∫–∞*

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö
/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ
/tasks - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
/habits - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
/mood - –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
/focus - –°–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞
/reminders - –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/testnotify - –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
üòä –¢—Ä–µ–∫–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
üçÖ –¢–µ—Ö–Ω–∏–∫–∞ –ü–æ–º–æ–¥–æ—Ä–æ –¥–ª—è —Ñ–æ–∫—É—Å–∞
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚è∞ –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö
üéØ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ—Ä—å–±—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
üíé –°–∏—Å—Ç–µ–º–∞ –±–∏–ª–ª–∏–Ω–≥–∞ —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu
      `;

      // Check if this is a callback query (can edit) or command (need to reply)
      if (ctx.callbackQuery) {
        await ctx.editMessageTextWithMarkdown(helpMessage);
      } else {
        await ctx.replyWithMarkdown(helpMessage);
      }
    });

    // Feedback command
    this.bot.command('feedback', async (ctx) => {
      try {
        await this.showFeedbackSurvey(ctx);
      } catch (error) {
        this.logger.error('Error in feedback command:', error);
        await ctx.replyWithMarkdown('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        });
      }
    });

    // Test notification command
    this.bot.command('testnotify', async (ctx) => {
      try {
        const userId = ctx.from.id.toString();

        // Find user's first habit
        const habit = await this.prisma.habit.findFirst({
          where: { userId, isActive: true },
        });

        if (!habit) {
          await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
          return;
        }

        // Send test notification
        const message = `‚è∞ *–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*\n\nüéØ ${habit.title}\n\n–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–µ!`;
        const keyboard = {
          inline_keyboard: [
            [
              {
                text: '‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª',
                callback_data: `complete_habit_${String(habit.id).slice(0, 20)}`,
              },
              {
                text: '‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 15 –º–∏–Ω',
                callback_data: `snooze_habit_${String(habit.id).slice(0, 20)}_15`,
              },
            ],
            [
              {
                text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                callback_data: `habit_stats_${String(habit.id).slice(0, 20)}`,
              },
              {
                text: '‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è',
                callback_data: `skip_habit_${String(habit.id).slice(0, 20)}`,
              },
            ],
          ],
        };

        await ctx.reply(message, {
          parse_mode: 'Markdown',
          reply_markup: keyboard,
        });

        this.logger.log(
          `Test notification sent to user ${userId} for habit ${habit.id}`,
        );
      } catch (error) {
        this.logger.error('Error in test notification:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
      }
    });

    // Show active reminders command
    this.bot.command('reminders', async (ctx) => {
      try {
        const userId = ctx.from.id.toString();

        const habitsWithReminders = await this.prisma.habit.findMany({
          where: {
            userId,
            isActive: true,
            reminderTime: { not: null },
          },
          orderBy: { title: 'asc' },
        });

        if (habitsWithReminders.length === 0) {
          await ctx.reply(
            '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /habits –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.',
          );
          return;
        }

        let message = `‚è∞ *–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n`;

        for (const habit of habitsWithReminders) {
          const nextTime = this.calculateNextReminderTime(
            habit.reminderTime || '',
          );
          message += `üéØ **${habit.title}**\n`;
          message += `‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${habit.reminderTime}\n`;
          message += `üïí –°–ª–µ–¥—É—é—â–µ–µ: ${nextTime}\n\n`;
        }

        message += `üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /testnotify –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`;

        await ctx.reply(message, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üéØ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'habits_list' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        });
      } catch (error) {
        this.logger.error('Error showing reminders:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.');
      }
    });

    // Billing command
    this.bot.command('billing', async (ctx) => {
      // Redirect to show_limits handler
      const subscriptionStatus =
        await this.billingService.getSubscriptionStatus(ctx.userId);

      const limitsText =
        subscriptionStatus.limits.dailyReminders === -1
          ? '‚àû (–±–µ–∑–ª–∏–º–∏—Ç)'
          : subscriptionStatus.limits.dailyReminders.toString();
      const aiLimitsText =
        subscriptionStatus.limits.dailyAiQueries === -1
          ? '‚àû (–±–µ–∑–ª–∏–º–∏—Ç)'
          : subscriptionStatus.limits.dailyAiQueries.toString();

      let statusMessage = '';
      if (subscriptionStatus.isTrialActive) {
        statusMessage = `üéÅ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:** ${subscriptionStatus.daysRemaining} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å`;
      } else {
        statusMessage = `üíé **–ü–æ–¥–ø–∏—Å–∫–∞:** ${
          subscriptionStatus.type === 'FREE'
            ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è'
            : subscriptionStatus.type === 'PREMIUM'
              ? 'Premium'
              : 'Premium Plus'
        }`;
      }

      await ctx.replyWithMarkdown(
        `üìä *–í–∞—à–∏ –ª–∏–º–∏—Ç—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ*

${statusMessage}

**–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:**
üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${subscriptionStatus.usage.dailyReminders}/${limitsText}
üß† –ò–ò-–∑–∞–ø—Ä–æ—Å—ã: ${subscriptionStatus.usage.dailyAiQueries}/${aiLimitsText}
üìù –ó–∞–¥–∞—á–∏: ${subscriptionStatus.usage.dailyTasks}${subscriptionStatus.limits.dailyTasks === -1 ? '' : `/${subscriptionStatus.limits.dailyTasks}`}
üîÑ –ü—Ä–∏–≤—ã—á–∫–∏: ${subscriptionStatus.usage.dailyHabits}${subscriptionStatus.limits.dailyHabits === -1 ? '' : `/${subscriptionStatus.limits.dailyHabits}`}

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: ${subscriptionStatus.limits.advancedAnalytics ? '‚úÖ' : '‚ùå'}
üé® –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–º—ã: ${subscriptionStatus.limits.customThemes ? '‚úÖ' : '‚ùå'}
üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: ${subscriptionStatus.limits.prioritySupport ? '‚úÖ' : '‚ùå'}`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Premium',
                  callback_data: 'upgrade_premium',
                },
              ],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });

    // Reset onboarding command (for testing)
    this.bot.command('reset_onboarding', async (ctx) => {
      try {
        await this.userService.updateUser(ctx.userId, {
          onboardingPassed: false,
        });
        await ctx.editMessageTextWithMarkdown(
          'üîÑ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ —Å–±—Ä–æ—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∑–∞–Ω–æ–≤–æ.',
        );
        this.logger.log(`Onboarding reset for user ${ctx.userId}`);
      } catch (error) {
        this.logger.error('Error resetting onboarding:', error);
        await ctx.replyWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞.');
      }
    });

    // Info command - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    this.bot.command('info', async (ctx) => {
      await this.showSystemInfo(ctx);
    });

    // Test motivation command
    this.bot.command('testmotivation', async (ctx) => {
      await this.testMotivationSystem(ctx);
    });

    // Onboarding callback handlers
    this.bot.action('onboarding_start', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showOnboardingStep2(ctx);
    });

    this.bot.action('onboarding_examples', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(`
üìã *–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ —è —É–º–µ—é:*

*–ó–∞–¥–∞—á–∏:*
‚Ä¢ "–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"
‚Ä¢ "–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é"
‚Ä¢ "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É"

*–ü—Ä–∏–≤—ã—á–∫–∏:*
‚Ä¢ "–ü–∏—Ç—å 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã"
‚Ä¢ "–î–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É"
‚Ä¢ "–ß–∏—Ç–∞—Ç—å 30 –º–∏–Ω—É—Ç"

*–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:*
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ —à–∫–∞–ª–µ 1-10
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      `);

      setTimeout(async () => {
        await this.showOnboardingStep2(ctx);
      }, 3000);
    });

    this.bot.action('onboarding_faq', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showOnboardingStep3(ctx);
    });

    this.bot.action('onboarding_add_habit', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        `
‚úçÔ∏è *–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –ø–µ—Ä–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏.*

–ù–∞–ø—Ä–∏–º–µ—Ä: –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:
‚Ä¢ –ü–∏—Ç—å –≤–æ–¥—É –∫–∞–∂–¥—ã–π —á–∞—Å
‚Ä¢ –î–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É —É—Ç—Ä–æ–º
‚Ä¢ –ß–∏—Ç–∞—Ç—å –ø–µ—Ä–µ–¥ —Å–Ω–æ–º

*–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:*

‚¨áÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∂–µ*
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üíß –ü–∏—Ç—å –≤–æ–¥—É –∫–∞–∂–¥—ã–π —á–∞—Å',
                  callback_data: 'habit_example_water',
                },
              ],
              [
                {
                  text: 'üèÉ‚Äç‚ôÇÔ∏è –î–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É —É—Ç—Ä–æ–º',
                  callback_data: 'habit_example_sleep',
                },
              ],
              [
                {
                  text: 'üìö –ß–∏—Ç–∞—Ç—å –ø–µ—Ä–µ–¥ —Å–Ω–æ–º',
                  callback_data: 'habit_example_read',
                },
              ],
              [
                {
                  text: 'üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É',
                  callback_data: 'habit_custom_input',
                },
              ],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
      ctx.session.step = 'onboarding_waiting_habit';
    });

    this.bot.action('onboarding_skip_habit', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showOnboardingStep3(ctx);
    });

    this.bot.action('onboarding_complete', async (ctx) => {
      await ctx.answerCbQuery();

      try {
        // Mark onboarding as completed
        await this.userService.updateUser(ctx.userId, {
          onboardingPassed: true,
        });

        this.logger.log(`Onboarding completed for user ${ctx.userId}`);

        await ctx.editMessageTextWithMarkdown(`
üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!*

–¢–µ–ø–µ—Ä—å —Ç—ã –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Å Ticky AI!

üöÄ –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
        `);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        setTimeout(() => {
          this.showMainMenu(ctx, false); // false = —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        }, 2000);
      } catch (error) {
        this.logger.error('Error completing onboarding:', error);
        await ctx.replyWithMarkdown(
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        );
      }
    });

    // Handler to move from onboarding habit creation to FAQ step
    this.bot.action('onboarding_next_faq', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showOnboardingStep3(ctx);
    });

    // Handle text input during onboarding
    this.bot.on('text', async (ctx) => {
      const user = await this.getOrCreateUser(ctx);

      // Update user activity for referral tracking
      await this.updateUserActivity(ctx.userId);

      // Skip if this is a command (starts with /) - FIRST CHECK
      if (ctx.message.text.startsWith('/')) {
        return; // Let command handlers process it
      }

      // Handle AI Chat mode
      if (ctx.session.aiChatMode) {
        await this.handleAIChatMessage(ctx, ctx.message.text);
        return;
      }

      // Handle AI Habit Creation mode
      if (ctx.session.aiHabitCreationMode) {
        await this.handleAIHabitCreationMessage(ctx, ctx.message.text);
        return;
      }

      // Handle natural language reminders (e.g., "–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∫—É–ø–∏—Ç—å —Ö–ª–µ–±")
      if (this.isReminderRequest(ctx.message.text)) {
        await this.handleNaturalReminderRequest(ctx, ctx.message.text);
        return;
      }

      // Handle simple reminder requests without time (e.g., "–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∫—É–ø–∏—Ç—å —Ö–ª–µ–±")
      if (this.isSimpleReminderRequest(ctx.message.text)) {
        await this.handleSimpleReminderRequest(ctx, ctx.message.text);
        return;
      }

      // Check if user needs to provide timezone first
      if (
        !user.timezone &&
        (ctx.session.step === 'adding_task' ||
          ctx.session.step === 'adding_habit')
      ) {
        await this.askForTimezone(ctx);
        return;
      }

      // Handle timezone setting
      if (ctx.session.step === 'waiting_for_city') {
        await this.handleCityInput(ctx, ctx.message.text);
        return;
      }

      // Handle editing task title flow
      if (
        ctx.session.step === 'editing_task_title' &&
        ctx.session.pendingTaskTitle
      ) {
        const newTitle = ctx.message.text?.trim();
        if (!newTitle || newTitle.length < 1) {
          await ctx.replyWithMarkdown(
            '‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:',
          );
          return;
        }

        const taskId = ctx.session.pendingTaskTitle;
        try {
          await this.taskService.updateTask(taskId, ctx.userId, {
            title: newTitle,
          } as any);

          ctx.session.step = undefined;
          ctx.session.pendingTaskTitle = undefined;

          await ctx.replyWithMarkdown('‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.', {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üìã –í—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'tasks_list' }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          });
        } catch (err) {
          this.logger.error('Error updating task title:', err);
          await ctx.replyWithMarkdown(
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          );
        }
        return;
      }

      // Handle task creation
      if (ctx.session.step === 'waiting_for_task_title') {
        await this.handleTaskCreation(ctx, ctx.message.text);
        return;
      }

      // Handle custom feedback
      if (ctx.session.step === 'waiting_for_custom_feedback') {
        await this.completeFeedback(ctx, ctx.message.text);
        return;
      }

      // Handle reminder time input
      if (ctx.session.step === 'waiting_for_reminder_time') {
        await this.handleReminderTimeInputFromTask(ctx, ctx.message.text);
        return;
      }

      // Handle habit custom time input
      if (ctx.session.step === 'setting_habit_custom_time') {
        const timeText = ctx.message.text.trim();
        const timeRegex = /^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$/;

        if (!timeRegex.test(timeText)) {
          await ctx.replyWithMarkdown(
            '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30 –∏–ª–∏ 14:15):\n\n‚è∞ *–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*\n\n‚¨áÔ∏è *–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∂–µ*',
          );
          return;
        }

        const habitId = ctx.session.currentHabitId;
        if (habitId) {
          await this.updateHabitTime(ctx, habitId, timeText);
        }
        return;
      }

      // Handle custom dependency creation
      if (ctx.session.step === 'waiting_custom_dependency') {
        const dependencyName = ctx.message.text.trim();

        if (!dependencyName || dependencyName.length < 2) {
          await ctx.replyWithMarkdown(
            '‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n\n‚¨áÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∂–µ*',
          );
          return;
        }

        ctx.session.step = undefined;

        await ctx.replyWithMarkdown(
          `
üéØ *–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –±–æ—Ä—å–±—É —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é: "${dependencyName}"*

ü§ñ –°–∏—Å—Ç–µ–º–∞ –ò–ò –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.

ÔøΩ *–¢—ã —É–∂–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ —Å–≤–æ–±–æ–¥–µ!*

–ß—Ç–æ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç:
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –ò–ò
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç–≤–æ–∏—Ö —Ü–µ–ª—è—Ö
‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏–π

‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!*
        `,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
                    callback_data: 'choose_dependency',
                  },
                ],
              ],
            },
          },
        );

        try {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
          // await this.userService.updateUser(ctx.userId, {
          //   dependencyType: 'custom',
          //   customDependencyName: dependencyName,
          //   dependencyStartDate: new Date(),
          // });

          // –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
          const user = await this.userService.findByTelegramId(ctx.userId);
          this.startDailyMotivation(user.id, 'custom');

          await ctx.replyWithMarkdown(
            `
‚úÖ *–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø—É—Å–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç!*

üéØ **–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å:** ${dependencyName}
üìÖ **–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:** ${new Date().toLocaleDateString('ru-RU')}

ü§ñ **–ò–ò-—Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:**
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏–π

üí™ *–ü–µ—Ä–≤–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç —Å–µ–≥–æ–¥–Ω—è –≤ 21:00*

–£–¥–∞—á–∏ –≤ –±–æ—Ä—å–±–µ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é! –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! üöÄ
          `,
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                      callback_data: 'back_to_menu',
                    },
                  ],
                ],
              },
            },
          );
        } catch (error) {
          this.logger.error(`Error setting up custom dependency: ${error}`);
          await ctx.replyWithMarkdown(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: '‚¨ÖÔ∏è –ö –≤—ã–±–æ—Ä—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏',
                      callback_data: 'choose_dependency',
                    },
                  ],
                  [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                ],
              },
            },
          );
        }
        return;
      }

      // Handle waiting for reminder time
      if (ctx.session.waitingForReminderTime && ctx.session.pendingReminder) {
        await this.handleReminderTimeInput(ctx, ctx.message.text);
        return;
      }

      if (ctx.session.step === 'onboarding_waiting_habit') {
        const habitName = ctx.message.text;

        try {
          // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å
          const habit = await this.habitService.createHabit({
            userId: ctx.userId,
            title: habitName,
            description: `–∫–∞–∂–¥—ã–π –¥–µ–Ω—å`,
            frequency: 'DAILY',
            targetCount: 1,
          });

          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫
          await this.billingService.incrementUsage(ctx.userId, 'dailyHabits');

          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const usageInfo = await this.billingService.checkUsageLimit(
            ctx.userId,
            'dailyHabits',
          );

          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥
          ctx.session.step = undefined;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –≤ –ë–î ‚Äî –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥,
          // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –∫ FAQ (–¥–∞–ª–µ–µ –≤ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ)
          const user = await this.userService.findByTelegramId(ctx.userId);
          if (!user.onboardingPassed) {
            await ctx.replyWithMarkdown(`‚úÖ *–ü—Ä–∏–≤—ã—á–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*`, {
              reply_markup: {
                inline_keyboard: [
                  [{ text: '‚ùì FAQ', callback_data: 'onboarding_next_faq' }],
                ],
              },
            });
          } else {
            await ctx.editMessageTextWithMarkdown(
              `
‚úÖ *–ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!* 

üéØ **–ù–∞–∑–≤–∞–Ω–∏–µ:** ${habitName}
üìÖ **–û–ø–∏—Å–∞–Ω–∏–µ:** –∫–∞–∂–¥—ã–π –¥–µ–Ω—å

üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** ${usageInfo.current}${usageInfo.limit === -1 ? '' : `/${usageInfo.limit}`} –ø—Ä–∏–≤—ã—á–µ–∫

üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –º–µ–Ω—é –ø—Ä–∏–≤—ã—á–µ–∫.
        `,
              {
                reply_markup: {
                  inline_keyboard: [
                    [
                      {
                        text: '‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
                        callback_data: `habit_set_reminder_${habit.id}`,
                      },
                    ],
                    [
                      {
                        text: 'üéØ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏',
                        callback_data: 'habits_list',
                      },
                      {
                        text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                        callback_data: 'back_to_menu',
                      },
                    ],
                  ],
                },
              },
            );
          }
        } catch (error) {
          this.logger.error('Error creating habit during onboarding:', error);
          await ctx.replyWithMarkdown(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
          );
        }
        return;
      }

      // Handle regular habit creation
      if (ctx.session.step === 'adding_habit') {
        const habitTitle = ctx.message.text.trim();

        if (!habitTitle || habitTitle.length < 2) {
          await ctx.replyWithMarkdown(
            '‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n\n‚¨áÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∂–µ*',
          );
          return;
        }

        try {
          // Create the habit using the habit service
          await this.habitService.createHabit({
            userId: ctx.userId,
            title: habitTitle,
            description: undefined,
            frequency: 'DAILY' as const,
            targetCount: 1,
          });

          ctx.session.step = undefined;

          await ctx.replyWithMarkdown(
            `
‚úÖ *–ü—Ä–∏–≤—ã—á–∫–∞ "${habitTitle}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*

üéØ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏".

*–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å - –∫–ª—é—á –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–∏–≤—ã—á–µ–∫!
          `,
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üéØ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'menu_habits' }],
                  [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                ],
              },
            },
          );
        } catch (error) {
          this.logger.error(`Error creating habit: ${error}`);
          await ctx.replyWithMarkdown(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                ],
              },
            },
          );
        }
        return;
      }

      // Handle reminder requests in regular text mode (only with specific time)
      if (this.isReminderRequest(ctx.message.text)) {
        this.logger.log(
          `Processing reminder request: "${ctx.message.text}" for user ${ctx.userId}`,
        );
        await this.processReminderFromText(ctx, ctx.message.text);
        return;
      }

      // Skip if user is in a setup process (timezone, etc.)
      if (ctx.session.step) {
        // User is in the middle of some process, don't treat as task
        return;
      }

      // Handle task creation from text (including time-based tasks)
      if (this.isTaskRequest(ctx.message.text)) {
        this.logger.log(
          `Processing task from text: "${ctx.message.text}" for user ${ctx.userId}`,
        );
        await this.processTaskFromText(ctx, ctx.message.text);
        return;
      }

      // Check if this is a general question/chat message that should trigger AI
      if (this.isGeneralChatMessage(ctx.message.text)) {
        // Enable AI chat mode and handle the message
        ctx.session.aiChatMode = true;
        await this.handleAIChatMessage(ctx, ctx.message.text);
        return;
      }

      // Default: show help or main menu
      await ctx.replyWithMarkdown(`
ü§î *–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É*

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.

üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å "–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ..." —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
      `);
    });

    // Handle voice messages
    this.bot.on('voice', async (ctx) => {
      await this.handleAudioMessage(ctx, 'voice');
    });

    // Handle audio files
    this.bot.on('audio', async (ctx) => {
      await this.handleAudioMessage(ctx, 'audio');
    });

    // Main menu callback handlers
    this.bot.action('menu_tasks', async (ctx) => {
      await ctx.answerCbQuery();

      const user = await this.userService.findByTelegramId(ctx.userId);
      if (!user.timezone) {
        ctx.session.step = 'adding_task';
        await this.askForTimezone(ctx);
      } else {
        await this.showTasksMenu(ctx);
      }
    });

    this.bot.action('menu_habits', async (ctx) => {
      await ctx.answerCbQuery();

      const user = await this.userService.findByTelegramId(ctx.userId);
      if (!user.timezone) {
        ctx.session.step = 'adding_habit';
        await this.askForTimezone(ctx);
      } else {
        await this.showHabitsMenu(ctx);
      }
    });

    this.bot.action('habits_list', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showHabitsMenu(ctx);
    });

    // Handle AI advice for habits
    this.bot.action('habits_ai_advice', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showHabitsAIAdvice(ctx);
    });

    // Handle adding habits
    this.bot.action('habits_add', async (ctx) => {
      await ctx.answerCbQuery();

      const user = await this.userService.findByTelegramId(ctx.userId);
      if (!user.timezone) {
        ctx.session.pendingAction = 'adding_habit';
        await this.askForTimezone(ctx);
      } else {
        ctx.session.step = 'adding_habit';
        await ctx.editMessageTextWithMarkdown(
          'üîÑ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—Ä—É—á–Ω—É—é:\n\n‚¨áÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∂–µ*',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üíß –ü–∏—Ç—å –≤–æ–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ 2 –ª–∏—Ç—Ä–∞',
                    callback_data: 'habit_example_water',
                  },
                ],
                [
                  {
                    text: 'üò¥ –õ–æ–∂–∏—Ç—å—Å—è —Å–ø–∞—Ç—å –¥–æ 23:00',
                    callback_data: 'habit_example_sleep',
                  },
                ],
                [
                  {
                    text: 'üö∂‚Äç‚ôÄÔ∏è –ü—Ä–æ–≥—É–ª–∫–∞ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º 20 –º–∏–Ω—É—Ç',
                    callback_data: 'habit_example_walk',
                  },
                ],
                [
                  {
                    text: 'üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É',
                    callback_data: 'habit_custom_input',
                  },
                ],
                [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      }
    });

    // Handle habit examples - water drinking
    this.bot.action('habit_example_water', async (ctx) => {
      await ctx.answerCbQuery();
      const habitName = '–ü–∏—Ç—å –≤–æ–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ 2 –ª–∏—Ç—Ä–∞';
      await this.createHabitFromExample(ctx, habitName);
    });

    // Handle habit examples - sleep schedule
    this.bot.action('habit_example_sleep', async (ctx) => {
      await ctx.answerCbQuery();
      const habitName = '–õ–æ–∂–∏—Ç—å—Å—è —Å–ø–∞—Ç—å –¥–æ 23:00';
      await this.createHabitFromExample(ctx, habitName);
    });

    // Handle habit examples - reading before sleep
    this.bot.action('habit_example_read', async (ctx) => {
      await ctx.answerCbQuery();
      const habitName = '–ß–∏—Ç–∞—Ç—å –ø–µ—Ä–µ–¥ —Å–Ω–æ–º';
      await this.createHabitFromExample(ctx, habitName);
    });

    // Handle habit examples - evening walk
    this.bot.action('habit_example_walk', async (ctx) => {
      await ctx.answerCbQuery();
      const habitName = '–ü—Ä–æ–≥—É–ª–∫–∞ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º 20 –º–∏–Ω—É—Ç';
      await this.createHabitFromExample(ctx, habitName);
    });

    // Handle custom habit input
    this.bot.action('habit_custom_input', async (ctx) => {
      await ctx.answerCbQuery();
      ctx.session.step = 'adding_habit'; // Add this line!
      await ctx.editMessageTextWithMarkdown(
        'üîÑ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:\n\n‚¨áÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∂–µ*',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });

    // Handle habit reminder setup
    this.bot.action(/^habit_set_reminder_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const habitId = ctx.match[1];
      await this.showReminderSetup(ctx, habitId);
    });

    // Handle reminder interval selection
    this.bot.action(/^set_reminder_(.+)_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery('‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!');
      const habitId = ctx.match[1];
      const interval = ctx.match[2];
      await this.setHabitReminder(ctx, habitId, interval);
    });

    // Handle habit view (detailed view with options)
    this.bot.action(/^habit_view_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const habitId = ctx.match[1];
      await this.showHabitDetails(ctx, habitId);
    });

    // Handle habit completion
    this.bot.action(/^habit_complete_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const habitId = ctx.match[1];
      await this.completeHabit(ctx, habitId);
    });

    // Handle quick habit completion from habits menu
    this.bot.action(/^habit_quick_complete_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery('üéâ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏–≤—ã—á–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!');
      const habitId = ctx.match[1];
      await this.quickCompleteHabit(ctx, habitId);
    });

    // Handle habit completion from notification
    this.bot.action(/^complete_habit_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery('‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!');
      const habitId = ctx.match[1];
      await this.completeHabitFromNotification(ctx, habitId);
    });

    // Handle habit snooze from notification
    this.bot.action(/^snooze_habit_(.+)_(\d+)$/, async (ctx) => {
      const habitId = ctx.match[1];
      const minutes = parseInt(ctx.match[2]);
      await ctx.answerCbQuery(`‚è∞ –ù–∞–ø–æ–º–Ω–∏–º —á–µ—Ä–µ–∑ ${minutes} –º–∏–Ω—É—Ç`);
      await this.snoozeHabitFromNotification(ctx, habitId, minutes);
    });

    // Handle habit statistics from notification
    this.bot.action(/^habit_stats_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const habitId = ctx.match[1];
      await this.showHabitStatsFromNotification(ctx, habitId);
    });

    // Handle skip habit from notification
    this.bot.action(/^skip_habit_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery('‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è');
      const habitId = ctx.match[1];
      await this.skipHabitFromNotification(ctx, habitId);
    });

    // Handle celebration thanks button
    this.bot.action('celebration_thanks', async (ctx) => {
      await ctx.answerCbQuery('üéâ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!');
      await this.showHabitsMenu(ctx);
    });

    // Handle create reminder from task (only matches task IDs, not 'help')
    this.bot.action(/^create_reminder_([a-f0-9]{10})$/, async (ctx) => {
      await ctx.answerCbQuery();
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Å–µ—Å—Å–∏–∏
        const taskTitle = ctx.session.tempData?.pendingReminderTitle;

        if (!taskTitle) {
          await ctx.editMessageTextWithMarkdown(
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                ],
              },
            },
          );
          return;
        }

        // Store the title for later use and ask for time
        ctx.session.tempData = { taskTitle };
        ctx.session.step = 'waiting_for_reminder_time';

        await ctx.editMessageTextWithMarkdown(
          `‚è∞ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\nüìù **"${taskTitle}"**\n\n–í–æ —Å–∫–æ–ª—å–∫–æ –≤–∞–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n‚Ä¢ \`15:30\` - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è\n‚Ä¢ \`—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\` - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è\n‚Ä¢ \`–∑–∞–≤—Ç—Ä–∞ –≤ 14:00\` - –≤—Ä–µ–º—è —Å –¥–∞—Ç–æ–π\n\n‚¨áÔ∏è *–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∂–µ*`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '‚è∞ –ß–µ—Ä–µ–∑ 1 —á–∞—Å', callback_data: 'reminder_time_1h' },
                  {
                    text: '‚è∞ –ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞',
                    callback_data: 'reminder_time_2h',
                  },
                ],
                [
                  {
                    text: '‚è∞ –°–µ–≥–æ–¥–Ω—è –≤ 18:00',
                    callback_data: 'reminder_time_18',
                  },
                  {
                    text: '‚è∞ –ó–∞–≤—Ç—Ä–∞ –≤ 9:00',
                    callback_data: 'reminder_time_tomorrow_9',
                  },
                ],
                [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      } catch (error) {
        this.logger.error('Error creating reminder from task:', error);
        await ctx.editMessageTextWithMarkdown(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      }
    });

    // Handle showing more habits
    this.bot.action('habits_list_more', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showAllHabitsList(ctx);
    });

    // Handle habits management
    this.bot.action('habits_manage', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showHabitsManagement(ctx);
    });

    // Handle habits management (new comprehensive view)
    this.bot.action('habits_management', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showHabitsManagement(ctx);
    });

    // Handle habits statistics
    this.bot.action('habits_stats', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showHabitsStatistics(ctx);
    });

    // Handle habits notifications settings
    this.bot.action('habits_notifications_settings', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showHabitsNotificationsSettings(ctx);
    });

    // Handle specific habit notification settings
    this.bot.action(/^habit_notification_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const habitId = ctx.match[1];
      await this.showHabitNotificationSettings(ctx, habitId);
    });

    // Handle setting habit frequency
    this.bot.action(/^set_habit_frequency_(.+)_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const habitId = ctx.match[1];
      const frequency = ctx.match[2];
      await this.updateHabitFrequency(ctx, habitId, frequency);
    });

    // Handle habit frequency settings view
    this.bot.action(/^habit_set_frequency_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const habitId = ctx.match[1];
      await this.showHabitFrequencySettings(ctx, habitId);
    });

    // Handle habit frequency settings view
    this.bot.action(/^habit_frequency_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const habitId = ctx.match[1];
      await this.showHabitFrequencySettings(ctx, habitId);
    });

    // Handle habit time settings view
    this.bot.action(/^habit_set_time_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const habitId = ctx.match[1];
      await this.showHabitTimeSettings(ctx, habitId);
    });

    // Handle setting habit time
    this.bot.action(/^set_habit_time_(.+)_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const habitId = ctx.match[1];
      const timeStr = ctx.match[2]; // format: "0900" for 09:00
      const formattedTime = `${timeStr.slice(0, 2)}:${timeStr.slice(2)}`;
      await this.updateHabitTime(ctx, habitId, formattedTime);
    });

    // Handle custom time input
    this.bot.action(/^habit_custom_time_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const habitId = ctx.match[1];
      ctx.session.step = 'setting_habit_custom_time';
      ctx.session.tempData = { habitId };

      await ctx.editMessageTextWithMarkdown(
        '‚è∞ *–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú*\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 09:30, 14:15, 21:00\n\n‚¨áÔ∏è *–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∂–µ*',
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üîô –ù–∞–∑–∞–¥',
                  callback_data: `habit_set_time_${habitId}`,
                },
              ],
            ],
          },
        },
      );
    });

    // Handle hour selection for habit time
    this.bot.action(/^select_hour_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const habitId = ctx.match[1];
      await this.showHabitHourSelection(ctx, habitId);
    });

    // Handle minute selection for habit time
    this.bot.action(/^select_minute_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const habitId = ctx.match[1];
      await this.showHabitMinuteSelection(ctx, habitId);
    });

    // Handle setting specific hour for habit
    this.bot.action(/^habit_hour_(.+)_(\d+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const habitId = ctx.match[1];
      const hour = parseInt(ctx.match[2]);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Å –≤ tempData
      if (!ctx.session.tempData) {
        ctx.session.tempData = {};
      }
      ctx.session.tempData.selectedHour = hour.toString().padStart(2, '0');
      ctx.session.tempData.habitId = habitId;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–∏–Ω—É—Ç
      await this.showHabitMinuteSelection(ctx, habitId);
    });

    // Handle setting specific minute for habit
    this.bot.action(/^habit_minute_(.+)_(\d+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const habitId = ctx.match[1];
      const minute = parseInt(ctx.match[2]);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —á–∞—Å –∏–∑ tempData –∏–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≤—ã—á–∫–∏
      let selectedHour = '09'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

      if (
        ctx.session.tempData?.selectedHour &&
        ctx.session.tempData?.habitId === habitId
      ) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —á–∞—Å –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –≤—ã–±–æ—Ä–∞
        selectedHour = ctx.session.tempData.selectedHour;
        // –û—á–∏—â–∞–µ–º tempData –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        ctx.session.tempData = {};
      } else {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å –∏–∑ –ø—Ä–∏–≤—ã—á–∫–∏
        const habit = await this.habitService.findHabitById(
          habitId,
          ctx.userId,
        );
        if (habit && habit.reminderTime) {
          selectedHour = habit.reminderTime.split(':')[0];
        }
      }

      const newTime = `${selectedHour}:${minute.toString().padStart(2, '0')}`;
      await this.updateHabitTime(ctx, habitId, newTime);
    });

    // Handle habit deletion
    this.bot.action(/^habit_delete_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const habitId = ctx.match[1];
      await this.confirmHabitDeletion(ctx, habitId);
    });

    // Handle habit deletion (alternative callback pattern)
    this.bot.action(/^delete_habit_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const habitId = ctx.match[1];
      await this.confirmHabitDeletion(ctx, habitId);
    });

    // Handle habit deletion confirmation
    this.bot.action(/^confirm_delete_habit_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const habitId = ctx.match[1];
      await this.deleteHabit(ctx, habitId);
    });

    // Handle cancel habit deletion
    this.bot.action(/^cancel_delete_habit_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
      await this.showHabitsManagement(ctx);
    });

    // Quick reminder time selection handlers
    this.bot.action('reminder_time_1h', async (ctx) => {
      await ctx.answerCbQuery();
      await this.createReminderWithRelativeTime(ctx, 1, 'hours');
    });

    this.bot.action('reminder_time_2h', async (ctx) => {
      await ctx.answerCbQuery();
      await this.createReminderWithRelativeTime(ctx, 2, 'hours');
    });

    this.bot.action('reminder_time_18', async (ctx) => {
      await ctx.answerCbQuery();
      await this.createReminderWithSpecificTime(ctx, '18:00');
    });

    this.bot.action('reminder_time_tomorrow_9', async (ctx) => {
      await ctx.answerCbQuery();
      await this.createReminderWithSpecificTime(ctx, '09:00', true); // tomorrow = true
    });

    this.bot.action('menu_mood', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showMoodMenu(ctx);
    });

    this.bot.action('menu_focus', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showPomodoroMenu(ctx);
    });

    this.bot.action('menu_stats', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showMainStatistics(ctx);
    });

    this.bot.action('menu_settings', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        '‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
      );
    });

    this.bot.action('menu_achievements', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        'üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
      );
    });

    this.bot.action('menu_ai', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        'üí° *–ò–ò –ü–æ–º–æ—â–Ω–∏–∫* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
      );
    });

    // New main menu handlers
    this.bot.action('add_item', async (ctx) => {
      await ctx.answerCbQuery();
      const keyboard = {
        inline_keyboard: [
          [{ text: 'üéØ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É', callback_data: 'habits_add' }],
          [{ text: 'üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'tasks_add' }],
          [{ text: 'üéôÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ', callback_data: 'voice_message' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }],
        ],
      };
      await ctx.editMessageTextWithMarkdown('‚ûï *–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?*', {
        reply_markup: keyboard,
      });
    });

    this.bot.action('voice_message', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        `üéôÔ∏è *–û–∑–≤—É—á—å—Ç–µ –∑–∞–¥–∞—á—É*

–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∏–∫—Ç–æ–≤–∞—Ç—å:
‚Ä¢ üìù –ù–æ–≤—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
‚Ä¢ üîÑ –ù–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É
‚Ä¢ ‚ùì –õ—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã

–ü—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—à–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üé§`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'add_item' }],
            ],
          },
        },
      );
    });

    this.bot.action('my_items', async (ctx) => {
      await ctx.answerCbQuery();
      const keyboard = {
        inline_keyboard: [
          [{ text: 'üéØ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'habits_list' }],
          [{ text: 'üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'tasks_list' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }],
        ],
      };
      await ctx.editMessageTextWithMarkdown('üìã *–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?*', {
        reply_markup: keyboard,
      });
    });

    this.bot.action('my_progress', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showMainStatistics(ctx);
    });

    // New handlers for updated main menu
    this.bot.action('add_habit', async (ctx) => {
      await ctx.answerCbQuery();
      // Use the existing habit addition logic
      const user = await this.userService.findByTelegramId(ctx.userId);
      if (!user.timezone) {
        ctx.session.pendingAction = 'adding_habit';
        await this.askForTimezone(ctx);
      } else {
        ctx.session.step = 'adding_habit';
        await ctx.editMessageTextWithMarkdown(
          'üîÑ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—Ä—É—á–Ω—É—é:\n\n‚¨áÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∂–µ*',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üíß –ü–∏—Ç—å –≤–æ–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ 2 –ª–∏—Ç—Ä–∞',
                    callback_data: 'habit_example_water',
                  },
                ],
                [
                  {
                    text: 'üò¥ –õ–æ–∂–∏—Ç—å—Å—è —Å–ø–∞—Ç—å –¥–æ 23:00',
                    callback_data: 'habit_example_sleep',
                  },
                ],
                [
                  {
                    text: 'üèÉ‚Äç‚ôÇÔ∏è –ó–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º',
                    callback_data: 'habit_example_workout',
                  },
                ],
                [
                  {
                    text: 'üìö –ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
                    callback_data: 'habit_example_reading',
                  },
                ],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      }
    });

    this.bot.action('my_habits', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showHabitsMenu(ctx);
    });

    this.bot.action('my_tasks', async (ctx) => {
      await ctx.answerCbQuery();
      const keyboard = {
        inline_keyboard: [
          [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'tasks_add' }],
          [{ text: 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á', callback_data: 'tasks_list' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }],
        ],
      };
      await ctx.editMessageTextWithMarkdown(
        'üìù *–ú–æ–∏ –∑–∞–¥–∞—á–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        {
          reply_markup: keyboard,
        },
      );
    });

    this.bot.action('ai_chat', async (ctx) => {
      await ctx.answerCbQuery();
      await this.startAIChat(ctx);
    });

    this.bot.action('more_functions', async (ctx) => {
      await ctx.answerCbQuery();
      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üòä –ú–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', callback_data: 'menu_mood' },
            { text: 'üçÖ –§–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'pomodoro_focus' },
          ],
          [
            { text: 'üé≠ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏', callback_data: 'dependencies' },
            { text: 'üöÄ –ß–µ–ª–ª–µ–Ω–¥–∂–∏', callback_data: 'challenges' },
          ],
          [
            {
              text: 'üí∞ –ë–æ–Ω—É—Å—ã –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã',
              callback_data: 'bonuses_referrals',
            },
            { text: 'üõçÔ∏è XP –ú–∞–≥–∞–∑–∏–Ω', callback_data: 'shop' },
          ],
          [
            { text: 'ü•á –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data: 'achievements' },
            { text: 'üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data: 'reminders' },
          ],
          [
            { text: '‚¨ÖÔ∏è', callback_data: 'back_to_menu' },
            { text: 'üë§', callback_data: 'user_profile' },
            { text: '‚öôÔ∏è', callback_data: 'user_settings' },
          ],
        ],
      };
      await ctx.editMessageText(
        'üöÄ *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:',
        {
          parse_mode: 'Markdown',
          reply_markup: keyboard,
        },
      );
    });

    // Additional functions handlers
    this.bot.action('progress_stats', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showDetailedStatistics(ctx);
    });

    this.bot.action('user_settings', async (ctx) => {
      try {
        await ctx.answerCbQuery();
        const user = await this.userService.findByTelegramId(ctx.userId);

        const settingsText = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
üÜî ID: ${user.id || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üë§ –ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìß Username: ${user.username ? `@${user.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.notifications !== false ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${user.reminderTime || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}
üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞: ${user.weeklySummary !== false ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}

üé® **–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å:**
üé≠ –¢–µ–º–∞: ${user.theme || '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é'}
‚ú® –ê–Ω–∏–º–∞—Ü–∏–∏: ${user.showAnimations !== false ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã: ${user.voiceCommands !== false ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}

ü§ñ **AI –∏ —Ä–µ–∂–∏–º—ã:**
üß† AI —Ä–µ–∂–∏–º: ${user.aiMode !== false ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}
üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: ${user.dryMode === true ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}

üîí **–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:**
üëÅÔ∏è –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: ${user.privacyLevel || '–û–±—ã—á–Ω—ã–π'}
üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üèôÔ∏è –ì–æ—Ä–æ–¥: ${user.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}`;

        await ctx.editMessageText(settingsText, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                  callback_data: 'settings_notifications',
                },
                { text: 'üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å', callback_data: 'settings_interface' },
              ],
              [
                { text: 'ü§ñ AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings_ai' },
                { text: 'üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å', callback_data: 'settings_privacy' },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        });
      } catch (error) {
        this.logger.error(`Error in user_settings handler: ${error}`);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        await ctx.editMessageText(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      }
    });

    // Settings handlers
    this.bot.action('settings_notifications', async (ctx) => {
      try {
        await ctx.answerCbQuery();
        const user = await this.userService.findByTelegramId(ctx.userId);

        await ctx.editMessageTextWithMarkdown(
          `
üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.notifications !== false ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${user.reminderTime || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}
üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞: ${user.weeklySummary !== false ? '‚úÖ –í–∫–ª—é—á–µ–Ω–∞' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}
üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${user.dailyReminders !== false ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
          `,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text:
                      user.notifications !== false
                        ? 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
                        : 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                    callback_data: 'toggle_notifications',
                  },
                ],
                [
                  {
                    text: '‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π',
                    callback_data: 'change_reminder_time',
                  },
                ],
                [
                  {
                    text:
                      user.weeklySummary !== false
                        ? 'üìä‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —Å–≤–æ–¥–∫—É'
                        : 'üìä‚úÖ –í–∫–ª—é—á–∏—Ç—å —Å–≤–æ–¥–∫—É',
                    callback_data: 'toggle_weekly_summary',
                  },
                ],
                [
                  {
                    text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
                    callback_data: 'user_settings',
                  },
                ],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      } catch (error) {
        this.logger.error(`Error in settings_notifications handler: ${error}`);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        await ctx.editMessageText(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
                    callback_data: 'user_settings',
                  },
                ],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      }
    });

    this.bot.action('settings_interface', async (ctx) => {
      try {
        await ctx.answerCbQuery();
        const user = await this.userService.findByTelegramId(ctx.userId);

        await ctx.editMessageTextWithMarkdown(
          `
üé® *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞*

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
üé≠ –¢–µ–º–∞: ${user.theme || '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é'}
‚ú® –ê–Ω–∏–º–∞—Ü–∏–∏: ${user.showAnimations !== false ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã: ${user.voiceCommands !== false ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
          `,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text:
                      user.showAnimations !== false
                        ? '‚ú®‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏'
                        : '‚ú®‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏',
                    callback_data: 'toggle_animations',
                  },
                ],
                [
                  {
                    text:
                      user.voiceCommands !== false
                        ? 'üéôÔ∏è‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å'
                        : 'üéôÔ∏è‚úÖ –í–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å',
                    callback_data: 'toggle_voice_commands',
                  },
                ],
                [{ text: 'üé≠ –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', callback_data: 'change_theme' }],
                [
                  {
                    text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
                    callback_data: 'user_settings',
                  },
                ],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      } catch (error) {
        this.logger.error(`Error in settings_interface handler: ${error}`);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        await ctx.editMessageText(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
                    callback_data: 'user_settings',
                  },
                ],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      }
    });
    this.bot.action('settings_ai', async (ctx) => {
      try {
        await ctx.answerCbQuery();
        const user = await this.userService.findByTelegramId(ctx.userId);

        await ctx.editMessageTextWithMarkdown(
          `
ü§ñ *AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏*

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
üß† AI —Ä–µ–∂–∏–º: ${user.aiMode !== false ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}
üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: ${user.dryMode === true ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}

üí° AI —Ä–µ–∂–∏–º –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É –¥–∞–≤–∞—Ç—å —É–º–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
          `,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text:
                      user.aiMode !== false
                        ? 'üß†‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å AI'
                        : 'üß†‚úÖ –í–∫–ª—é—á–∏—Ç—å AI',
                    callback_data: 'toggle_ai_mode',
                  },
                ],
                [
                  {
                    text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
                    callback_data: 'user_settings',
                  },
                ],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      } catch (error) {
        this.logger.error(`Error in settings_ai handler: ${error}`);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        await ctx.editMessageText(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ AI –Ω–∞—Å—Ç—Ä–æ–µ–∫.',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
                    callback_data: 'user_settings',
                  },
                ],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      }
    });

    this.bot.action('settings_privacy', async (ctx) => {
      try {
        await ctx.answerCbQuery();
        const user = await this.userService.findByTelegramId(ctx.userId);

        const privacyText = `üîí *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏*

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
üëÅÔ∏è –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: ${user.privacyLevel || '–û–±—ã—á–Ω—ã–π'}
üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üèôÔ∏è –ì–æ—Ä–æ–¥: ${user.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üí° –£—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∏–¥–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.`;

        await ctx.editMessageText(privacyText, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üëÅÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å',
                  callback_data: 'change_privacy_level',
                },
              ],
              [
                {
                  text: 'üåç –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å',
                  callback_data: 'change_timezone',
                },
              ],
              [
                {
                  text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
                  callback_data: 'user_settings',
                },
              ],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        });
      } catch (error) {
        this.logger.error(`Error in settings_privacy handler: ${error}`);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        await ctx.editMessageText(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'user_settings' }],
              ],
            },
          },
        );
      }
    });

    // Toggle handlers for settings
    this.bot.action('toggle_notifications', async (ctx) => {
      try {
        await ctx.answerCbQuery();
        const user = await this.userService.findByTelegramId(ctx.userId);

        await this.userService.updateUser(ctx.userId, {
          notifications: !(user.notifications !== false),
        });

        await ctx.editMessageTextWithMarkdown(
          `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${!(user.notifications !== false) ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º',
                    callback_data: 'settings_notifications',
                  },
                ],
              ],
            },
          },
        );
      } catch (error) {
        this.logger.error(`Error in toggle_notifications handler: ${error}`);
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
      }
    });

    this.bot.action('toggle_weekly_summary', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await this.userService.updateUser(ctx.userId, {
        weeklySummary: !user.weeklySummary,
      });

      await ctx.editMessageTextWithMarkdown(
        `‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ ${!user.weeklySummary ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º',
                  callback_data: 'settings_notifications',
                },
              ],
            ],
          },
        },
      );
    });

    this.bot.action('toggle_animations', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await this.userService.updateUser(ctx.userId, {
        showAnimations: !user.showAnimations,
      });

      await ctx.editMessageTextWithMarkdown(
        `‚úÖ –ê–Ω–∏–º–∞—Ü–∏–∏ ${!user.showAnimations ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É',
                  callback_data: 'settings_interface',
                },
              ],
            ],
          },
        },
      );
    });

    this.bot.action('toggle_voice_commands', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await this.userService.updateUser(ctx.userId, {
        voiceCommands: !user.voiceCommands,
      });

      await ctx.editMessageTextWithMarkdown(
        `‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ${!user.voiceCommands ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É',
                  callback_data: 'settings_interface',
                },
              ],
            ],
          },
        },
      );
    });

    this.bot.action('toggle_ai_mode', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await this.userService.updateUser(ctx.userId, {
        aiMode: !user.aiMode,
      });

      await ctx.editMessageTextWithMarkdown(
        `‚úÖ AI —Ä–µ–∂–∏–º ${!user.aiMode ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ AI –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
                  callback_data: 'settings_ai',
                },
              ],
            ],
          },
        },
      );
    });

    this.bot.action('achievements', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await ctx.editMessageTextWithMarkdown(
        `
ü•á *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*

**–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:**
üèÜ –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ - –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
‚≠ê –ù–æ–≤–∏—á–æ–∫ - –ü–æ–ª—É—á–∏—Ç—å 100 XP
üìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç 3 –¥–Ω—è

**–í –ø—Ä–æ—Ü–µ—Å—Å–µ:**
 –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π - –í—ã–ø–æ–ª–Ω–∏—Ç—å 50 –∑–∞–¥–∞—á (${user.completedTasks}/50)
üöÄ –≠–Ω—Ç—É–∑–∏–∞—Å—Ç - –ü–æ–ª—É—á–∏—Ç—å 1000 XP (${user.totalXp}/1000)
üéØ –¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω—ã–π - –°–æ–∑–¥–∞—Ç—å 20 –∑–∞–¥–∞—á (${user.totalTasks}/20)

**–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:**
‚ö° –ú–æ–ª–Ω–∏—è - –í—ã–ø–æ–ª–Ω–∏—Ç—å 10 –∑–∞–¥–∞—á –∑–∞ –¥–µ–Ω—å
üåü –õ–µ–≥–µ–Ω–¥–∞ - –ü–æ–ª—É—á–∏—Ç—å 10000 XP
üèÖ –ú–∞—Å—Ç–µ—Ä - –í—ã–ø–æ–ª–Ω–∏—Ç—å 200 –∑–∞–¥–∞—á

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π! üéâ
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    });

    this.bot.action('challenges', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        `
üöÄ *–ß–µ–ª–ª–µ–Ω–¥–∂–∏*

**–ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è:**
‚è∞ 7-–¥–Ω–µ–≤–Ω—ã–π –º–∞—Ä–∞—Ñ–æ–Ω –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
üìù –í—ã–ø–æ–ª–Ω–∏—Ç—å 21 –∑–∞–¥–∞—á—É –∑–∞ –Ω–µ–¥–µ–ª—é

**–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã:**
üåÖ –†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞ - 5 –∑–∞–¥–∞—á –¥–æ 10:00
üåô –ù–æ—á–Ω–∞—è —Å–æ–≤–∞ - 3 –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ 20:00
‚ö° –°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —Ä–µ–∂–∏–º - 10 –∑–∞–¥–∞—á –∑–∞ –¥–µ–Ω—å

**–ù–∞–≥—Ä–∞–¥—ã:**
üèÜ –ó–Ω–∞—á–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
‚≠ê –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ XP
üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

*–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —Å–∫–æ—Ä–æ –Ω–æ–≤—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏!*
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    });

    this.bot.action('bonuses_referrals', async (ctx) => {
      await ctx.answerCbQuery();

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–æ—Ç–æ–º
      const botUsername = 'test_healthcheck_dev_bot';
      const referralLink = `https://t.me/${botUsername}?start=ref_${ctx.userId}`;

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      const referralStats = await this.getReferralStats(ctx.userId);

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 5 –¥—Ä—É–∑–µ–π
      const progress = Math.min(referralStats.totalReferrals, 5);
      const progressBar = '‚ñà'.repeat(progress) + '‚ñë'.repeat(5 - progress);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
      let nextMilestone = '';
      if (referralStats.totalReferrals < 1) {
        nextMilestone = '\nüéØ **–°–ª–µ–¥—É—é—â–∞—è —Ü–µ–ª—å:** 1 –¥—Ä—É–≥ = +200 XP –±–æ–Ω—É—Å!';
      } else if (referralStats.totalReferrals < 3) {
        nextMilestone = '\nüéØ **–°–ª–µ–¥—É—é—â–∞—è —Ü–µ–ª—å:** 3 –¥—Ä—É–≥–∞ = +500 XP –±–æ–Ω—É—Å!';
      } else if (referralStats.totalReferrals < 5) {
        nextMilestone = '\nüéØ **–°–ª–µ–¥—É—é—â–∞—è —Ü–µ–ª—å:** 5 –¥—Ä—É–∑–µ–π = +1000 XP –±–æ–Ω—É—Å!';
      } else {
        nextMilestone = '\nüèÜ **–í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!**';
      }

      await ctx.editMessageTextWithMarkdown(
        `
ü§ù *–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê*

üí∞ **–ó–ê–†–ê–ë–ê–¢–´–í–ê–ô–¢–ï –†–ï–ê–õ–¨–ù–´–ï –î–ï–ù–¨–ì–ò!**
–ü–æ–ª—É—á–∞–π—Ç–µ 40% –æ—Ç –≤—Å–µ—Ö –æ–ø–ª–∞—Ç –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏!

üí° **–ü–†–ò–ú–ï–†:**
–í–∞—à –¥—Ä—É–≥ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≥–æ–¥ –∑–∞ 999‚ÇΩ
‚Üí –í—ã –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç–µ 399‚ÇΩ –Ω–∞ —Å–≤–æ–π —Å—á–µ—Ç! üí∏

üîó **–í–ê–®–ê –°–°–´–õ–ö–ê** üëá
\`${referralLink}\`

üí≥ **–í–ê–® –†–ï–§–ï–†–ê–õ–¨–ù–´–ô –ë–ê–õ–ê–ù–°:**
${referralStats.referralBalance}‚ÇΩ

üìä **–ü–†–û–ì–†–ï–°–° –î–û 5 –î–†–£–ó–ï–ô:**
${progressBar} ${referralStats.totalReferrals}/5${nextMilestone}

**–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–¢–ù–ï–†–°–¢–í–ê:**
üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${referralStats.totalReferrals}
üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${referralStats.activeReferrals}  
üéÅ –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: ${referralStats.totalBonus} XP
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–µ–Ω–µ–≥: ${referralStats.referralBalance}‚ÇΩ

**–°–ò–°–¢–ï–ú–ê –í–û–ó–ù–ê–ì–†–ê–ñ–î–ï–ù–ò–ô:**
üí∏ **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ:**
‚Ä¢ –ó–∞ –æ–ø–ª–∞—Ç—É –º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥—Ä—É–≥–∞ (199‚ÇΩ): +79‚ÇΩ
‚Ä¢ –ó–∞ –æ–ø–ª–∞—Ç—É –≥–æ–¥–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥—Ä—É–≥–∞ (999‚ÇΩ): +399‚ÇΩ

üéÅ **XP –ë–æ–Ω—É—Å—ã:**
‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞: +500 XP
‚Ä¢ 1-–π –¥—Ä—É–≥: +200 XP –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ  
‚Ä¢ 3 –¥—Ä—É–≥–∞: +500 XP –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
‚Ä¢ 5 –¥—Ä—É–∑–µ–π: +1000 XP –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
‚Ä¢ –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç: +200 XP –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

**–í–ê–®–ò –î–†–£–ó–¨–Ø:**
${
  referralStats.topReferrals && referralStats.topReferrals.length > 0
    ? referralStats.topReferrals
        .map(
          (ref, i) =>
            `${i + 1}. ${ref.name} ${ref.isActive ? 'üü¢' : 'üî¥'} (${ref.joinDate})`,
        )
        .join('\n')
    : '–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤'
}

üí° **–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!**
üü¢ = –∞–∫—Ç–∏–≤–µ–Ω –∑–∞ –Ω–µ–¥–µ–ª—é, üî¥ = –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É',
                  callback_data: 'copy_referral_link',
                },
                {
                  text: 'ÔøΩ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è',
                  callback_data: 'share_referral_link',
                },
              ],
              [
                {
                  text: 'ÔøΩüìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                  callback_data: 'referral_stats',
                },
              ],
              [
                { text: 'üí∞ –í—ã–≤–µ—Å—Ç–∏ –±–æ–Ω—É—Å—ã', callback_data: 'withdraw_bonus' },
                { text: 'üí∏ –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏', callback_data: 'withdraw_money' },
              ],
              [
                {
                  text: 'üéì –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç',
                  callback_data: 'how_referral_works',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    });

    // Referral system handlers
    this.bot.action('copy_referral_link', async (ctx) => {
      await ctx.answerCbQuery('üìã –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!');
      const botUsername = 'test_healthcheck_dev_bot';
      const referralLink = `https://t.me/${botUsername}?start=ref_${ctx.userId}`;

      await ctx.reply(
        `üîó *–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:*\n\n\`${referralLink}\`\n\nüì± –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!\nüí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ +500 XP + 40% –æ—Ç –≤—Å–µ—Ö –∏—Ö –æ–ø–ª–∞—Ç!`,
        { parse_mode: 'Markdown' },
      );
    });

    // Handler for sharing referral link
    this.bot.action('share_referral_link', async (ctx) => {
      await ctx.answerCbQuery();
      const botUsername = 'test_healthcheck_dev_bot';
      const referralLink = `https://t.me/${botUsername}?start=ref_${ctx.userId}`;

      const shareText = `üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Daily Check - –±–æ—Ç—É –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!

üí™ –ü–ª–∞–Ω–∏—Ä—É–π –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –∑–∞–¥–∞—á–∏
üéØ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏ –ø–æ –º–µ—Ç–æ–¥—É Pomodoro  
üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–æ–ª—É—á–∞–π XP
ü§ñ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏

–ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –Ω–∞—á–Ω–∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!
${referralLink}`;

      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram API –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        await ctx.reply(
          `üì§ *–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏*

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:`,
          {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üì§ –í—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç',
                    switch_inline_query: shareText,
                  },
                ],
                [
                  {
                    text: 'üí¨ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ —á–∞—Ç–µ',
                    switch_inline_query_current_chat: shareText,
                  },
                ],
                [
                  {
                    text: 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É',
                    callback_data: 'copy_referral_link',
                  },
                ],
                [
                  {
                    text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                    callback_data: 'bonuses_referrals',
                  },
                ],
              ],
            },
          },
        );
      } catch (error) {
        this.logger.error('Error sharing referral link:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π.');
      }
    });

    this.bot.action('referral_stats', async (ctx) => {
      await ctx.answerCbQuery();

      const referralStats = await this.getReferralStats(ctx.userId);

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü
      const monthAgo = new Date();
      monthAgo.setMonth(monthAgo.getMonth() - 1);

      const user = await this.userService.findByTelegramId(ctx.userId);
      const monthlyReferrals = await this.prisma.user.count({
        where: {
          referredBy: user.id,
          createdAt: {
            gte: monthAgo,
          },
        },
      });

      const activityPercent =
        referralStats.totalReferrals > 0
          ? Math.round(
              (referralStats.activeReferrals / referralStats.totalReferrals) *
                100,
            )
          : 0;

      await ctx.editMessageTextWithMarkdown(
        `
üìä *–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*

**–ó–ê –í–°–ï –í–†–ï–ú–Ø:**
üë• –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: ${referralStats.totalReferrals}
üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralStats.activeReferrals}
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ XP: ${referralStats.totalBonus}

**–ó–ê –≠–¢–û–¢ –ú–ï–°–Ø–¶:**
üìà –ù–æ–≤—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: ${monthlyReferrals}
‚≠ê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${activityPercent}%
üéÅ –ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: ${monthlyReferrals * 500} XP

**–î–û–°–¢–ò–ñ–ï–ù–ò–Ø:**
${referralStats.totalReferrals >= 1 ? 'üèÜ –ü–µ—Ä–≤—ã–π –¥—Ä—É–≥ (+200 XP)' : 'üîí –ü–µ—Ä–≤—ã–π –¥—Ä—É–≥ (–ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 1 –¥—Ä—É–≥–∞)'}
${referralStats.totalReferrals >= 3 ? 'üèÜ –¢—Ä–æ–π–∫–∞ –¥—Ä—É–∑–µ–π (+500 XP)' : 'üîí –¢—Ä–æ–π–∫–∞ –¥—Ä—É–∑–µ–π (–ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 3 –¥—Ä—É–∑–µ–π)'}
${referralStats.totalReferrals >= 5 ? 'üèÜ –ü—è—Ç–µ—Ä–∫–∞ –¥—Ä—É–∑–µ–π (+1000 XP)' : 'üîí –ü—è—Ç–µ—Ä–∫–∞ –¥—Ä—É–∑–µ–π (–ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 5 –¥—Ä—É–∑–µ–π)'}

**–ê–ö–¢–ò–í–ù–û–°–¢–¨ –î–†–£–ó–ï–ô:**
${
  referralStats.topReferrals && referralStats.topReferrals.length > 0
    ? referralStats.topReferrals
        .map((ref, i) => {
          const status = ref.isActive ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω';
          return `${i + 1}. ${ref.name} - ${status}`;
        })
        .join('\n')
    : '–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤'
}

*üí° –ê–∫—Ç–∏–≤–Ω—ã–µ –¥—Ä—É–∑—å—è - —ç—Ç–æ —Ç–µ, –∫—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π*
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º', callback_data: 'bonuses_referrals' }],
            ],
          },
        },
      );
    });

    this.bot.action('how_referral_works', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        `
üéì *–ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢ –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê*

üí∏ **–ó–ê–†–ê–ë–ê–¢–´–í–ê–ô–¢–ï –†–ï–ê–õ–¨–ù–´–ï –î–ï–ù–¨–ì–ò!**
–ü–æ–ª—É—á–∞–π—Ç–µ 40% –æ—Ç –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π!

**–®–ê–ì 1: –ü–û–î–ï–õ–ò–¢–ï–°–¨ –°–°–´–õ–ö–û–ô**
üì± –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º –≤ —á–∞—Ç –∏–ª–∏ —Å–æ—Ü—Å–µ—Ç–∏
üîó –°—Å—ã–ª–∫–∞: https://t.me/test_healthcheck_dev_bot?start=ref_–í–ê–®ID

**–®–ê–ì 2: –î–†–£–ì –†–ï–ì–ò–°–¢–†–ò–†–£–ï–¢–°–Ø**
üë§ –î—Ä—É–≥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ
üöÄ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –±–æ—Ç–µ —á–µ—Ä–µ–∑ /start
üéÅ –ü–æ–ª—É—á–∞–µ—Ç +200 XP –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

**–®–ê–ì 3: –ü–û–õ–£–ß–ê–ï–¢–ï XP –ë–û–ù–£–°–´**
üí∞ +500 XP —Å—Ä–∞–∑—É –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
üèÜ +200 XP –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞ 1-–≥–æ –¥—Ä—É–≥–∞
üèÜ +500 XP –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞ 3-—Ö –¥—Ä—É–∑–µ–π
üèÜ +1000 XP –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞ 5-–∏ –¥—Ä—É–∑–µ–π

**–®–ê–ì 4: –ü–û–õ–£–ß–ê–ï–¢–ï –î–ï–ù–¨–ì–ò**
üí∏ –î—Ä—É–≥ –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É 199‚ÇΩ ‚Üí –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 79‚ÇΩ
üí∏ –î—Ä—É–≥ –ø–æ–∫—É–ø–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É 999‚ÇΩ ‚Üí –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 399‚ÇΩ
üí∞ –î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å
üí≥ –í—ã–≤–æ–¥ –æ—Ç 100‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É/–∫–æ—à–µ–ª–µ–∫

**–ü–†–ò–ú–ï–† –ó–ê–†–ê–ë–û–¢–ö–ê:**
üë• 5 –¥—Ä—É–∑–µ–π –∫—É–ø–∏–ª–∏ –≥–æ–¥–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
üí∞ 5 √ó 399‚ÇΩ = 1,995‚ÇΩ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥!
üéÅ + 4,200 XP –±–æ–Ω—É—Å–æ–≤

**–£–°–õ–û–í–ò–Ø:**
‚Ä¢ –°–∞–º–æ–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è
‚Ä¢ –í—ã–ø–ª–∞—Ç—ã –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –∏ –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–µ
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥: 100‚ÇΩ

*üöÄ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!*
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É',
                  callback_data: 'copy_referral_link',
                },
                {
                  text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è',
                  callback_data: 'share_referral_link',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º', callback_data: 'bonuses_referrals' }],
            ],
          },
        },
      );
    });

    this.bot.action('withdraw_bonus', async (ctx) => {
      await ctx.answerCbQuery();

      const user = await this.userService.findByTelegramId(ctx.userId);
      const referralStats = await this.getReferralStats(ctx.userId);

      await ctx.editMessageTextWithMarkdown(
        `
üí∞ *–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –†–ï–§–ï–†–ê–õ–¨–ù–´–• –ë–û–ù–£–°–û–í*

**–í–ê–®–ò –ë–û–ù–£–°–´:**
‚≠ê –û–±—â–∏–π XP: ${user.totalXp}
üéÅ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralStats.totalBonus} XP
ÔøΩ –£—Ä–æ–≤–µ–Ω—å: ${user.level}

**–ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ë–û–ù–£–°–´:**
üì± XP –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –±–æ—Ç–µ
ÔøΩ –ü–æ–≤—ã—à–∞–µ—Ç –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∏ —Å—Ç–∞—Ç—É—Å
üîì –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚ö° –£—Å–∫–æ—Ä—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∑–∞–¥–∞—á–∞—Ö

**–ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –í–´–°–û–ö–û–ì–û –£–†–û–í–ù–Ø:**
üéØ –ë–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ –±–æ—Ç–µ
‚≠ê –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
üèÜ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
üëë VIP —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

**–ë–£–î–£–©–ò–ï –§–£–ù–ö–¶–ò–ò:**
ÔøΩ –ú–∞–≥–∞–∑–∏–Ω –Ω–∞–≥—Ä–∞–¥ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
üéÅ –û–±–º–µ–Ω –Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É
üí∏ –î–µ–Ω–µ–∂–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã (–¥–ª—è —Ç–æ–ø-—Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤)

*ÔøΩ –ü–æ–∫–∞ XP —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –∏–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –±–æ—Ç–∞!*
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º', callback_data: 'bonuses_referrals' }],
            ],
          },
        },
      );
    });

    this.bot.action('withdraw_money', async (ctx) => {
      await ctx.answerCbQuery();

      const referralStats = await this.getReferralStats(ctx.userId);

      if (referralStats.referralBalance < 100) {
        await ctx.editMessageTextWithMarkdown(
          `
üí∏ *–í–´–í–û–î –†–ï–§–ï–†–ê–õ–¨–ù–´–• –°–†–ï–î–°–¢–í*

‚ùå **–ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –°–†–ï–î–°–¢–í –î–õ–Ø –í–´–í–û–î–ê**

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${referralStats.referralBalance}‚ÇΩ
üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 100‚ÇΩ

üìà **–ö–ê–ö –£–í–ï–õ–ò–ß–ò–¢–¨ –ë–ê–õ–ê–ù–°:**
‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
‚Ä¢ –î—Ä—É–∑—å—è –¥–æ–ª–∂–Ω—ã –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:
  - 199‚ÇΩ/–º–µ—Å—è—Ü ‚Üí –í—ã –ø–æ–ª—É—á–∏—Ç–µ 79‚ÇΩ
  - 999‚ÇΩ/–≥–æ–¥ ‚Üí –í—ã –ø–æ–ª—É—á–∏—Ç–µ 399‚ÇΩ

üí° **–ü–†–ò–ú–ï–†:**
–í—Å–µ–≥–æ 1 –¥—Ä—É–≥ —Å –≥–æ–¥–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π = 399‚ÇΩ ‚úÖ
          `,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '‚¨ÖÔ∏è –ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º',
                    callback_data: 'bonuses_referrals',
                  },
                ],
              ],
            },
          },
        );
        return;
      }

      await ctx.editMessageTextWithMarkdown(
        `
üí∏ *–í–´–í–û–î –†–ï–§–ï–†–ê–õ–¨–ù–´–• –°–†–ï–î–°–¢–í*

üí∞ **–ö –í–´–í–û–î–£:** ${referralStats.referralBalance}‚ÇΩ

üìã **–°–ü–û–°–û–ë–´ –ü–û–õ–£–ß–ï–ù–ò–Ø:**
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (–ª—é–±–æ–π –±–∞–Ω–∫ –†–§)
‚Ä¢ –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)
‚Ä¢ –ÆMoney (–Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏)
‚Ä¢ Qiwi –∫–æ—à–µ–ª–µ–∫

‚è∞ **–°–†–û–ö–ò –í–´–ü–õ–ê–¢:**
‚Ä¢ –†–∞–±–æ—á–∏–µ –¥–Ω–∏: 1-3 —á–∞—Å–∞
‚Ä¢ –í—ã—Ö–æ–¥–Ω—ã–µ: –¥–æ 24 —á–∞—Å–æ–≤

‚ùó **–í–ê–ñ–ù–û:**
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 100‚ÇΩ
‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è: 0% (–º—ã –±–µ—Ä–µ–º –Ω–∞ —Å–µ–±—è)
‚Ä¢ –ù–∞–ª–æ–≥–∏: —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–§

*üìß –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @support_bot*
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
                  url: 'https://t.me/support_bot',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ö —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º', callback_data: 'bonuses_referrals' }],
            ],
          },
        },
      );
    });

    this.bot.action('user_profile', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await ctx.editMessageTextWithMarkdown(
        `
üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*

**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
üìõ –ò–º—è: ${user.firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üÜî ID: ${user.id}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${user.createdAt.toLocaleDateString('ru-RU')}
üåç –ì–æ—Ä–æ–¥: ${user.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone || '–ù–µ —É–∫–∞–∑–∞–Ω'}

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚≠ê –û–±—â–∏–π –æ–ø—ã—Ç: ${user.totalXp} XP  
üéñÔ∏è –£—Ä–æ–≤–µ–Ω—å: ${user.level}
üìã –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á: ${user.completedTasks}

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.notifications ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
üé® –¢–µ–º–∞: ${user.theme || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'}
ü§ñ –ò–ò-—Ä–µ–∂–∏–º: ${user.aiMode ? '‚úÖ –í–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'edit_profile' },
                { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' },
              ],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });

    this.bot.action('reminders', async (ctx) => {
      try {
        await ctx.answerCbQuery();
        this.logger.log('Reminders button clicked by user:', ctx.userId);
        await this.showRemindersMenu(ctx);
      } catch (error) {
        this.logger.error('Error in reminders action handler:', error);
        try {
          await ctx.answerCbQuery();
          await ctx.replyWithMarkdown(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          );
        } catch (fallbackError) {
          this.logger.error(
            'Error in fallback handling for reminders:',
            fallbackError,
          );
        }
      }
    });

    this.bot.action('all_reminders', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showAllReminders(ctx);
    });

    this.bot.action('create_reminder_help', async (ctx) => {
      try {
        await ctx.answerCbQuery();
        await this.showCreateReminderHelp(ctx);
      } catch (error) {
        this.logger.error('Error handling create_reminder_help:', error);
        try {
          await ctx.answerCbQuery();
          await ctx.replyWithMarkdown('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } catch (fallbackError) {
          this.logger.error('Error in fallback handling:', fallbackError);
        }
      }
    });

    this.bot.action('voice_reminder_help', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showVoiceReminderHelp(ctx);
    });

    this.bot.action('manage_reminders', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showManageReminders(ctx);
    });

    this.bot.action('reminders_stats', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showRemindersStats(ctx);
    });

    // Handle reminder deletion
    this.bot.action(/^delete_reminder_(.+)$/, async (ctx) => {
      const reminderId = ctx.match[1];
      await ctx.answerCbQuery();
      await this.handleDeleteReminder(ctx, reminderId);
    });

    // Handle disabling all reminders
    this.bot.action('disable_all_reminders', async (ctx) => {
      await ctx.answerCbQuery();
      try {
        // –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.userService.updateUser(ctx.userId, {
          dailyReminders: false,
        });

        // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await this.prisma.reminder.updateMany({
          where: {
            userId: ctx.userId,
            status: 'ACTIVE',
          },
          data: {
            status: 'DISMISSED',
          },
        });

        await ctx.editMessageTextWithMarkdown(
          `üîï *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã*

–í—Å–µ –≤–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

üí° –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞.`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üîî –í–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ',
                    callback_data: 'enable_all_reminders',
                  },
                ],
                [
                  {
                    text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                    callback_data: 'settings_menu',
                  },
                ],
                [
                  {
                    text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                    callback_data: 'back_to_menu',
                  },
                ],
              ],
            },
          },
        );
      } catch (error) {
        this.logger.error('Error disabling reminders:', error);
        await ctx.editMessageTextWithMarkdown(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.',
        );
      }
    });

    // Handle enabling all reminders
    this.bot.action('enable_all_reminders', async (ctx) => {
      await ctx.answerCbQuery();
      try {
        await this.userService.updateUser(ctx.userId, {
          dailyReminders: true,
        });

        await ctx.editMessageTextWithMarkdown(
          `üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã*

–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üîî –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
                    callback_data: 'reminders',
                  },
                ],
                [
                  {
                    text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                    callback_data: 'settings_menu',
                  },
                ],
                [
                  {
                    text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                    callback_data: 'back_to_menu',
                  },
                ],
              ],
            },
          },
        );
      } catch (error) {
        this.logger.error('Error enabling reminders:', error);
        await ctx.editMessageTextWithMarkdown(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.',
        );
      }
    });

    this.bot.action('settings_menu', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        `
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*

üöß *–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*

–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!

–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚Ä¢ üé® –¢–µ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
‚Ä¢ üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
‚Ä¢ ü§ñ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
‚Ä¢ üë§ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è
‚Ä¢ ÔøΩ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏

ÔøΩ –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π email –≤ –ø—Ä–æ—Ñ–∏–ª–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ.
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    });

    this.bot.action('shop', async (ctx) => {
      await ctx.answerCbQuery();
      const user = await this.userService.findByTelegramId(ctx.userId);

      await ctx.editMessageTextWithMarkdown(
        `
üõçÔ∏è *XP –ú–∞–≥–∞–∑–∏–Ω*

üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${user.totalXp} XP

**üé® –ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è:**
‚Ä¢ ÔøΩ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è —Ç–µ–º–∞ "–¢–µ–º–Ω–∞—è –º–∞—Ç–µ—Ä–∏—è" - 2000 XP
‚Ä¢ üèÜ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ "–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" - 1500 XP
‚Ä¢ ‚ö° –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ –Ω–∞–±–æ—Ä - 800 XP
‚Ä¢ üåü –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã - 1200 XP

**üöÄ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:**
‚Ä¢ üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - 3000 XP
‚Ä¢ üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á - 2500 XP
‚Ä¢ üîî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - 1800 XP
‚Ä¢ üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö - 2200 XP

üí° –ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ XP –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏! 
‚≠ê –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –µ—â—ë –±–æ–ª—å—à–µ —É–ª—É—á—à–µ–Ω–∏–π!
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üé≠ –¢–µ–º—ã (2000 XP)', callback_data: 'buy_theme_2000' },
                {
                  text: 'üèÜ –ó–Ω–∞—á–∫–∏ (1500 XP)',
                  callback_data: 'buy_badge_1500',
                },
              ],
              [
                { text: '‚ö° –≠–º–æ–¥–∑–∏ (800 XP)', callback_data: 'buy_emoji_800' },
                {
                  text: 'üåü –°—Ç–∏–∫–µ—Ä—ã (1200 XP)',
                  callback_data: 'buy_stickers_1200',
                },
              ],
              [
                {
                  text: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (3000 XP)',
                  callback_data: 'buy_stats_3000',
                },
                {
                  text: 'üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (2500 XP)',
                  callback_data: 'buy_categories_2500',
                },
              ],
              [
                {
                  text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (1800 XP)',
                  callback_data: 'buy_notifications_1800',
                },
                {
                  text: 'üìä –≠–∫—Å–ø–æ—Ä—Ç (2200 XP)',
                  callback_data: 'buy_export_2200',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
            ],
          },
        },
      );
    });

    // XP Shop handler
    // XP Shop handler - redirects to main shop for consistency
    this.bot.action('xp_shop', async (ctx) => {
      await ctx.answerCbQuery();

      // Redirect to main shop which now shows XP items directly
      const user = await this.userService.findByTelegramId(ctx.userId);

      await ctx.editMessageTextWithMarkdown(
        `
üõçÔ∏è *XP –ú–∞–≥–∞–∑–∏–Ω*

üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${user.totalXp} XP

**üé® –ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è:**
‚Ä¢ üé≠ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è —Ç–µ–º–∞ "–¢–µ–º–Ω–∞—è –º–∞—Ç–µ—Ä–∏—è" - 2000 XP
‚Ä¢ üèÜ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ "–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" - 1500 XP
‚Ä¢ ‚ö° –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ –Ω–∞–±–æ—Ä - 800 XP
‚Ä¢ üåü –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã - 1200 XP

**üöÄ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:**
‚Ä¢ üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - 3000 XP
‚Ä¢ üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á - 2500 XP
‚Ä¢ üîî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - 1800 XP
‚Ä¢ üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö - 2200 XP

üí° –ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ XP –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏! 
‚≠ê –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –µ—â—ë –±–æ–ª—å—à–µ —É–ª—É—á—à–µ–Ω–∏–π!
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üé≠ –¢–µ–º—ã (2000 XP)', callback_data: 'buy_theme_2000' },
                {
                  text: 'üèÜ –ó–Ω–∞—á–∫–∏ (1500 XP)',
                  callback_data: 'buy_badge_1500',
                },
              ],
              [
                { text: '‚ö° –≠–º–æ–¥–∑–∏ (800 XP)', callback_data: 'buy_emoji_800' },
                {
                  text: 'üåü –°—Ç–∏–∫–µ—Ä—ã (1200 XP)',
                  callback_data: 'buy_stickers_1200',
                },
              ],
              [
                {
                  text: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (3000 XP)',
                  callback_data: 'buy_stats_3000',
                },
                {
                  text: 'üéØ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (2500 XP)',
                  callback_data: 'buy_categories_2500',
                },
              ],
              [
                {
                  text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (1800 XP)',
                  callback_data: 'buy_notifications_1800',
                },
                {
                  text: 'üìä –≠–∫—Å–ø–æ—Ä—Ç (2200 XP)',
                  callback_data: 'buy_export_2200',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
            ],
          },
        },
      );
    });

    // Premium shop handler
    this.bot.action('premium_shop', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        `
üí≥ *–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞*

**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Premium –≤–µ—Ä—Å–∏–∏:**
‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏
‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ AI
‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –∑–Ω–∞—á–∫–∏
‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
‚úÖ –ë–µ–∑ —Ä–µ–∫–ª–∞–º—ã
‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ò–ò

**–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:**

üí∞ **–ï–∂–µ–º–µ—Å—è—á–Ω–æ**: 199‚ÇΩ/–º–µ—Å—è—Ü
üíé **–ì–æ–¥–æ–≤–∞—è** (—Å–∫–∏–¥–∫–∞ 58%): 999‚ÇΩ/–≥–æ–¥

*–≠–∫–æ–Ω–æ–º–∏—è –ø—Ä–∏ –≥–æ–¥–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ: 1389‚ÇΩ!*
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üí∞ 199‚ÇΩ/–º–µ—Å—è—Ü', callback_data: 'buy_premium_monthly' },
                {
                  text: 'üíé 999‚ÇΩ/–≥–æ–¥ (-58%)',
                  callback_data: 'buy_premium_yearly',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ XP –º–∞–≥–∞–∑–∏–Ω—É', callback_data: 'shop' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
            ],
          },
        },
      );
    });

    // XP Purchase handlers
    this.bot.action('buy_theme_2000', async (ctx) => {
      await this.handleXPPurchase(
        ctx,
        'theme',
        2000,
        '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è —Ç–µ–º–∞ "–¢–µ–º–Ω–∞—è –º–∞—Ç–µ—Ä–∏—è"',
        'dark_matter',
      );
    });

    this.bot.action('buy_badge_1500', async (ctx) => {
      await this.handleXPPurchase(
        ctx,
        'badge',
        1500,
        '–ó–Ω–∞—á–æ–∫ "–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"',
        'productivity_master',
      );
    });

    this.bot.action('buy_emoji_800', async (ctx) => {
      await this.handleXPPurchase(
        ctx,
        'emoji',
        800,
        '–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏ –Ω–∞–±–æ—Ä',
        'animated_emoji_pack',
      );
    });

    this.bot.action('buy_stickers_1200', async (ctx) => {
      await this.handleXPPurchase(
        ctx,
        'sticker',
        1200,
        '–ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã',
        'custom_stickers',
      );
    });

    this.bot.action('buy_stats_3000', async (ctx) => {
      await this.handleXPPurchase(
        ctx,
        'feature',
        3000,
        '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        'advanced_stats',
      );
    });

    this.bot.action('buy_categories_2500', async (ctx) => {
      await this.handleXPPurchase(
        ctx,
        'feature',
        2500,
        '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–¥–∞—á',
        'extra_categories',
      );
    });

    this.bot.action('buy_notifications_1800', async (ctx) => {
      await this.handleXPPurchase(
        ctx,
        'feature',
        1800,
        '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        'personal_notifications',
      );
    });

    this.bot.action('buy_export_2200', async (ctx) => {
      await this.handleXPPurchase(
        ctx,
        'feature',
        2200,
        '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
        'data_export',
      );
    });

    // Billing handlers
    this.bot.action('show_limits', async (ctx) => {
      await ctx.answerCbQuery();
      const subscriptionStatus =
        await this.billingService.getSubscriptionStatus(ctx.userId);

      const limitsText =
        subscriptionStatus.limits.dailyReminders === -1
          ? '‚àû (–±–µ–∑–ª–∏–º–∏—Ç)'
          : subscriptionStatus.limits.dailyReminders.toString();
      const aiLimitsText =
        subscriptionStatus.limits.dailyAiQueries === -1
          ? '‚àû (–±–µ–∑–ª–∏–º–∏—Ç)'
          : subscriptionStatus.limits.dailyAiQueries.toString();

      let statusMessage = '';
      if (subscriptionStatus.isTrialActive) {
        statusMessage = `üéÅ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:** ${subscriptionStatus.daysRemaining} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å`;
      } else {
        statusMessage = `üíé **–ü–æ–¥–ø–∏—Å–∫–∞:** ${
          subscriptionStatus.type === 'FREE'
            ? '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è'
            : subscriptionStatus.type === 'PREMIUM'
              ? 'Premium'
              : 'Premium Plus'
        }`;
      }

      await ctx.editMessageTextWithMarkdown(
        `
üìä *–í–∞—à–∏ –ª–∏–º–∏—Ç—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ*

${statusMessage}

**–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è:**
üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${subscriptionStatus.usage.dailyReminders}/${limitsText}
üß† –ò–ò-–∑–∞–ø—Ä–æ—Å—ã: ${subscriptionStatus.usage.dailyAiQueries}/${aiLimitsText}
üìù –ó–∞–¥–∞—á–∏: ${subscriptionStatus.usage.dailyTasks}${subscriptionStatus.limits.dailyTasks === -1 ? '' : `/${subscriptionStatus.limits.dailyTasks}`}
üîÑ –ü—Ä–∏–≤—ã—á–∫–∏: ${subscriptionStatus.usage.dailyHabits}${subscriptionStatus.limits.dailyHabits === -1 ? '' : `/${subscriptionStatus.limits.dailyHabits}`}

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: ${subscriptionStatus.limits.advancedAnalytics ? '‚úÖ' : '‚ùå'}
üé® –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–º—ã: ${subscriptionStatus.limits.customThemes ? '‚úÖ' : '‚ùå'}
üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: ${subscriptionStatus.limits.prioritySupport ? '‚úÖ' : '‚ùå'}
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Premium',
                  callback_data: 'upgrade_premium',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });

    this.bot.action('upgrade_premium', async (ctx) => {
      await ctx.answerCbQuery();
      const trialInfo = await this.billingService.getTrialInfo(ctx.userId);

      let trialText = '';
      if (trialInfo.isTrialActive) {
        trialText = `üéÅ **–£ –≤–∞—Å –µ—Å—Ç—å ${trialInfo.daysRemaining} –¥–Ω–µ–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞!**

`;
      }

      await ctx.editMessageTextWithMarkdown(
        `
üíé *Premium –ø–æ–¥–ø–∏—Å–∫–∞*

${trialText}**Premium –ø–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:**

‚àû **–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ** –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚àû **–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ** –∑–∞–¥–∞—á–∏  
‚àû **–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ** –ø—Ä–∏–≤—ã—á–∫–∏
‚àû **–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ** –ò–ò-–∑–∞–ø—Ä–æ—Å—ã
‚àû **–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ** —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏
üìä **–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞**
üé® **–ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ç–µ–º—ã**
üöÄ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞**

**–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã:**
üí∞ 199‚ÇΩ/–º–µ—Å—è—Ü - –ø–æ–º–µ—Å—è—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞
üí∞ 999‚ÇΩ/–≥–æ–¥ - –≥–æ–¥–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ (—ç–∫–æ–Ω–æ–º–∏—è 58%!)

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üíé 199‚ÇΩ/–º–µ—Å—è—Ü', callback_data: 'buy_premium_monthly' },
                { text: 'ÔøΩ 999‚ÇΩ/–≥–æ–¥', callback_data: 'buy_premium_yearly' },
              ],
              [{ text: 'üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã', callback_data: 'show_limits' }],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });

    // Handle Premium Monthly purchase
    this.bot.action('buy_premium_monthly', async (ctx) => {
      await ctx.answerCbQuery();
      await this.createPayment(ctx, 'PREMIUM', 199);
    });

    // Handle Premium Yearly purchase
    this.bot.action('buy_premium_yearly', async (ctx) => {
      await ctx.answerCbQuery();
      await this.createPayment(ctx, 'PREMIUM', 999);
    });

    // Handle old Premium purchase (for backwards compatibility)
    this.bot.action('buy_premium', async (ctx) => {
      await ctx.answerCbQuery();
      await this.createPayment(ctx, 'PREMIUM', 199);
    });

    // Handle payment status check
    this.bot.action(/^check_payment_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const paymentId = ctx.match[1];

      try {
        const status = await this.paymentService.checkPaymentStatus(paymentId);

        if (status === 'succeeded') {
          await ctx.editMessageTextWithMarkdown(
            '‚úÖ *–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.',
          );
        } else if (status === 'canceled') {
          await ctx.editMessageTextWithMarkdown(
            '‚ùå *–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞–Ω–æ–≤–æ.',
          );
        } else {
          await ctx.editMessageTextWithMarkdown(
            '‚è≥ *–ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.',
          );
        }
      } catch (error) {
        await ctx.replyWithMarkdown(
          '‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        );
      }
    });

    this.bot.action('dependencies', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        `
üé≠ *–ë–ª–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π*

**–°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞ –±–∞–∑–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —á—Ç–æ–±—ã —Ç—ã —Å–º–æ–≥ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å—Å—è –æ—Ç –ª—é–±–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.**

      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üéØ –í—ã–±—Ä–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å',
                  callback_data: 'choose_dependency',
                },
                {
                  text: 'üìä –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
                  callback_data: 'dependency_results',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });

    this.bot.action('dependency_results', async (ctx) => {
      await ctx.answerCbQuery();

      try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const dependencies = await this.prisma.dependencySupport.findMany({
          where: {
            userId: ctx.userId,
            status: 'ACTIVE',
          },
          orderBy: {
            createdAt: 'asc',
          },
        });

        if (dependencies.length === 0) {
          await ctx.editMessageTextWithMarkdown(
            `
üìä *–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º*

‚ùå **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.**

–ù–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –≤—ã–±—Ä–∞–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å!
            `,
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: 'üéØ –í—ã–±—Ä–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å',
                      callback_data: 'choose_dependency',
                    },
                  ],
                  [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'dependencies' }],
                  [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
                ],
              },
            },
          );
          return;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        let statsMessage = `üìä *–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º*\n\n`;

        for (const dependency of dependencies) {
          const dependencyNames = {
            SMOKING: 'üö≠ –ö—É—Ä–µ–Ω–∏–µ',
            ALCOHOL: 'üç∫ –ê–ª–∫–æ–≥–æ–ª—å',
            GAMBLING: 'üé∞ –ê–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã',
            SWEET: 'üç∞ –°–ª–∞–¥–∫–æ–µ',
            SOCIAL_MEDIA: 'üì± –°–æ—Ü—Å–µ—Ç–∏',
            GAMING: 'üéÆ –ò–≥—Ä—ã',
            OTHER: 'üõí –î—Ä—É–≥–æ–µ',
          };

          const depName =
            dependencyNames[dependency.type] ||
            `‚úçÔ∏è ${dependency.customName || dependency.type}`;
          const startDate = dependency.createdAt;
          const now = new Date();
          const totalDays = Math.floor(
            (now.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24),
          );
          const cleanDays = dependency.daysClean || 0;
          const successRate =
            totalDays > 0 ? Math.round((cleanDays / totalDays) * 100) : 100;
          const keptPromises = dependency.keptPromises || 0;

          statsMessage += `${depName}\n`;
          statsMessage += `üìÖ **–ù–∞—á–∞–ª:** ${startDate.toLocaleDateString('ru-RU')}\n`;
          statsMessage += `üèÜ **–î–Ω–µ–π –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:** ${cleanDays}\n`;
          statsMessage += `üìà **–í—Å–µ–≥–æ –¥–Ω–µ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:** ${totalDays}\n`;
          statsMessage += `‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–±–µ—â–∞–Ω–∏–π:** ${keptPromises}\n`;
          statsMessage += `üìä **–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:** ${successRate}%\n`;

          // –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (cleanDays >= 30) {
            statsMessage += `üéâ **–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ë–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏!**\n`;
          } else if (cleanDays >= 7) {
            statsMessage += `üí™ **–•–æ—Ä–æ—à–æ –∏–¥–µ—Ç–µ! –£–∂–µ –Ω–µ–¥–µ–ª—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏!**\n`;
          } else if (cleanDays >= 1) {
            statsMessage += `üå± **–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!**\n`;
          } else {
            statsMessage += `üöÄ **–ù–∞—á–∏–Ω–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞! –£ –≤–∞—Å –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!**\n`;
          }

          statsMessage += `\n`;
        }

        statsMessage += `üí° *–ü–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ - —ç—Ç–æ –ø–æ–±–µ–¥–∞!*`;

        await ctx.editMessageTextWithMarkdown(statsMessage, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
                  callback_data: 'dependency_results',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'dependencies' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        });
      } catch (error) {
        this.logger.error('Error fetching dependency results:', error);
        await ctx.editMessageTextWithMarkdown(
          `
‚ùå *–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏*

–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
          `,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'dependencies' }],
              ],
            },
          },
        );
      }
    });

    this.bot.action('choose_dependency', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        `
üéØ *–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å*

**–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:**
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üö≠ –ö—É—Ä–µ–Ω–∏–µ', callback_data: 'dep_smoking' },
                { text: 'üç∫ –ê–ª–∫–æ–≥–æ–ª—å', callback_data: 'dep_alcohol' },
              ],
              [
                { text: 'üì± –°–æ—Ü—Å–µ—Ç–∏', callback_data: 'dep_social' },
                { text: 'üéÆ –ò–≥—Ä—ã', callback_data: 'dep_gaming' },
              ],
              [
                { text: 'üõí –ü–æ–∫—É–ø–∫–∏', callback_data: 'dep_shopping' },
                { text: 'üç∞ –°–ª–∞–¥–∫–æ–µ', callback_data: 'dep_sweets' },
              ],
              [{ text: '‚úçÔ∏è –°–≤–æ—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å', callback_data: 'dep_custom' }],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'dependencies' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });

    // Dependency tracking handlers
    ['smoking', 'alcohol', 'social', 'gaming', 'shopping', 'sweets'].forEach(
      (type) => {
        this.bot.action(`dep_${type}`, async (ctx) => {
          await ctx.answerCbQuery();

          const dependencyName =
            type === 'smoking'
              ? '–∫—É—Ä–µ–Ω–∏—è'
              : type === 'alcohol'
                ? '–∞–ª–∫–æ–≥–æ–ª—è'
                : type === 'social'
                  ? '—Å–æ—Ü—Å–µ—Ç–µ–π'
                  : type === 'gaming'
                    ? '–∏–≥—Ä'
                    : type === 'shopping'
                      ? '–ø–æ–∫—É–ø–æ–∫'
                      : '—Å–ª–∞–¥–∫–æ–≥–æ';

          await ctx.editMessageTextWithMarkdown(
            `
üéØ *–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –±–æ—Ä—å–±—É —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç ${dependencyName}*

ü§ñ –°–∏—Å—Ç–µ–º–∞ –ò–ò –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.

üí™ *–¢—ã —É–∂–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ —Å–≤–æ–±–æ–¥–µ!*

–ß—Ç–æ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç:
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –ò–ò
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç–≤–æ–∏—Ö —Ü–µ–ª—è—Ö
‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏–π

        `,
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: 'ÔøΩ –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å',
                      callback_data: `setup_reminders_${type}`,
                    },
                  ],
                  [
                    {
                      text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                      callback_data: 'choose_dependency',
                    },
                  ],
                ],
              },
            },
          );
        });
      },
    );

    // Custom dependency handler
    this.bot.action('dep_custom', async (ctx) => {
      await ctx.answerCbQuery();
      ctx.session.step = 'waiting_custom_dependency';
      await ctx.editMessageTextWithMarkdown(
        `
‚úçÔ∏è *–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏*

–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–±–∞–≤–∏—Ç—å—Å—è:

*–ù–∞–ø—Ä–∏–º–µ—Ä:* "–ü–µ—Ä–µ–µ–¥–∞–Ω–∏–µ", "–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—è", "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º—ã—Å–ª–∏" –∏ —Ç.–¥.

‚¨áÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∂–µ*
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'choose_dependency' }],
            ],
          },
        },
      );
    });

    // Setup reminders for dependencies
    ['smoking', 'alcohol', 'social', 'gaming', 'shopping', 'sweets'].forEach(
      (type) => {
        this.bot.action(`setup_reminders_${type}`, async (ctx) => {
          await ctx.answerCbQuery();

          const dependencyName =
            type === 'smoking'
              ? '–∫—É—Ä–µ–Ω–∏—è'
              : type === 'alcohol'
                ? '–∞–ª–∫–æ–≥–æ–ª—è'
                : type === 'social'
                  ? '—Å–æ—Ü—Å–µ—Ç–µ–π'
                  : type === 'gaming'
                    ? '–∏–≥—Ä'
                    : type === 'shopping'
                      ? '–ø–æ–∫—É–ø–æ–∫'
                      : '—Å–ª–∞–¥–∫–æ–≥–æ';

          try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            // await this.userService.updateUser(ctx.userId, {
            //   dependencyType: type,
            //   dependencyStartDate: new Date(),
            // });

            // –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            const user = await this.userService.findByTelegramId(ctx.userId);
            this.startDailyMotivation(user.id, type);

            await ctx.editMessageTextWithMarkdown(
              `
‚úÖ *–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø—É—Å–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç!*

üéØ **–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å:** ${dependencyName}
üìÖ **–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:** ${new Date().toLocaleDateString('ru-RU')}

ü§ñ **–ò–ò-—Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:**
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Ç—Ä–æ–º –≤ 9:00
‚Ä¢ –í–µ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ 21:00
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –¢—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

‚è∞ **–ì—Ä–∞—Ñ–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**
üåÖ **–£—Ç—Ä–æ–º (9:00):** –ú–æ—Ç–∏–≤–∞—Ü–∏—è + –∫–Ω–æ–ø–∫–∞ "–û–±–µ—â–∞—é —Å–∞–º —Å–µ–±–µ"
üåô **–í–µ—á–µ—Ä–æ–º (21:00):** –ü—Ä–æ–≤–µ—Ä–∫–∞ + –∫–Ω–æ–ø–∫–∏ "–î–µ—Ä–∂—É—Å—å"/"–°–¥–∞–ª—Å—è"

–£–¥–∞—á–∏ –≤ –±–æ—Ä—å–±–µ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é! –¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! üöÄ
            `,
              {
                reply_markup: {
                  inline_keyboard: [
                    [
                      {
                        text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                        callback_data: 'back_to_menu',
                      },
                    ],
                  ],
                },
              },
            );
          } catch (error) {
            this.logger.error(
              `Error setting up dependency reminders: ${error}`,
            );
            await ctx.editMessageTextWithMarkdown(
              '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
              {
                reply_markup: {
                  inline_keyboard: [
                    [
                      {
                        text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                        callback_data: 'choose_dependency',
                      },
                    ],
                    [
                      {
                        text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                        callback_data: 'back_to_menu',
                      },
                    ],
                  ],
                },
              },
            );
          }
        });
      },
    );

    // Morning promise handlers
    ['smoking', 'alcohol', 'social', 'gaming', 'shopping', 'sweets'].forEach(
      (type) => {
        this.bot.action(`morning_promise_${type}`, async (ctx) => {
          await ctx.answerCbQuery();

          const dependencyName =
            type === 'smoking'
              ? '–∫—É—Ä–µ–Ω–∏—è'
              : type === 'alcohol'
                ? '–∞–ª–∫–æ–≥–æ–ª—è'
                : type === 'social'
                  ? '—Å–æ—Ü—Å–µ—Ç–µ–π'
                  : type === 'gaming'
                    ? '–∏–≥—Ä'
                    : type === 'shopping'
                      ? '–ø–æ–∫—É–ø–æ–∫'
                      : '—Å–ª–∞–¥–∫–æ–≥–æ';

          await ctx.replyWithMarkdown(`
üí™ *–û—Ç–ª–∏—á–Ω–æ! –û–±–µ—â–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!*

üéØ **–°–µ–≥–æ–¥–Ω—è —Ç—ã –æ–±–µ—â–∞–µ—à—å —Å–µ–±–µ –∏–∑–±–µ–≥–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç ${dependencyName}**

‚ú® –ü–æ–º–Ω–∏ —ç—Ç–æ –æ–±–µ—â–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è. –¢—ã —Å–∏–ª—å–Ω–µ–µ –ª—é–±—ã—Ö –∏—Å–∫—É—à–µ–Ω–∏–π!

üåü –í–µ—á–µ—Ä–æ–º —è —Å–ø—Ä–æ—à—É, –∫–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å. –£–¥–∞—á–∏! üöÄ
        `);
        });
      },
    );

    // Morning success handlers (–î–µ—Ä–∂—É—Å—å)
    ['smoking', 'alcohol', 'social', 'gaming', 'shopping', 'sweets'].forEach(
      (type) => {
        this.bot.action(`morning_success_${type}`, async (ctx) => {
          await ctx.answerCbQuery();

          const dependencyName =
            type === 'smoking'
              ? '–∫—É—Ä–µ–Ω–∏—è'
              : type === 'alcohol'
                ? '–∞–ª–∫–æ–≥–æ–ª—è'
                : type === 'social'
                  ? '—Å–æ—Ü—Å–µ—Ç–µ–π'
                  : type === 'gaming'
                    ? '–∏–≥—Ä'
                    : type === 'shopping'
                      ? '–ø–æ–∫—É–ø–æ–∫'
                      : '—Å–ª–∞–¥–∫–æ–≥–æ';

          await ctx.replyWithMarkdown(`
üí™ *–ú–æ–ª–æ–¥–µ—Ü! –¢—ã –¥–µ—Ä–∂–∏—à—å—Å—è!*

üî• **–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ –¥–Ω—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç ${dependencyName}**

‚ú® –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –ö–∞–∂–¥—ã–π —á–∞—Å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ.

üåü –ü–æ–º–Ω–∏: —Ç—ã —É–∂–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! üöÄ
          `);

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Å–ø–µ—Ö–∞
          try {
            await this.prisma.dependencySupport.updateMany({
              where: {
                userId: ctx.userId,
                type: type.toUpperCase() as any,
              },
              data: {
                keptPromises: { increment: 1 },
              },
            });
          } catch (error) {
            this.logger.error('Error updating success stats:', error);
          }
        });
      },
    );

    // Morning fail handlers (–°–¥–∞–ª—Å—è)
    ['smoking', 'alcohol', 'social', 'gaming', 'shopping', 'sweets'].forEach(
      (type) => {
        this.bot.action(`morning_fail_${type}`, async (ctx) => {
          await ctx.answerCbQuery();

          const dependencyName =
            type === 'smoking'
              ? '–∫—É—Ä–µ–Ω–∏—è'
              : type === 'alcohol'
                ? '–∞–ª–∫–æ–≥–æ–ª—è'
                : type === 'social'
                  ? '—Å–æ—Ü—Å–µ—Ç–µ–π'
                  : type === 'gaming'
                    ? '–∏–≥—Ä'
                    : type === 'shopping'
                      ? '–ø–æ–∫—É–ø–æ–∫'
                      : '—Å–ª–∞–¥–∫–æ–≥–æ';

          await ctx.reply(
            `
üíî *–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, —ç—Ç–æ —Å–ª—É—á–∞–µ—Ç—Å—è*

üå± **–ö–∞–∂–¥—ã–π —Å—Ä—ã–≤ - —ç—Ç–æ —É—Ä–æ–∫, –∞ –Ω–µ –∫–æ–Ω–µ—Ü –ø—É—Ç–∏**

üí™ –ü–æ–º–Ω–∏: –≤–∞–∂–Ω–æ –Ω–µ —Ç–æ, —á—Ç–æ —Ç—ã —É–ø–∞–ª, –∞ —Ç–æ, —á—Ç–æ —Ç—ã –≤—Å—Ç–∞–µ—à—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—à—å –±–æ—Ä–æ—Ç—å—Å—è.

üîÑ **–ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å, –Ω–æ–≤—ã–π —à–∞–Ω—Å!**

üìû –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ! üåÖ
          `,
            {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: '‚¨ÖÔ∏è –ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º',
                      callback_data: 'dependencies',
                    },
                    { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' },
                  ],
                ],
              },
            },
          );

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ—É–¥–∞—á
          try {
            await this.prisma.dependencySupport.updateMany({
              where: {
                userId: ctx.userId,
                type: type.toUpperCase() as any,
              },
              data: {
                daysClean: 0, // –û–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —á–∏—Å—Ç—ã—Ö –¥–Ω–µ–π
              },
            });
          } catch (error) {
            this.logger.error('Error updating fail stats:', error);
          }
        });
      },
    );

    // Evening check handlers
    ['smoking', 'alcohol', 'social', 'gaming', 'shopping', 'sweets'].forEach(
      (type) => {
        this.bot.action(`evening_holding_${type}`, async (ctx) => {
          await ctx.answerCbQuery();

          const dependencyName =
            type === 'smoking'
              ? '–∫—É—Ä–µ–Ω–∏—è'
              : type === 'alcohol'
                ? '–∞–ª–∫–æ–≥–æ–ª—è'
                : type === 'social'
                  ? '—Å–æ—Ü—Å–µ—Ç–µ–π'
                  : type === 'gaming'
                    ? '–∏–≥—Ä'
                    : type === 'shopping'
                      ? '–ø–æ–∫—É–ø–æ–∫'
                      : '—Å–ª–∞–¥–∫–æ–≥–æ';

          await ctx.replyWithMarkdown(`
üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –¥–µ—Ä–∂–∏—à—å—Å—è!* 

üí™ –ï—â–µ –æ–¥–∏–Ω –¥–µ–Ω—å –ø–æ–±–µ–¥—ã –Ω–∞–¥ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç ${dependencyName}! 

üèÜ **–¢—ã –¥–æ–∫–∞–∑–∞–ª —Å–µ–±–µ, —á—Ç–æ –º–æ–∂–µ—à—å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å!**

‚ú® –ö–∞–∂–¥—ã–π —Ç–∞–∫–æ–π –¥–µ–Ω—å –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!

üåü –î–æ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º! –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, —á–µ–º–ø–∏–æ–Ω! üåô
        `);
        });

        this.bot.action(`evening_failed_${type}`, async (ctx) => {
          await ctx.answerCbQuery();

          const dependencyName =
            type === 'smoking'
              ? '–∫—É—Ä–µ–Ω–∏—è'
              : type === 'alcohol'
                ? '–∞–ª–∫–æ–≥–æ–ª—è'
                : type === 'social'
                  ? '—Å–æ—Ü—Å–µ—Ç–µ–π'
                  : type === 'gaming'
                    ? '–∏–≥—Ä'
                    : type === 'shopping'
                      ? '–ø–æ–∫—É–ø–æ–∫'
                      : '—Å–ª–∞–¥–∫–æ–≥–æ';

          await ctx.replyWithMarkdown(`
üíô *–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –Ω–µ —Å–¥–∞–≤–∞–π—Å—è!*

ü§ó –°—Ä—ã–≤—ã —Å–ª—É—á–∞—é—Ç—Å—è - —ç—Ç–æ —á–∞—Å—Ç—å –ø—É—Ç–∏ –∫ —Å–≤–æ–±–æ–¥–µ –æ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç ${dependencyName}.

üí™ **–ì–ª–∞–≤–Ω–æ–µ –Ω–µ —Ç–æ, —á—Ç–æ —Ç—ã —É–ø–∞–ª, –∞ —Ç–æ, —á—Ç–æ —Ç—ã –ø–æ–¥–Ω–∏–º–∞–µ—à—å—Å—è!**

üåÖ –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å —Å–∏–ª—å–Ω–µ–µ.

‚ú® –Ø –≤–µ—Ä—é –≤ —Ç–µ–±—è! –¢—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞–≤–∏—à—å—Å—è!

üíö –ü–æ–º–Ω–∏: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±–æ—Ä—å–±—ã - —ç—Ç–æ —É–∂–µ –ø–æ–±–µ–¥–∞! –î–æ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º! üåô
        `);
        });
      },
    );

    // Pomodoro Focus handler
    this.bot.action('pomodoro_focus', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showPomodoroMenu(ctx);
    });

    // Pomodoro session handlers
    this.bot.action('start_pomodoro_session', async (ctx) => {
      await ctx.answerCbQuery();

      const user = await this.getOrCreateUser(ctx);

      // Check if user needs to provide timezone first
      if (!user.timezone) {
        await this.askForTimezone(ctx);
        return;
      }

      const startTime = new Date();
      const endTime = new Date(startTime.getTime() + 25 * 60 * 1000);

      // Format time according to user's timezone
      const endTimeFormatted = this.formatTimeWithTimezone(
        endTime,
        user.timezone,
      );

      await ctx.editMessageTextWithMarkdown(
        `üçÖ *–°–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞ –∑–∞–ø—É—â–µ–Ω–∞!*

‚è∞ **–¢–∞–π–º–µ—Ä**: 25 –º–∏–Ω—É—Ç (–¥–æ ${endTimeFormatted})
üéØ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ
üì± –£–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
üí™ –†–∞–±–æ—Ç–∞–π—Ç–µ –¥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

üîî **–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 25 –º–∏–Ω—É—Ç**

*–£–¥–∞—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã! üí™*`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '‚è∏Ô∏è –ü–∞—É–∑–∞',
                  callback_data: 'pause_pomodoro',
                },
                {
                  text: '‚èπÔ∏è –°—Ç–æ–ø',
                  callback_data: 'stop_pomodoro',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
            ],
          },
        },
      );

      // Clear any existing session for this user
      const existingSession = this.activePomodoroSessions.get(ctx.userId);
      if (existingSession) {
        if (existingSession.focusTimer)
          clearTimeout(existingSession.focusTimer);
        if (existingSession.breakTimer)
          clearTimeout(existingSession.breakTimer);
      }

      // Start new 25-minute focus timer
      const focusTimer = setTimeout(
        async () => {
          try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ñ–æ–∫—É—Å–∞
            await ctx.telegram.sendMessage(
              ctx.userId,
              `üîî *–í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å!*

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–ª–∏ 25 –º–∏–Ω—É—Ç.

‚òï –í—Ä–µ–º—è –¥–ª—è 5-–º–∏–Ω—É—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞:
‚Ä¢ –í—Å—Ç–∞–Ω—å—Ç–µ –∏ —Ä–∞–∑–æ–º–Ω–∏—Ç–µ—Å—å
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –æ–∫–Ω–æ
‚Ä¢ –í—ã–ø–µ–π—Ç–µ –≤–æ–¥—ã
‚Ä¢ –ù–µ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–æ—Ü—Å–µ—Ç–∏!

‚è∞ –ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.`,
              {
                parse_mode: 'Markdown',
                disable_notification: false, // –í–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
              },
            );

            // Start 5-minute break timer
            const breakTimer = setTimeout(
              async () => {
                try {
                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–µ—Ä–µ—Ä—ã–≤–∞
                  await ctx.telegram.sendMessage(
                    ctx.userId,
                    `‚è∞ *–ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!*

üçÖ 5-–º–∏–Ω—É—Ç–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω. –ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏ —Ñ–æ–∫—É—Å–∞?

üí™ –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª:
‚Ä¢ 25 –º–∏–Ω—É—Ç —Ñ–æ–∫—É—Å–∞
‚Ä¢ 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞  
‚Ä¢ –ü–æ—Å–ª–µ 4 —Ü–∏–∫–ª–æ–≤ - –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ 15-30 –º–∏–Ω—É—Ç

üéØ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`,
                    {
                      parse_mode: 'Markdown',
                      disable_notification: false, // –í–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                      reply_markup: {
                        inline_keyboard: [
                          [
                            {
                              text: 'üöÄ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é',
                              callback_data: 'start_pomodoro_session',
                            },
                          ],
                          [
                            {
                              text: 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
                              callback_data: 'pomodoro_history',
                            },
                          ],
                          [
                            {
                              text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                              callback_data: 'pomodoro_focus',
                            },
                          ],
                        ],
                      },
                    },
                  );

                  // Remove session from active sessions after break completes
                  this.activePomodoroSessions.delete(ctx.userId);
                } catch (error) {
                  console.log(
                    'Failed to send break completion message:',
                    error,
                  );
                }
              },
              5 * 60 * 1000,
            ); // 5 minutes break

            // Update session with break timer
            const session = this.activePomodoroSessions.get(ctx.userId);
            if (session) {
              session.breakTimer = breakTimer;
            }
          } catch (error) {
            console.log('Failed to send pomodoro completion message:', error);
          }
        },
        25 * 60 * 1000,
      ); // 25 minutes = 1500000 milliseconds

      // Save the session with timers
      this.activePomodoroSessions.set(ctx.userId, {
        focusTimer,
        startTime,
      });
    });

    // Pomodoro break handler
    this.bot.action('start_pomodoro_break', async (ctx) => {
      await ctx.answerCbQuery();

      try {
        // Start 5-minute break timer
        await ctx.telegram.sendMessage(
          ctx.userId,
          `‚òï *–í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞*

üéâ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
‚è∞ –ò–¥–µ—Ç 5-–º–∏–Ω—É—Ç–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤
üí™ –†–∞–∑–æ–º–Ω–∏—Ç–µ—Å—å –∏ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ

*–ü–µ—Ä–µ—Ä—ã–≤ —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è*`,
          {
            parse_mode: 'Markdown',
            disable_notification: false, // –í–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          },
        );

        const breakTimer = setTimeout(
          async () => {
            try {
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–µ—Ä–µ—Ä—ã–≤–∞
              await ctx.telegram.sendMessage(
                ctx.userId,
                `‚è∞ *–ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!*

üçÖ 5-–º–∏–Ω—É—Ç–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω. –ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–∏ —Ñ–æ–∫—É—Å–∞?

üí™ –°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª:
‚Ä¢ 25 –º–∏–Ω—É—Ç —Ñ–æ–∫—É—Å–∞
‚Ä¢ 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞  
‚Ä¢ –ü–æ—Å–ª–µ 4 —Ü–∏–∫–ª–æ–≤ - –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ 15-30 –º–∏–Ω—É—Ç

üéØ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`,
                {
                  parse_mode: 'Markdown',
                  disable_notification: false, // –í–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                  reply_markup: {
                    inline_keyboard: [
                      [
                        {
                          text: 'üöÄ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é',
                          callback_data: 'start_pomodoro_session',
                        },
                      ],
                      [
                        {
                          text: 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
                          callback_data: 'pomodoro_history',
                        },
                      ],
                      [
                        {
                          text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                          callback_data: 'pomodoro_focus',
                        },
                      ],
                    ],
                  },
                },
              );

              // Remove session from active sessions after break completes
              this.activePomodoroSessions.delete(ctx.userId);
            } catch (error) {
              console.log('Failed to send break completion message:', error);
            }
          },
          5 * 60 * 1000, // 5 minutes break
        );

        // Update session with break timer
        const session = this.activePomodoroSessions.get(ctx.userId);
        if (session) {
          session.breakTimer = breakTimer;
        } else {
          // Create new session if none exists
          this.activePomodoroSessions.set(ctx.userId, {
            breakTimer,
            startTime: new Date(),
          });
        }
      } catch (error) {
        console.log('Failed to start break timer:', error);
        await ctx.replyWithMarkdown('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–µ—Ä–µ—Ä—ã–≤–∞');
      }
    });

    this.bot.action('pause_pomodoro', async (ctx) => {
      await ctx.answerCbQuery();

      const session = this.activePomodoroSessions.get(ctx.userId);
      if (session) {
        // Stop the current timer
        if (session.focusTimer) {
          clearTimeout(session.focusTimer);
          session.focusTimer = undefined;
        }

        // Save pause time
        session.pausedAt = new Date();

        // Calculate remaining time (taking into account previous pauses)
        const totalElapsed =
          new Date().getTime() -
          session.startTime.getTime() -
          (session.totalPausedTime || 0);
        const elapsed = Math.floor(totalElapsed / (1000 * 60));
        const remaining = Math.max(0, 25 - elapsed);
        const remainingMinutes = remaining;
        const remainingSeconds = Math.max(
          0,
          Math.floor((25 * 60 * 1000 - totalElapsed) / 1000) % 60,
        );

        await ctx.editMessageTextWithMarkdown(
          `
‚è∏Ô∏è *–°–µ—Å—Å–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞*

‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: ${remainingMinutes}:${remainingSeconds.toString().padStart(2, '0')}
‚ö° –ü—Ä–æ—à–ª–æ: ${elapsed} –º–∏–Ω
üéØ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ

*–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?*
          `,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                    callback_data: 'resume_pomodoro',
                  },
                  {
                    text: '‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å',
                    callback_data: 'stop_pomodoro',
                  },
                ],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
              ],
            },
          },
        );
      } else {
        await ctx.editMessageTextWithMarkdown(
          `‚ö†Ô∏è *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏*

–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–∞—É–∑—ã.`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üöÄ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é',
                    callback_data: 'start_pomodoro_session',
                  },
                ],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
              ],
            },
          },
        );
      }
    });

    this.bot.action('resume_pomodoro', async (ctx) => {
      await ctx.answerCbQuery();

      const session = this.activePomodoroSessions.get(ctx.userId);
      if (session) {
        // Update total paused time
        if (session.pausedAt) {
          const pauseDuration =
            new Date().getTime() - session.pausedAt.getTime();
          session.totalPausedTime =
            (session.totalPausedTime || 0) + pauseDuration;
          session.pausedAt = undefined;
        }

        // Calculate remaining time (accounting for all pauses)
        const totalElapsed =
          new Date().getTime() -
          session.startTime.getTime() -
          (session.totalPausedTime || 0);
        const elapsed = Math.floor(totalElapsed / (1000 * 60));
        const remaining = Math.max(0, 25 - elapsed);
        const remainingMinutes = remaining;
        const remainingSeconds = Math.max(
          0,
          Math.floor((25 * 60 * 1000 - totalElapsed) / 1000) % 60,
        );

        // Clear existing timer if any
        if (session.focusTimer) {
          clearTimeout(session.focusTimer);
        }

        // Restart timer with remaining time
        const remainingMs = Math.max(0, 25 * 60 * 1000 - totalElapsed);

        if (remainingMs > 0) {
          session.focusTimer = setTimeout(async () => {
            try {
              const currentSession = this.activePomodoroSessions.get(
                ctx.userId,
              );
              if (currentSession) {
                await ctx.telegram.sendMessage(
                  ctx.userId,
                  `üîî *–í—Ä–µ–º—è —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫–ª–æ!*

‚è∞ 25 –º–∏–Ω—É—Ç –ø—Ä–æ—à–ª–∏
üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏!

*–ß—Ç–æ –¥–∞–ª—å—à–µ?*

‚úÖ –í—Ä–µ–º—è –¥–ª—è 5-–º–∏–Ω—É—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞
üçÖ –ò–ª–∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é`,
                  {
                    parse_mode: 'Markdown',
                    disable_notification: false, // –í–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    reply_markup: {
                      inline_keyboard: [
                        [
                          {
                            text: '‚òï –ü–µ—Ä–µ—Ä—ã–≤ (5 –º–∏–Ω)',
                            callback_data: 'start_pomodoro_break',
                          },
                        ],
                        [
                          {
                            text: 'üçÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è',
                            callback_data: 'start_pomodoro_session',
                          },
                          {
                            text: 'üìä –ò—Å—Ç–æ—Ä–∏—è',
                            callback_data: 'pomodoro_history',
                          },
                        ],
                        [
                          {
                            text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                            callback_data: 'start',
                          },
                        ],
                      ],
                    },
                  },
                );
                this.activePomodoroSessions.delete(ctx.userId);
              }
            } catch (error) {
              console.log('Failed to send pomodoro completion message:', error);
            }
          }, remainingMs);
        }

        await ctx.editMessageTextWithMarkdown(
          `‚ñ∂Ô∏è *–°–µ—Å—Å–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞*

‚è∞ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å ${remainingMinutes}:${remainingSeconds.toString().padStart(2, '0')}
üéØ –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –∑–∞–¥–∞—á–µ!`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '‚è∏Ô∏è –ü–∞—É–∑–∞',
                    callback_data: 'pause_pomodoro',
                  },
                  {
                    text: '‚èπÔ∏è –°—Ç–æ–ø',
                    callback_data: 'stop_pomodoro',
                  },
                ],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
              ],
            },
          },
        );
      }
    });

    this.bot.action('stop_pomodoro', async (ctx) => {
      await ctx.answerCbQuery();

      // Stop any active timers for this user
      const session = this.activePomodoroSessions.get(ctx.userId);
      if (session) {
        if (session.focusTimer) clearTimeout(session.focusTimer);
        if (session.breakTimer) clearTimeout(session.breakTimer);

        // Calculate elapsed time
        const elapsed = Math.floor(
          (new Date().getTime() - session.startTime.getTime()) / (1000 * 60),
        );
        const elapsedMinutes = elapsed % 60;
        const elapsedHours = Math.floor(elapsed / 60);
        const timeText =
          elapsedHours > 0
            ? `${elapsedHours}:${elapsedMinutes.toString().padStart(2, '0')}`
            : `${elapsedMinutes}:${(((new Date().getTime() - session.startTime.getTime()) % 60000) / 1000).toFixed(0).padStart(2, '0')}`;

        this.activePomodoroSessions.delete(ctx.userId);

        await ctx.editMessageTextWithMarkdown(
          `
‚èπÔ∏è *–°–µ—Å—Å–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞*

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${timeText} –∏–∑ 25:00
üìù –•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ —É—Å–ø–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?

*–°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:*
          `,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üìù –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å',
                    callback_data: 'log_pomodoro_progress',
                  },
                ],
                [
                  {
                    text: 'üçÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è',
                    callback_data: 'start_pomodoro_session',
                  },
                  {
                    text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                    callback_data: 'pomodoro_history',
                  },
                ],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
              ],
            },
          },
        );
      } else {
        // No active session
        await ctx.editMessageTextWithMarkdown(
          `
‚ö†Ô∏è *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏*

–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —Ñ–æ–∫—É—Å–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.

*–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é?*
          `,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üöÄ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é',
                    callback_data: 'start_pomodoro_session',
                  },
                ],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
              ],
            },
          },
        );
      }
    });

    this.bot.action('pomodoro_history', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        `
üìä *–ò—Å—Ç–æ—Ä–∏—è —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–π*

**–°–µ–≥–æ–¥–Ω—è (19.08.2025):**
üçÖ –°–µ—Å—Å–∏–π: 0
‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è: 0 –º–∏–Ω
üéØ –ó–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ: 0

**–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:**
üìÖ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: 0
üìà –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: 0
üèÜ –õ—É—á—à–∏–π –¥–µ–Ω—å: 0 —Å–µ—Å—Å–∏–π

**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üéØ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: 0
‚ö° –û–±—â–µ–µ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: 0 —á
üìö –°–∞–º–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞—è –Ω–µ–¥–µ–ª—è: 0 —Å–µ—Å—Å–∏–π

*–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è!*
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üìà –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞',
                  callback_data: 'pomodoro_chart',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
            ],
          },
        },
      );
    });

    this.bot.action('pomodoro_settings', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        `
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ü–æ–º–æ–¥–æ—Ä–æ*

**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚è±Ô∏è –í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: 25 –º–∏–Ω
‚òï –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤: 5 –º–∏–Ω
üèñÔ∏è –î–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤: 15 –º–∏–Ω
üî¢ –°–µ—Å—Å–∏–π –¥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞: 4

**–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
üîî –ó–≤—É–∫–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã: ‚úÖ
üì± Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ
‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö: ‚úÖ

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**
üéµ –§–æ–Ω–æ–≤—ã–µ –∑–≤—É–∫–∏: ‚ùå
üìä –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ‚úÖ
üéØ –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ —Å–µ—Å—Å–∏–µ–π: ‚ùå

*–§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!*
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è',
                  callback_data: 'change_pomodoro_time',
                },
              ],
              [
                {
                  text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                  callback_data: 'pomodoro_notifications',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
            ],
          },
        },
      );
    });

    // Additional Pomodoro handlers
    this.bot.action('log_pomodoro_progress', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        `
üìù *–ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å*

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:30 –∏–∑ 25:00
üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 38%

*–ß—Ç–æ –≤—ã —É—Å–ø–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?*
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üìö –ò–∑—É—á–µ–Ω–∏–µ',
                  callback_data: 'progress_studying',
                },
                {
                  text: 'üíª –†–∞–±–æ—Ç–∞',
                  callback_data: 'progress_work',
                },
              ],
              [
                {
                  text: 'üìù –ù–∞–ø–∏—Å–∞–Ω–∏–µ',
                  callback_data: 'progress_writing',
                },
                {
                  text: 'üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ',
                  callback_data: 'progress_creative',
                },
              ],
              [
                {
                  text: '‚úèÔ∏è –î—Ä—É–≥–æ–µ',
                  callback_data: 'progress_custom',
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_focus' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
            ],
          },
        },
      );
    });

    this.bot.action('pomodoro_chart', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        `üìà *–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞*

üöß *–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*

–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:
üìä –ì—Ä–∞—Ñ–∏–∫ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–π –ø–æ –¥–Ω—è–º
üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
üéØ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–¥–∞—á
‚è∞ –õ—É—á—à–∏–µ —á–∞—Å—ã –¥–ª—è —Ñ–æ–∫—É—Å–∞

üìß –í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø—É—Å–∫!`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_history' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
            ],
          },
        },
      );
    });

    this.bot.action('change_pomodoro_time', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        `
‚è±Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏*

**–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞:**
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '15 –º–∏–Ω', callback_data: 'set_focus_15' },
                { text: '25 –º–∏–Ω ‚úÖ', callback_data: 'set_focus_25' },
                { text: '30 –º–∏–Ω', callback_data: 'set_focus_30' },
              ],
              [
                { text: '45 –º–∏–Ω', callback_data: 'set_focus_45' },
                { text: '60 –º–∏–Ω', callback_data: 'set_focus_60' },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_settings' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
            ],
          },
        },
      );
    });

    this.bot.action('pomodoro_notifications', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        `
üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
üîä –ó–≤—É–∫–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã: ‚úÖ
üì± Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ
‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö: ‚úÖ
üéµ –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞: ‚ùå

*–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!*
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'pomodoro_settings' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
            ],
          },
        },
      );
    });

    // Handle AI tips for focus
    this.bot.action('focus_ai_tips', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showFocusAITips(ctx);
    });

    // Progress category handlers
    ['studying', 'work', 'writing', 'creative', 'custom'].forEach(
      (category) => {
        this.bot.action(`progress_${category}`, async (ctx) => {
          await ctx.answerCbQuery();
          await ctx.editMessageTextWithMarkdown(
            `
‚úÖ *–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!*

üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${
              category === 'studying'
                ? '–ò–∑—É—á–µ–Ω–∏–µ'
                : category === 'work'
                  ? '–†–∞–±–æ—Ç–∞'
                  : category === 'writing'
                    ? '–ù–∞–ø–∏—Å–∞–Ω–∏–µ'
                    : category === 'creative'
                      ? '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ'
                      : '–î—Ä—É–≥–æ–µ'
            }
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:30

üéØ +10 XP –∑–∞ —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—é!
üìà –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —É—á—Ç–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.
          `,
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: '‚¨ÖÔ∏è –ö —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–∏—é',
                      callback_data: 'pomodoro_focus',
                    },
                    { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' },
                  ],
                ],
              },
            },
          );
        });
      },
    );

    // Focus time setting handlers
    [15, 25, 30, 45, 60].forEach((minutes) => {
      this.bot.action(`set_focus_${minutes}`, async (ctx) => {
        await ctx.answerCbQuery();
        await ctx.editMessageTextWithMarkdown(
          `
‚è±Ô∏è *–í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–æ*

–ù–æ–≤–æ–µ –≤—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞: ${minutes} –º–∏–Ω—É—Ç
–í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞: ${minutes <= 25 ? 5 : 10} –º–∏–Ω—É—Ç

‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!
        `,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '‚¨ÖÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º',
                    callback_data: 'pomodoro_settings',
                  },
                  {
                    text: 'üçÖ –ö Pomodoro',
                    callback_data: 'pomodoro_focus',
                  },
                ],
                [
                  {
                    text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                    callback_data: 'start',
                  },
                ],
              ],
            },
          },
        );
      });
    });

    // Mood handlers
    ['excellent', 'good', 'neutral', 'sad', 'angry', 'anxious'].forEach(
      (mood) => {
        this.bot.action(`mood_${mood}`, async (ctx) => {
          await ctx.answerCbQuery();

          const moodEmoji = {
            excellent: 'üòÑ',
            good: 'üòä',
            neutral: 'üòê',
            sad: 'üòî',
            angry: 'üò§',
            anxious: 'üò∞',
          }[mood];

          const moodText = {
            excellent: '–æ—Ç–ª–∏—á–Ω–æ–µ',
            good: '—Ö–æ—Ä–æ—à–µ–µ',
            neutral: '–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ',
            sad: '–≥—Ä—É—Å—Ç–Ω–æ–µ',
            angry: '–∑–ª–æ–µ',
            anxious: '—Ç—Ä–µ–≤–æ–∂–Ω–æ–µ',
          }[mood];

          await ctx.editMessageTextWithMarkdown(
            `
${moodEmoji} *–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ!*

–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: **${moodText}**
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!

*–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –≤–∞—à–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.*
        `,
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: 'üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
                      callback_data: 'mood_stats',
                    },
                  ],
                  [
                    {
                      text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                      callback_data: 'back_to_menu',
                    },
                  ],
                ],
              },
            },
          );
        });
      },
    );

    // Handle AI analysis for mood
    this.bot.action('mood_ai_analysis', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showMoodAIAnalysis(ctx);
    });

    this.bot.action('mood_stats', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        `
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è*

**–°–µ–≥–æ–¥–Ω—è:** üòä (—Ö–æ—Ä–æ—à–µ–µ)
**–ó–∞ –Ω–µ–¥–µ–ª—é:** –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ 7/10
**–ó–∞ –º–µ—Å—è—Ü:** –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ 6.5/10

**–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:**
üòä –•–æ—Ä–æ—à–µ–µ - 45%
üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ - 30% 
üòÑ –û—Ç–ª–∏—á–Ω–æ–µ - 25%

üìà *–§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!*
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é', callback_data: 'menu_mood' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });

    this.bot.action('faq_support', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        `
‚ùì *FAQ ‚Äî –ß–ê–°–¢–û –ó–ê–î–ê–í–ê–ï–ú–´–ï –í–û–ü–†–û–°–´*

1. **–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É?**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É/–ø—Ä–∏–≤—ã—á–∫—É¬ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç: ¬´–ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞ –≤ 17:00 –∑–∞–π—Ç–∏ –Ω–∞ –ø–æ—á—Ç—É¬ª –∏ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –í–∞–º —ç—Ç—É –∑–∞–¥–∞—á—É.

2. **–ß—Ç–æ —Ç–∞–∫–æ–µ XP –∏ —É—Ä–æ–≤–µ–Ω—å?**
XP (–æ–ø—ã—Ç) –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á. –° –∫–∞–∂–¥—ã–º —É—Ä–æ–≤–Ω–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏ –∏ –±–æ–Ω—É—Å—ã.

3. **–ß—Ç–æ –∑–Ω–∞—á–∏—Ç ¬´–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ¬ª?**
–ë–æ—Ç —É–º–µ–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –∫–æ—Ç–æ—Ä—É—é –í—ã –∑–∞–ø–∏—Å–∞–ª–∏ (—Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/–ø—Ä–∏–≤—ã—á–∫—É).

4. **–ß—Ç–æ –∑–Ω–∞—á–∏—Ç —Ñ—É–Ω–∫—Ü–∏—è –ò–ò ‚Äì –ü–æ–º–æ—â–Ω–∏–∫?**
–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏, –ø—Ä–∏–≤—ã—á–∫–∏, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä, –ø—Å–∏—Ö–æ–ª–æ–≥, –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, –∫–æ–ª–ª–µ–≥–∞ –∏ –¥—Ä—É–≥ –≤ –æ–¥–Ω–æ–º –ª–∏—Ü–µ.

5. **–ö–∞–∫ –æ—Ç–∫–ª—é—á–∏—Ç—å/–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è?**
–í –º–µ–Ω—é "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å, –æ—Ç–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.

6. **–ö—Ç–æ –≤–∏–¥–∏—Ç –º–æ–∏ –∑–∞–¥–∞—á–∏?**
–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –≤–∏–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –≤—ã. –ú–æ–∂–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é.

7. **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ–ª–ª–µ–Ω–¥–∂?**
–≠—Ç–æ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –≤—Ä–µ–º—è ‚Äî –∑–∞ —É—á–∞—Å—Ç–∏–µ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ XP –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.

8. **–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç?**
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram. –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–ø–∏—à–∏—Ç–µ –≤ "FAQ / –ü–æ–¥–¥–µ—Ä–∂–∫–∞".

9. **–ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?**
–í –∫–æ–Ω—Ü–µ –ª—é–±–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ FAQ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å".

10. **–ö–∞–∫ –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ª—é–±–∏–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏?**
–í–≤–µ–¥–∏—Ç–µ "/" ‚Äî –ø–æ—è–≤–∏—Ç—Å—è –±—ã—Å—Ç—Ä—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏ —Ñ—É–Ω–∫—Ü–∏–π.

11. **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞?**
–í—ã –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ—Ç–µ —Å—Å—ã–ª–∫—É –≤ –º–µ–Ω—é ¬´–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞¬ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –¥—Ä—É–≥—É. –° —Ç–æ–≥–æ –∫—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –Ω–µ–π –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É –í—ã –±—É–¥–µ—Ç–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –ø–æ 40% —Å –µ–≥–æ –æ–ø–ª–∞—Ç!

12. **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–≤—Å–µ–≥–¥–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ 5 –¥—Ä—É–∑–µ–π –∫ –±–æ—Ç—É?**
–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –∏ –∫–æ–≥–¥–∞ –í—ã –Ω–∞–±–µ—Ä–µ—Ç–µ 5 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –í–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø—Ä–µ–º–∏—É–º –≤–µ—Ä—Å–∏—é –Ω–∞–≤—Å–µ–≥–¥–∞!

*–ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç–∞ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º!*
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data: 'ask_question' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });

    this.bot.action('ask_question', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        `
üìù *–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–µ*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏ –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

–ú–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /feedback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ FAQ', callback_data: 'faq_support' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });

    this.bot.action('add_habit_direct', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        'üîÑ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
      );
    });

    this.bot.action('back_to_menu', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showMainMenu(ctx, true);
    });

    // Handle "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" button clicks
    this.bot.action('start', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showMainMenu(ctx, true);
    });

    this.bot.action('back_to_commands', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showMainMenu(ctx, true);
    });

    this.bot.action('commands_menu', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showMainMenu(ctx, true);
    });

    // Voice command handlers
    this.bot.action(/^create_task_from_voice:(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const taskName = ctx.match[1];
      await this.createTaskFromVoice(ctx, taskName);
    });

    this.bot.action(/^create_habit_from_voice:(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const habitName = ctx.match[1];
      await this.createHabitFromVoice(ctx, habitName);
    });

    // New handlers for voice text stored in session
    this.bot.action('create_task_from_voice_text', async (ctx) => {
      await ctx.answerCbQuery();
      const voiceText = ctx.session.tempData?.voiceText;
      if (voiceText) {
        await this.createTaskFromText(ctx, voiceText);
      } else {
        await ctx.reply(
          '‚ùå –¢–µ–∫—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        );
      }
    });

    this.bot.action('create_habit_from_voice_text', async (ctx) => {
      await ctx.answerCbQuery();
      const voiceText = ctx.session.tempData?.voiceText;
      if (voiceText) {
        const habitName = this.extractHabitName(voiceText);
        await this.createHabitFromVoice(ctx, habitName);
      } else {
        await ctx.reply(
          '‚ùå –¢–µ–∫—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        );
      }
    });

    this.bot.action('create_reminder_from_voice_text', async (ctx) => {
      await ctx.answerCbQuery();
      const voiceText = ctx.session.tempData?.voiceText;
      if (voiceText) {
        await this.processReminderFromText(ctx, voiceText);
      } else {
        await ctx.reply(
          '‚ùå –¢–µ–∫—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        );
      }
    });

    this.bot.action('ai_chat_from_voice_text', async (ctx) => {
      await ctx.answerCbQuery();
      const voiceText = ctx.session.tempData?.voiceText;
      if (voiceText) {
        ctx.session.aiChatMode = true;
        await this.handleAIChatMessage(ctx, voiceText);
      } else {
        await ctx.reply(
          '‚ùå –¢–µ–∫—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        );
      }
    });

    this.bot.action(/^create_reminder_from_voice:(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const reminderText = decodeURIComponent(ctx.match[1]);

      await ctx.editMessageTextWithMarkdown(
        `‚è∞ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –≥–æ–ª–æ—Å–∞*

–¢–µ–∫—Å—Ç: "${reminderText}"

üí° **–ö–∞–∫ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è:**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "${reminderText} –≤ 17:30"
‚Ä¢ "${reminderText} —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"
‚Ä¢ "${reminderText} –∑–∞–≤—Ç—Ä–∞ –≤ 14:00"

–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üìù –ù–∞–ø–∏—Å–∞—Ç—å –≤—Ä–µ–º—è',
                  callback_data: 'create_reminder_help',
                },
                { text: 'ÔøΩ –ì–æ–ª–æ—Å–æ–º', callback_data: 'voice_reminder_help' },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });

    this.bot.action(/^ai_chat_from_voice:(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const text = ctx.match[1];
      await this.handleAIChatMessage(ctx, text);
    });

    // AI Chat handlers
    this.bot.action('ai_analyze_profile', async (ctx) => {
      await this.handleAIAnalyzeProfile(ctx);
    });

    this.bot.action('ai_task_recommendations', async (ctx) => {
      await this.handleAITaskRecommendations(ctx);
    });

    this.bot.action('ai_time_planning', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        `
‚è∞ *–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏*

–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏.
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
            ],
          },
        },
      );
    });

    this.bot.action('ai_custom_question', async (ctx) => {
      await this.handleAICustomQuestion(ctx);
    });

    this.bot.action('ai_back_menu', async (ctx) => {
      await ctx.answerCbQuery();
      await this.startAIChat(ctx);
    });

    // AI specialized handlers
    this.bot.action('ai_analyze_profile', async (ctx) => {
      await ctx.answerCbQuery();
      await this.handleAIAnalyzeProfile(ctx);
    });

    this.bot.action('ai_task_recommendations', async (ctx) => {
      await ctx.answerCbQuery();
      await this.handleAITaskRecommendations(ctx);
    });

    this.bot.action('ai_habit_help', async (ctx) => {
      await ctx.answerCbQuery();
      await this.handleAIHabitHelp(ctx);
    });

    this.bot.action('ai_time_planning', async (ctx) => {
      await ctx.answerCbQuery();
      await this.handleAITimePlanning(ctx);
    });

    this.bot.action('ai_custom_question', async (ctx) => {
      await ctx.answerCbQuery();
      await this.handleAICustomQuestion(ctx);
    });

    // Handle AI habit creation
    this.bot.action('ai_create_habit', async (ctx) => {
      await ctx.answerCbQuery();
      await this.handleAICreateHabit(ctx);
    });

    // Task management handlers
    this.bot.action('tasks_add', async (ctx) => {
      await ctx.answerCbQuery();
      await this.startAddingTask(ctx);
    });

    this.bot.action('tasks_list', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showTasksList(ctx);
    });

    this.bot.action('tasks_list_more', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showAllTasksList(ctx);
    });

    this.bot.action('tasks_today', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showTodayTasks(ctx);
    });

    this.bot.action('tasks_completed', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showCompletedTasks(ctx);
    });

    // Handle AI advice for tasks
    this.bot.action('tasks_ai_advice', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showTasksAIAdvice(ctx);
    });

    // Handle task completion
    this.bot.action(/^task_complete_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const taskId = ctx.match[1];
      await this.completeTask(ctx, taskId);
    });

    // Handle task status toggle (complete/uncomplete)
    this.bot.action(/^toggle_task_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const taskId = ctx.match[1];
      try {
        // –ù–∞–π–¥–µ–º –∑–∞–¥–∞—á—É –∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–º –µ—ë —Å—Ç–∞—Ç—É—Å
        const task = await this.taskService.findTaskById(taskId, ctx.userId);
        if (task && task.userId === ctx.userId) {
          if (task.status === 'COMPLETED') {
            // –î–µ–ª–∞–µ–º –∑–∞–¥–∞—á—É –∞–∫—Ç–∏–≤–Ω–æ–π
            await this.taskService.updateTask(taskId, ctx.userId, {
              status: 'PENDING',
              completedAt: null,
            } as any);
            await ctx.answerCbQuery('–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–∞—è!');
          } else {
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
            await this.completeTask(ctx, taskId);
            return; // completeTask —É–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
          }
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
          await this.showAllTasksList(ctx);
        } else {
          await ctx.answerCbQuery('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
      } catch (error) {
        this.logger.error('Error toggling task status:', error);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏');
      }
    });

    // Handle task deletion (ask for confirmation)
    this.bot.action(/^task_delete_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const taskId = ctx.match[1];
      const keyboard = {
        inline_keyboard: [
          [
            {
              text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å',
              callback_data: `confirm_delete_task_${taskId}`,
            },
            {
              text: '‚ùå –û—Ç–º–µ–Ω–∞',
              callback_data: `cancel_delete_task_${taskId}`,
            },
          ],
        ],
      };
      await ctx.editMessageTextWithMarkdown(
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`,
        { reply_markup: keyboard },
      );
    });

    // Confirm delete
    this.bot.action(/^confirm_delete_task_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const taskId = ctx.match[1];
      try {
        await this.taskService.deleteTask(taskId, ctx.userId);
        await ctx.editMessageTextWithMarkdown('‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.');
        // Refresh tasks list after a short delay
        setTimeout(() => this.showTasksList(ctx), 500);
      } catch (error) {
        this.logger.error('Error deleting task:', error);
        await ctx.editMessageTextWithMarkdown(
          '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        );
      }
    });

    // Cancel delete
    this.bot.action(/^cancel_delete_task_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      // Return to tasks list
      await this.showTasksList(ctx);
    });

    // Handle back to tasks menu (redirect to tasks menu)
    this.bot.action('back_to_tasks', async (ctx) => {
      await ctx.answerCbQuery();
      // Redirect to main tasks menu instead of showing tasks list directly
      await this.showTasksMenu(ctx);
    });

    // No-op separator (for decorative rows) and view completed task
    this.bot.action('noop_separator', async (ctx) => {
      await ctx.answerCbQuery();
    });

    this.bot.action(/^task_view_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const taskId = ctx.match[1];
      try {
        const task = await this.taskService.findTaskById(taskId, ctx.userId);

        const statusEmoji = task.status === 'COMPLETED' ? '‚úÖ' : '‚è≥';
        const message =
          `${statusEmoji} *${task.title}*\n\n` +
          `üìä *–°—Ç–∞—Ç—É—Å:* ${task.status === 'COMPLETED' ? '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' : '–ê–∫—Ç–∏–≤–Ω–∞'}\n` +
          `üéØ *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${task.priority}\n` +
          `üíé *XP –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:* ${task.xpReward}\n` +
          (task.description ? `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${task.description}\n` : '') +
          (task.dueDate
            ? `üìÖ *–°—Ä–æ–∫:* ${new Date(task.dueDate).toLocaleDateString('ru-RU')}\n`
            : '') +
          (task.completedAt
            ? `‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–∞:* ${new Date(task.completedAt).toLocaleDateString('ru-RU')}\n`
            : '');

        const keyboard = {
          inline_keyboard: [
            task.status === 'COMPLETED'
              ? [
                  {
                    text: 'üîÅ –í–µ—Ä–Ω—É—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ',
                    callback_data: `task_reopen_${task.id}`,
                  },
                  {
                    text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
                    callback_data: `task_edit_options_${task.id}`,
                  },
                ]
              : [
                  {
                    text: '‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å',
                    callback_data: `toggle_task_${task.id}`,
                  },
                  {
                    text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
                    callback_data: `task_edit_options_${task.id}`,
                  },
                ],
            [{ text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data: `task_delete_${task.id}` }],
            [
              {
                text: '‚è∞ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
                callback_data: `add_task_reminder_${task.id}`,
              },
            ],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á', callback_data: 'tasks_list' }],
          ],
        };

        await ctx.editMessageTextWithMarkdown(message, {
          reply_markup: keyboard,
        });
      } catch (err) {
        this.logger.error('Error showing task view:', err);
        await ctx.editMessageTextWithMarkdown('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É');
      }
    });

    // Reopen a completed task
    this.bot.action(/^task_reopen_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const taskId = ctx.match[1];
      try {
        await this.taskService.updateTask(taskId, ctx.userId, {
          status: 'PENDING',
        } as any);
        await ctx.replyWithMarkdown('‚úÖ –ó–∞–¥–∞—á–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ.');
        await this.showTodayTasks(ctx);
      } catch (err) {
        this.logger.error('Error reopening task:', err);
        await ctx.replyWithMarkdown('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å –∑–∞–¥–∞—á—É.');
      }
    });

    // Start edit title flow (DEPRECATED - this handler is not used anymore)
    // this.bot.action(/^task_edit_title_direct_(.+)$/, async (ctx) => {
    //   await ctx.answerCbQuery();
    //   const taskId = ctx.match[1];
    //   // Set session to editing mode and ask for new title
    //   ctx.session.step = 'editing_task_title';
    //   ctx.session.pendingTaskTitle = taskId;
    //   await ctx.replyWithMarkdown('‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:');
    // });

    // Show task edit options
    this.bot.action(/^task_edit_options_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const taskId = ctx.match[1];

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –æ–ø—Ü–∏—è–º
      ctx.session.step = undefined;
      ctx.session.pendingTaskTitle = undefined;

      try {
        const task = await this.taskService.findTaskById(taskId, ctx.userId);

        const message =
          `‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏*\n\n` +
          `üìù *–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:* ${task.title}\n\n` +
          `–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:`;

        const keyboard = {
          inline_keyboard: [
            [
              {
                text: 'üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ',
                callback_data: `task_edit_title_${task.id}`,
              },
            ],
            [
              {
                text: 'üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
                callback_data: `task_edit_description_${task.id}`,
              },
            ],
            [
              {
                text: 'üéØ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
                callback_data: `task_edit_priority_${task.id}`,
              },
            ],
            [
              {
                text: '‚è∞ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
                callback_data: `add_task_reminder_${task.id}`,
              },
            ],
            [
              {
                text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É',
                callback_data: `task_delete_${task.id}`,
              },
            ],
            [
              {
                text: 'üîô –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–µ',
                callback_data: `task_view_${task.id}`,
              },
            ],
          ],
        };

        await ctx.editMessageTextWithMarkdown(message, {
          reply_markup: keyboard,
        });
      } catch (err) {
        this.logger.error('Error showing task edit options:', err);
        await ctx.editMessageTextWithMarkdown('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É');
      }
    });

    // Edit task title
    this.bot.action(/^task_edit_title_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const taskId = ctx.match[1];
      ctx.session.step = 'editing_task_title';
      ctx.session.pendingTaskTitle = taskId;
      await ctx.editMessageTextWithMarkdown(
        '‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:',
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é',
                  callback_data: `task_edit_options_${taskId}`,
                },
              ],
            ],
          },
        },
      );
    });

    // Edit task description
    this.bot.action(/^task_edit_description_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const taskId = ctx.match[1];
      ctx.session.step = 'editing_task_description';
      ctx.session.pendingTaskTitle = taskId; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
      await ctx.editMessageTextWithMarkdown(
        'üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "—É–¥–∞–ª–∏—Ç—å" —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ):',
      );
    });

    // Edit task priority
    this.bot.action(/^task_edit_priority_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const taskId = ctx.match[1];

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: 'üî¥ –í—ã—Å–æ–∫–∏–π',
              callback_data: `set_task_priority_${taskId}_HIGH`,
            },
            {
              text: '‚¨ú –°—Ä–µ–¥–Ω–∏–π',
              callback_data: `set_task_priority_${taskId}_MEDIUM`,
            },
          ],
          [
            {
              text: 'üü¢ –ù–∏–∑–∫–∏–π',
              callback_data: `set_task_priority_${taskId}_LOW`,
            },
            {
              text: 'üî• –°—Ä–æ—á–Ω—ã–π',
              callback_data: `set_task_priority_${taskId}_URGENT`,
            },
          ],
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: `task_edit_options_${taskId}` }],
        ],
      };

      await ctx.editMessageTextWithMarkdown(
        'üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:',
        {
          reply_markup: keyboard,
        },
      );
    });

    // Set task priority
    this.bot.action(/^set_task_priority_(.+)_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const taskId = ctx.match[1];
      const priority = ctx.match[2];

      try {
        await this.taskService.updateTask(taskId, ctx.userId, {
          priority: priority,
        } as any);

        const priorityText =
          priority === 'HIGH'
            ? 'üî¥ –í—ã—Å–æ–∫–∏–π'
            : priority === 'MEDIUM'
              ? '‚¨ú –°—Ä–µ–¥–Ω–∏–π'
              : priority === 'LOW'
                ? 'üü¢ –ù–∏–∑–∫–∏–π'
                : 'üî• –°—Ä–æ—á–Ω—ã–π';

        await ctx.editMessageTextWithMarkdown(
          `‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${priorityText}`,
        );

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É
        setTimeout(async () => {
          try {
            const task = await this.taskService.findTaskById(
              taskId,
              ctx.userId,
            );
            const statusEmoji = task.status === 'COMPLETED' ? '‚úÖ' : '‚è≥';
            const message =
              `${statusEmoji} *${task.title}*\n\n` +
              `üìä *–°—Ç–∞—Ç—É—Å:* ${task.status === 'COMPLETED' ? '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' : '–ê–∫—Ç–∏–≤–Ω–∞'}\n` +
              `üéØ *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${task.priority}\n` +
              `üíé *XP –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:* ${task.xpReward}\n` +
              (task.description ? `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${task.description}\n` : '') +
              (task.dueDate
                ? `üìÖ *–°—Ä–æ–∫:* ${new Date(task.dueDate).toLocaleDateString('ru-RU')}\n`
                : '') +
              (task.completedAt
                ? `‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–∞:* ${new Date(task.completedAt).toLocaleDateString('ru-RU')}\n`
                : '');

            const keyboard = {
              inline_keyboard: [
                task.status === 'COMPLETED'
                  ? [
                      {
                        text: 'ÔøΩ –í–µ—Ä–Ω—É—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ',
                        callback_data: `task_reopen_${task.id}`,
                      },
                      {
                        text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
                        callback_data: `task_edit_options_${task.id}`,
                      },
                    ]
                  : [
                      {
                        text: '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π',
                        callback_data: `toggle_task_${task.id}`,
                      },
                      {
                        text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
                        callback_data: `task_edit_options_${task.id}`,
                      },
                    ],
                [
                  {
                    text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å',
                    callback_data: `task_delete_${task.id}`,
                  },
                ],
                [
                  {
                    text: '‚è∞ –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
                    callback_data: `add_task_reminder_${task.id}`,
                  },
                ],
                [
                  {
                    text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á',
                    callback_data: 'tasks_list',
                  },
                ],
              ],
            };

            await ctx.editMessageTextWithMarkdown(message, {
              reply_markup: keyboard,
            });
          } catch (err) {
            this.logger.error('Error refreshing task view:', err);
          }
        }, 1500);
      } catch (err) {
        this.logger.error('Error updating task priority:', err);
        await ctx.editMessageTextWithMarkdown(
          '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏',
        );
      }
    });

    // Add task reminder
    this.bot.action(/^add_task_reminder_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const taskId = ctx.match[1];
      ctx.session.step = 'setting_task_reminder';
      ctx.session.tempData = { taskId }; // –ò—Å–ø–æ–ª—å–∑—É–µ–º tempData

      await ctx.editMessageTextWithMarkdown(
        `‚è∞ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏*

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
‚Ä¢ \`–ß–ß:–ú–ú\` - –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15:30)
‚Ä¢ \`–î–î.–ú–ú –ß–ß:–ú–ú\` - –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.09 10:00)

–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üìÖ –ß–µ—Ä–µ–∑ 1 —á–∞—Å',
                  callback_data: `quick_reminder_${taskId}_1h`,
                },
                {
                  text: 'üìÖ –ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞',
                  callback_data: `quick_reminder_${taskId}_3h`,
                },
              ],
              [
                {
                  text: 'üìÖ –ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º (9:00)',
                  callback_data: `quick_reminder_${taskId}_tomorrow`,
                },
                {
                  text: 'üìÖ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é',
                  callback_data: `quick_reminder_${taskId}_week`,
                },
              ],
              [
                {
                  text: 'üîô –ù–∞–∑–∞–¥',
                  callback_data: `task_edit_options_${taskId}`,
                },
              ],
            ],
          },
        },
      );
    });

    // Quick reminder handlers for tasks
    this.bot.action(/^quick_reminder_(.+)_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const taskId = ctx.match[1];
      const period = ctx.match[2];

      try {
        const task = await this.taskService.findTaskById(taskId, ctx.userId);
        let reminderTime: Date;
        let confirmMessage: string;

        const now = new Date();

        switch (period) {
          case '1h':
            reminderTime = new Date(now.getTime() + 60 * 60 * 1000);
            confirmMessage = `‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ*\n\nüìù ${task.title}\n‚è≥ –ß–µ—Ä–µ–∑ 1 —á–∞—Å\nüìÖ ${reminderTime.toLocaleString('ru-RU')}`;
            break;
          case '3h':
            reminderTime = new Date(now.getTime() + 3 * 60 * 60 * 1000);
            confirmMessage = `‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ*\n\nüìù ${task.title}\n‚è≥ –ß–µ—Ä–µ–∑ 3 —á–∞—Å–∞\nüìÖ ${reminderTime.toLocaleString('ru-RU')}`;
            break;
          case 'tomorrow':
            reminderTime = new Date(now);
            reminderTime.setDate(reminderTime.getDate() + 1);
            reminderTime.setHours(9, 0, 0, 0);
            confirmMessage = `‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ*\n\nüìù ${task.title}\n‚è≥ –ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º\nüìÖ ${reminderTime.toLocaleString('ru-RU')}`;
            break;
          case 'week':
            reminderTime = new Date(now);
            reminderTime.setDate(reminderTime.getDate() + 7);
            reminderTime.setHours(9, 0, 0, 0);
            confirmMessage = `‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ*\n\nüìù ${task.title}\n‚è≥ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é\nüìÖ ${reminderTime.toLocaleString('ru-RU')}`;
            break;
          default:
            throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è');
        }

        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await ctx.editMessageTextWithMarkdown(confirmMessage, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üîô –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é',
                  callback_data: `task_edit_options_${taskId}`,
                },
              ],
              [
                {
                  text: 'üìã –ö –∑–∞–¥–∞—á–µ',
                  callback_data: `task_view_${taskId}`,
                },
              ],
              [
                {
                  text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                  callback_data: 'back_to_menu',
                },
              ],
            ],
          },
        });
      } catch (error) {
        this.logger.error('Error setting task reminder:', error);
        await ctx.editMessageTextWithMarkdown(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üîô –ù–∞–∑–∞–¥',
                    callback_data: `task_edit_options_${taskId}`,
                  },
                ],
              ],
            },
          },
        );
      }
    });

    // Show tasks editing menu
    this.bot.action('edit_tasks_menu', async (ctx) => {
      await ctx.answerCbQuery();

      try {
        const user = await this.userService.findByTelegramId(ctx.userId);
        const allTasks = await this.taskService.findTasksByUserId(user.id);

        const pendingTasks = allTasks.filter(
          (task) => task.status !== 'COMPLETED',
        );
        const completedTasks = allTasks.filter(
          (task) => task.status === 'COMPLETED',
        );

        let message = '‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á*\n\n';
        message += '–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n';

        const rows: any[] = [];

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        if (pendingTasks.length > 0) {
          pendingTasks.slice(0, 20).forEach((task) => {
            rows.push([
              {
                text: `‚¨ú ${task.title.substring(0, 50)}${task.title.length > 50 ? '...' : ''}`,
                callback_data: `task_view_${task.id}`,
              },
            ]);
          });
        } else {
          rows.push([
            {
              text: 'üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
              callback_data: 'noop_separator',
            },
          ]);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (completedTasks.length > 0) {
          rows.push([
            {
              text: `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (${completedTasks.length})`,
              callback_data: 'edit_completed_tasks',
            },
          ]);
        }

        rows.push([
          { text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á', callback_data: 'tasks_list' },
        ]);

        const keyboard = { inline_keyboard: rows };

        await ctx.editMessageTextWithMarkdown(message, {
          reply_markup: keyboard,
        });
      } catch (err) {
        this.logger.error('Error showing edit tasks menu:', err);
        await ctx.editMessageTextWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á');
      }
    });

    // Show completed tasks for editing
    this.bot.action('edit_completed_tasks', async (ctx) => {
      await ctx.answerCbQuery();

      try {
        const user = await this.userService.findByTelegramId(ctx.userId);
        const allTasks = await this.taskService.findTasksByUserId(user.id);

        const completedTasks = allTasks.filter(
          (task) => task.status === 'COMPLETED',
        );

        let message = '‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏*\n\n';
        message += '–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n\n';

        const rows: any[] = [];

        if (completedTasks.length > 0) {
          completedTasks.slice(0, 15).forEach((task) => {
            rows.push([
              {
                text: `‚úÖ ${task.title.substring(0, 50)}${task.title.length > 50 ? '...' : ''}`,
                callback_data: `task_view_${task.id}`,
              },
            ]);
          });
        } else {
          rows.push([
            {
              text: 'üìù –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á',
              callback_data: 'noop_separator',
            },
          ]);
        }

        rows.push([
          { text: 'üîô –ö –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞–¥–∞—á–∞–º', callback_data: 'edit_tasks_menu' },
        ]);

        const keyboard = { inline_keyboard: rows };

        await ctx.editMessageTextWithMarkdown(message, {
          reply_markup: keyboard,
        });
      } catch (err) {
        this.logger.error('Error showing completed tasks for editing:', err);
        await ctx.editMessageTextWithMarkdown(
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á',
        );
      }
    });

    // Handle back to main menu
    this.bot.action('back_to_main', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showMainMenu(ctx);
    });

    // Feedback system action handlers

    this.bot.action(/^feedback_rating_(\d+)$/, async (ctx) => {
      const rating = parseInt(ctx.match[1]);
      await this.handleFeedbackRating(ctx, rating);
    });

    this.bot.action(/^feedback_like_(.+)$/, async (ctx) => {
      const feature = ctx.match[1];

      // For /feedback command, complete survey immediately
      if (!ctx.session.feedbackRating) {
        await this.completeFeedbackSurvey(ctx, feature);
      } else {
        // For automatic feedback request, show improvement options
        await this.handleFeedbackImprovement(ctx, feature);
      }
    });

    this.bot.action(/^feedback_improve_(.+)$/, async (ctx) => {
      const improvement = ctx.match[1];
      if (improvement === 'custom') {
        await ctx.answerCbQuery();
        await ctx.editMessageTextWithMarkdown(`
üìù *–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —É–ª—É—á—à–∏—Ç—å:*

–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è...
        `);
        ctx.session.step = 'waiting_for_custom_feedback';
      } else {
        // Check if this is from /feedback command (no rating) or automatic request (with rating)
        if (ctx.session.feedbackRating) {
          await this.completeFeedback(ctx, improvement);
        } else {
          await this.completeFeedbackSurvey(ctx, improvement);
        }
      }
    });

    this.bot.action('feedback_later', async (ctx) => {
      await ctx.answerCbQuery();

      // Mark feedback as given to prevent showing again
      await this.userService.updateUser(ctx.userId, {
        feedbackGiven: true,
      });

      await ctx.editMessageTextWithMarkdown(`
üïê *–•–æ—Ä–æ—à–æ, —Å–ø—Ä–æ—Å–∏–º –ø–æ–∑–∂–µ!*

–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∫–æ–º–∞–Ω–¥–æ–π /feedback
      `);
    });

    // Timezone setup handlers
    this.bot.action(/^confirm_timezone_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();
      const timezone = ctx.match[1];
      await this.confirmTimezone(ctx, timezone);
    });

    this.bot.action('manual_timezone', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showManualTimezoneSelection(ctx);
    });

    this.bot.action('input_city', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(`
üèôÔ∏è *–í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞*

üìç –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:
(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù—å—é-–ô–æ—Ä–∫, –õ–æ–Ω–¥–æ–Ω, –ê—Å—Ç–∞–Ω–∞)
      `);
      ctx.session.step = 'waiting_for_city';
    });

    this.bot.action('select_timezone', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showTimezoneList(ctx);
    });

    // Interval reminder handlers
    this.bot.action('stop_interval_reminder', async (ctx) => {
      await ctx.answerCbQuery();
      const stopped = this.stopIntervalReminder(ctx.userId);

      if (stopped) {
        await ctx.editMessageTextWithMarkdown(
          `
üõë *–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ*

–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.
        `,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      } else {
        await ctx.editMessageTextWithMarkdown(
          `
‚ùå *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*

–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
        `,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      }
    });

    this.bot.action('interval_status', async (ctx) => {
      await ctx.answerCbQuery();
      const reminder = this.activeIntervalReminders.get(ctx.userId);

      if (reminder) {
        const runningTime = Math.floor(
          (Date.now() - reminder.startTime.getTime()) / (1000 * 60),
        );
        const intervalText =
          reminder.intervalMinutes < 60
            ? `${reminder.intervalMinutes} –º–∏–Ω—É—Ç`
            : `${Math.floor(reminder.intervalMinutes / 60)} —á–∞—Å${reminder.intervalMinutes === 60 ? '' : '–∞'}`;

        await ctx.editMessageTextWithMarkdown(
          `
üìä *–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*

üìù **–¢–µ–∫—Å—Ç:** ${reminder.reminderText}
‚è±Ô∏è **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** –∫–∞–∂–¥—ã–µ ${intervalText}
üïê **–ó–∞–ø—É—â–µ–Ω–æ:** ${runningTime} –º–∏–Ω –Ω–∞–∑–∞–¥
üì¨ **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:** ${reminder.count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        `,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
                    callback_data: 'stop_interval_reminder',
                  },
                ],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      } else {
        await ctx.editMessageTextWithMarkdown(
          `
‚ùå *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*

–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
        `,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      }
    });

    // Reminder action handlers
    this.bot.action('reminder_done', async (ctx) => {
      await ctx.answerCbQuery('‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ!');
      await ctx.editMessageTextWithMarkdown(
        `‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!*\n\n–û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });

    // Handler for reminders with ID
    this.bot.action(/^reminder_done_(.+)$/, async (ctx) => {
      const reminderId = ctx.match[1];
      await ctx.answerCbQuery('‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ!');

      try {
        // Update reminder status in database
        await this.prisma.reminder.update({
          where: { id: reminderId },
          data: { status: ReminderStatus.COMPLETED },
        });
      } catch (error) {
        this.logger.error('Error updating reminder status:', error);
      }

      await ctx.editMessageTextWithMarkdown(
        `‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!*\n\n–û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });

    // Snooze handlers
    this.bot.action('reminder_snooze_15', async (ctx) => {
      await ctx.answerCbQuery('‚è∞ –ù–∞–ø–æ–º–Ω–∏–º —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç!');
      const originalMessage =
        (ctx.callbackQuery?.message as any)?.text || '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ';
      const reminderText = originalMessage
        .replace('üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*', '')
        .trim();

      // Schedule new reminder in 15 minutes
      setTimeout(
        async () => {
          try {
            await ctx.telegram.sendMessage(
              ctx.userId,
              `üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\n${reminderText}`,
              {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [
                      {
                        text: '‚úÖ –ì–æ—Ç–æ–≤–æ',
                        callback_data: 'reminder_done',
                      },
                    ],
                  ],
                },
              },
            );
          } catch (error) {
            this.logger.error('Error sending snoozed reminder:', error);
          }
        },
        15 * 60 * 1000,
      );

      await ctx.editMessageTextWithMarkdown(
        `‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ*\n\n–ù–∞–ø–æ–º–Ω–∏–º —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç!`,
      );
    });

    this.bot.action('reminder_snooze_60', async (ctx) => {
      await ctx.answerCbQuery('‚è∞ –ù–∞–ø–æ–º–Ω–∏–º —á–µ—Ä–µ–∑ —á–∞—Å!');
      const originalMessage =
        (ctx.callbackQuery?.message as any)?.text || '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ';
      const reminderText = originalMessage
        .replace('üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*', '')
        .trim();

      // Schedule new reminder in 1 hour
      setTimeout(
        async () => {
          try {
            await ctx.telegram.sendMessage(
              ctx.userId,
              `üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\n${reminderText}`,
              {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [
                      {
                        text: '‚úÖ –ì–æ—Ç–æ–≤–æ',
                        callback_data: 'reminder_done',
                      },
                    ],
                  ],
                },
              },
            );
          } catch (error) {
            this.logger.error('Error sending snoozed reminder:', error);
          }
        },
        60 * 60 * 1000,
      );

      await ctx.editMessageTextWithMarkdown(
        `‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ*\n\n–ù–∞–ø–æ–º–Ω–∏–º —á–µ—Ä–µ–∑ —á–∞—Å!`,
      );
    });

    // Snooze handlers with reminder ID
    this.bot.action(/^reminder_snooze_15_(.+)$/, async (ctx) => {
      const reminderId = ctx.match[1];
      await ctx.answerCbQuery('‚è∞ –ù–∞–ø–æ–º–Ω–∏–º —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç!');
      const originalMessage =
        (ctx.callbackQuery?.message as any)?.text || '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ';
      const reminderText = originalMessage
        .replace('üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*', '')
        .trim();

      // Schedule new reminder in 15 minutes
      setTimeout(
        async () => {
          try {
            await ctx.telegram.sendMessage(
              ctx.userId,
              `üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\n${reminderText}`,
              {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [
                      {
                        text: '‚úÖ –ì–æ—Ç–æ–≤–æ',
                        callback_data: `reminder_done_${String(reminderId).slice(0, 20)}`,
                      },
                    ],
                  ],
                },
              },
            );
          } catch (error) {
            this.logger.error('Error sending snoozed reminder:', error);
          }
        },
        15 * 60 * 1000,
      );

      await ctx.editMessageTextWithMarkdown(
        `‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ*\n\n–ù–∞–ø–æ–º–Ω–∏–º —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç!`,
      );
    });

    this.bot.action(/^reminder_snooze_60_(.+)$/, async (ctx) => {
      const reminderId = ctx.match[1];
      await ctx.answerCbQuery('‚è∞ –ù–∞–ø–æ–º–Ω–∏–º —á–µ—Ä–µ–∑ —á–∞—Å!');
      const originalMessage =
        (ctx.callbackQuery?.message as any)?.text || '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ';
      const reminderText = originalMessage
        .replace('üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*', '')
        .trim();

      // Schedule new reminder in 1 hour
      setTimeout(
        async () => {
          try {
            await ctx.telegram.sendMessage(
              ctx.userId,
              `üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\n${reminderText}`,
              {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [
                      {
                        text: '‚úÖ –ì–æ—Ç–æ–≤–æ',
                        callback_data: `reminder_done_${reminderId}`,
                      },
                    ],
                  ],
                },
              },
            );
          } catch (error) {
            this.logger.error('Error sending snoozed reminder:', error);
          }
        },
        60 * 60 * 1000,
      );

      await ctx.editMessageTextWithMarkdown(
        `‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ*\n\n–ù–∞–ø–æ–º–Ω–∏–º —á–µ—Ä–µ–∑ —á–∞—Å!`,
      );
    });

    this.bot.action('cancel_interval_setup', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        `
‚ùå *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞*

–ù–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ.
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });

    // Handle replace interval reminder
    this.bot.action(/^replace_interval_(\d+)_(.+)$/, async (ctx) => {
      await ctx.answerCbQuery();

      const intervalMinutes = parseInt(ctx.match[1]);
      const reminderText = Buffer.from(ctx.match[2], 'base64').toString();

      // Stop current reminder
      this.stopIntervalReminder(ctx.userId);

      // Start new reminder
      await this.startIntervalReminder(ctx, reminderText, intervalMinutes);
    });

    // Natural reminder time handlers
    this.bot.action('remind_in_15min', async (ctx) => {
      await ctx.answerCbQuery();
      await this.handleQuickReminderTime(ctx, 15, '–º–∏–Ω—É—Ç');
    });

    this.bot.action('remind_in_30min', async (ctx) => {
      await ctx.answerCbQuery();
      await this.handleQuickReminderTime(ctx, 30, '–º–∏–Ω—É—Ç');
    });

    this.bot.action('remind_in_1hour', async (ctx) => {
      await ctx.answerCbQuery();
      await this.handleQuickReminderTime(ctx, 1, '—á–∞—Å');
    });

    this.bot.action('remind_in_2hours', async (ctx) => {
      await ctx.answerCbQuery();
      await this.handleQuickReminderTime(ctx, 2, '—á–∞—Å–∞');
    });

    this.bot.action('remind_tomorrow_morning', async (ctx) => {
      await ctx.answerCbQuery();
      await this.handleTomorrowReminder(ctx, '09', '00', '—É—Ç—Ä–æ–º –≤ 9:00');
    });

    this.bot.action('remind_tomorrow_evening', async (ctx) => {
      await ctx.answerCbQuery();
      await this.handleTomorrowReminder(ctx, '18', '00', '–≤–µ—á–µ—Ä–æ–º –≤ 18:00');
    });

    this.bot.action('remind_custom_time', async (ctx) => {
      await ctx.answerCbQuery();
      await this.askForCustomReminderTime(ctx);
    });

    this.bot.action('cancel_reminder', async (ctx) => {
      await ctx.answerCbQuery('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ');
      ctx.session.pendingReminder = undefined;
      ctx.session.waitingForReminderTime = false;
      await ctx.editMessageText('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ');
    });

    // Hour selection handlers
    [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22].forEach(
      (hour) => {
        const hourStr = hour.toString().padStart(2, '0');
        this.bot.action(`select_hour_${hourStr}`, async (ctx) => {
          await ctx.answerCbQuery();
          await this.showMinuteSelection(ctx, hourStr);
        });
      },
    );

    // Other hour selection handler
    this.bot.action('select_other_hour', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.editMessageTextWithMarkdown(
        `üìù *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* "${ctx.session.pendingReminder?.text}"

üïê *–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å (0-23):*`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '00', callback_data: 'select_hour_00' },
                { text: '01', callback_data: 'select_hour_01' },
                { text: '02', callback_data: 'select_hour_02' },
                { text: '03', callback_data: 'select_hour_03' },
              ],
              [
                { text: '04', callback_data: 'select_hour_04' },
                { text: '05', callback_data: 'select_hour_05' },
                { text: '06', callback_data: 'select_hour_06' },
                { text: '07', callback_data: 'select_hour_07' },
              ],
              [{ text: '23', callback_data: 'select_hour_23' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'remind_custom_time' }],
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_reminder' }],
            ],
          },
        },
      );
    });

    // Additional hour handlers for 00-07 and 23
    [0, 1, 2, 3, 4, 5, 6, 7, 23].forEach((hour) => {
      const hourStr = hour.toString().padStart(2, '0');
      this.bot.action(`select_hour_${hourStr}`, async (ctx) => {
        await ctx.answerCbQuery();
        await this.showMinuteSelection(ctx, hourStr);
      });
    });

    // Minute selection handlers
    [
      '00',
      '05',
      '10',
      '15',
      '20',
      '25',
      '30',
      '35',
      '40',
      '45',
      '50',
      '55',
    ].forEach((minute) => {
      this.bot.action(`select_minute_${minute}`, async (ctx) => {
        await ctx.answerCbQuery();
        const selectedHour = ctx.session.tempData?.selectedHour;
        if (selectedHour && ctx.session.pendingReminder) {
          // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
          const reminderText = ctx.session.pendingReminder.text;
          ctx.session.pendingReminder = undefined;
          ctx.session.waitingForReminderTime = false;
          ctx.session.tempData = undefined;

          // –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
          await this.handleReminderRequest(
            ctx,
            reminderText,
            selectedHour,
            minute,
          );
        } else {
          await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
      });
    });

    // Back to hour selection handler
    this.bot.action('back_to_hour_selection', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showHourSelection(ctx);
    });

    // Error handling
    this.bot.catch((err, ctx) => {
      this.logger.error(`Bot error for ${ctx.updateType}:`, err);
      ctx.reply(
        'üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    });
  }

  // AI specialized handlers
  private async handleAITaskRecommendations(ctx: BotContext) {
    const user = await this.userService.findByTelegramId(ctx.userId);
    const tasks = await this.taskService.findTasksByUserId(ctx.userId);
    const completedTasks = tasks.filter((t) => t.completedAt !== null);

    let recommendation = '';

    // Inform the user that AI is working on recommendations
    try {
      await ctx.editMessageTextWithMarkdown(
        `‚è≥ *–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –≥–æ—Ç–æ–≤–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...*`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
            ],
          },
        },
      );
    } catch (e) {
      // ignore errors when editing (message may have changed) and proceed
      this.logger.warn('Could not show AI analyzing message, continuing', e);
    }

    try {
      this.logger.log(`Requesting task advice from OpenAI for user ${user.id}`);
      const aiAdvice = await this.openaiService.getTaskAdvice(
        user.id,
        this.aiContextService,
      );

      if (aiAdvice && aiAdvice.trim().length > 0) {
        recommendation = aiAdvice.trim();
      } else {
        // fallback to template if AI returned empty
        recommendation =
          'üìù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å –Ω–µ–±–æ–ª—å—à–æ–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –µ—ë —Å–µ–≥–æ–¥–Ω—è.';
      }
    } catch (err) {
      this.logger.error('Error fetching task advice from OpenAI:', err);
      // Fallback to previous template logic
      if (tasks.length === 0) {
        recommendation =
          'üìù –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É! –ù–∞—á–Ω–∏—Ç–µ —Å —á–µ–≥–æ-—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.';
      } else if (completedTasks.length < tasks.length * 0.3) {
        recommendation =
          'üéØ –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á. –ö–∞—á–µ—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞!';
      } else {
        recommendation =
          'üöÄ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –ü–æ–º–æ–¥–æ—Ä–æ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.';
      }
    }

    await ctx.editMessageTextWithMarkdown(
      `
üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–¥–∞—á–∞–º*

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${completedTasks.length}/${tasks.length} –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ

${recommendation}

*–°–æ–≤–µ—Ç:* –†–∞–∑–±–∏–≤–∞–π—Ç–µ –±–æ–ª—å—à–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏.
      `,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      },
    );
  }

  private async handleAIHabitHelp(ctx: BotContext) {
    try {
      const user = await this.userService.findByTelegramId(ctx.userId);
      const habits = await this.habitService.findHabitsByUserId(ctx.userId);
      const completedHabits = habits.filter((h) => h.totalCompletions > 0);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞ –ò–ò –≥–æ—Ç–æ–≤–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º
      try {
        await ctx.editMessageTextWithMarkdown(
          `‚è≥ *–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –≥–æ—Ç–æ–≤–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º...*`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
              ],
            },
          },
        );
      } catch (e) {
        this.logger.warn(
          'Could not show AI analyzing habits message, continuing',
          e,
        );
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      const userProfile = {
        totalHabits: habits.length,
        activeHabits: habits.filter((h) => h.isActive).length,
        completedHabits: completedHabits.length,
        avgStreak:
          habits.length > 0
            ? habits.reduce((sum, h) => sum + h.currentStreak, 0) /
              habits.length
            : 0,
      };

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ò–ò-–æ—Ç–≤–µ—Ç –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º
      const aiHabitAdvice = await this.openaiService.getHabitHelp(
        user.id,
        this.aiContextService,
      );
      let motivationalMessage = '';
      let personalizedRecommendations: string[] = [];

      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –ò–ò: –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –º–æ—Ç–∏–≤–∞—Ü–∏—è, –¥–∞–ª–µ–µ ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      if (aiHabitAdvice) {
        const lines = aiHabitAdvice.split('\n').filter((l) => l.trim());
        motivationalMessage = lines[0] || '';
        personalizedRecommendations = lines.slice(1);
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      let message = `üéØ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º*\n\n`;

      if (habits.length > 0) {
        message += `üìä *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n`;
        message += `‚Ä¢ –ü—Ä–∏–≤—ã—á–µ–∫: ${userProfile.totalHabits} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: ${userProfile.activeHabits})\n`;
        message += `‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–µ—Ä–∏—è: ${Math.round(userProfile.avgStreak)} –¥–Ω–µ–π\n`;
        message += `‚Ä¢ –í—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö: ${completedHabits.length}\n\n`;
      }

      message += `üí° *${motivationalMessage}*\n\n`;
      message += `üéØ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å:*\n`;

      personalizedRecommendations.forEach((rec, index) => {
        message += `${index + 1}. ${rec}\n`;
      });

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: 'üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É',
              callback_data: 'habits_add',
            },
            {
              text: 'üéØ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏',
              callback_data: 'habits_list',
            },
          ],
          [
            {
              text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é',
              callback_data: 'ai_back_menu',
            },
          ],
        ],
      };

      try {
        await ctx.editMessageTextWithMarkdown(message, {
          reply_markup: keyboard,
        });
      } catch (err) {
        // If Telegram reports that message is not modified, send a new message instead
        const e = err as any;
        const desc = e?.response?.description || e?.message || '';
        if (
          typeof desc === 'string' &&
          desc.includes('message is not modified')
        ) {
          this.logger.log(
            'Edit resulted in no-op, sending a new message instead',
          );
          await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
        } else {
          throw err;
        }
      }
    } catch (error) {
      this.logger.error('Error in handleAIHabitHelp:', error);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–∏–≤—ã—á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
            ],
          },
        },
      );
    }
  }

  private async handleAICreateHabit(ctx: BotContext) {
    await ctx.editMessageTextWithMarkdown(
      `
ü§ñ *–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò*

–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é –ø—Ä–∏–≤—ã—á–∫—É —Ö–æ—Ç–∏—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å, –∏ —è –ø–æ–º–æ–≥—É:
‚Ä¢ üìù –°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ
‚Ä¢ ‚è∞ –ü–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ üéØ –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è
‚Ä¢ üí° –î–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã

*–ü—Ä–∏–º–µ—Ä—ã:*
"–•–æ—á—É –±–æ–ª—å—à–µ —á–∏—Ç–∞—Ç—å"
"–ù—É–∂–Ω–æ –ø–∏—Ç—å –±–æ–ª—å—à–µ –≤–æ–¥—ã" 
"–•–æ—á—É –¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É"
"–ë—É–¥—É –º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å"

üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏!
      `,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–º–æ—â–∏ —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏',
                callback_data: 'ai_habit_help',
              },
            ],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      },
    );

    // Enable AI habit creation mode
    ctx.session.aiHabitCreationMode = true;
  }

  private async handleAIHabitCreationMessage(
    ctx: BotContext,
    userInput: string,
  ) {
    try {
      // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫
      ctx.session.aiHabitCreationMode = false;

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é AI
      const analysisPrompt = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É: "${userInput}"

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:

1. –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)
2. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
3. –ß–∞—Å—Ç–æ—Ç–∞ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –∏ —Ç.–¥.)
4. –°–æ–≤–µ—Ç—ã –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é (2-3 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–≤–µ—Ç–∞)
5. –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ç–æ–Ω–µ.`;

      const aiResponse = await this.openaiService.getAIResponse(analysisPrompt);

      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç AI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
      const habitData = this.parseAIHabitResponse(aiResponse, userInput);

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É
      const habit = await this.habitService.createHabit({
        userId: ctx.userId,
        title: habitData.title,
        description: habitData.description,
        frequency: 'DAILY',
        reminderTime: habitData.reminderTime,
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      let message = `üéâ *–ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò!*\n\n`;
      message += `üìù **${habit.title}**\n\n`;

      if (habitData.aiAdvice) {
        message += `ü§ñ *–°–æ–≤–µ—Ç –æ—Ç –ò–ò:*\n${habitData.aiAdvice}\n\n`;
      }

      if (habitData.implementationTips.length > 0) {
        message += `üí° *–°–æ–≤–µ—Ç—ã –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é:*\n`;
        habitData.implementationTips.forEach((tip, index) => {
          message += `${index + 1}. ${tip}\n`;
        });
        message += `\n`;
      }

      message += `‚ú® *${habitData.motivationalMessage}*`;

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: '‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
              callback_data: `habit_set_reminder_${String(habit.id).slice(0, 20)}`,
            },
          ],
          [
            {
              text: 'üéØ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏',
              callback_data: 'habits_list',
            },
            {
              text: 'ü§ñ –°–æ–∑–¥–∞—Ç—å –µ—â—ë',
              callback_data: 'ai_create_habit',
            },
          ],
          [
            {
              text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
              callback_data: 'back_to_menu',
            },
          ],
        ],
      };

      await ctx.replyWithMarkdown(message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      this.logger.error('Error in handleAIHabitCreationMessage:', error);
      ctx.session.aiHabitCreationMode = false;

      await ctx.replyWithMarkdown(
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É —Å –ø–æ–º–æ—â—å—é –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –≤—Ä—É—á–Ω—É—é.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìù –°–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é', callback_data: 'habits_add' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    }
  }

  private parseAIHabitResponse(aiResponse: string, originalInput: string) {
    // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –æ—Ç–≤–µ—Ç–∞ –ò–ò - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
    const defaultHabit = {
      title:
        originalInput.length > 50
          ? originalInput.substring(0, 50)
          : originalInput,
      description: `–ü—Ä–∏–≤—ã—á–∫–∞, —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Å –ø–æ–º–æ—â—å—é –ò–ò: ${originalInput}`,
      reminderTime: '09:00',
      implementationTips: [
        '–ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ',
        '–ë—É–¥—å—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã',
        '–û—Ç–º–µ—á–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å',
      ],
      aiAdvice:
        aiResponse.length > 200
          ? aiResponse.substring(0, 200) + '...'
          : aiResponse,
      motivationalMessage: '–í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è!',
    };

    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò
      const lines = aiResponse.split('\n').filter((line) => line.trim());

      for (const line of lines) {
        if (line.toLowerCase().includes('–ø—Ä–∏–≤—ã—á–∫–∞') && line.includes(':')) {
          const habitTitle = line.split(':')[1]?.trim();
          if (habitTitle && habitTitle.length <= 50) {
            defaultHabit.title = habitTitle;
          }
        }

        if (line.toLowerCase().includes('–≤—Ä–µ–º—è') && line.includes(':')) {
          const timeMatch = line.match(/\d{1,2}:\d{2}/);
          if (timeMatch) {
            defaultHabit.reminderTime = timeMatch[0];
          }
        }
      }

      return defaultHabit;
    } catch (error) {
      this.logger.warn('Failed to parse AI response, using defaults:', error);
      return defaultHabit;
    }
  }

  private async handleNaturalReminderRequest(ctx: BotContext, text: string) {
    try {
      // –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      // Check for interval reminders - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
      let intervalMinutes = 0;
      let intervalAmount = 0;
      let intervalUnit = '';

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º "–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É", "–∫–∞–∂–¥—ã–π —á–∞—Å" –∏ —Ç.–¥.
      if (text.match(/–∫–∞–∂–¥—É—é\s+–º–∏–Ω—É—Ç—É/i)) {
        intervalMinutes = 1;
        intervalAmount = 1;
        intervalUnit = '–º–∏–Ω—É—Ç';
      } else if (text.match(/–∫–∞–∂–¥—ã–π\s+—á–∞—Å/i)) {
        intervalMinutes = 60;
        intervalAmount = 1;
        intervalUnit = '—á–∞—Å';
      } else {
        // Check for interval reminders (–∫–∞–∂–¥—ã–µ X –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤)
        const intervalMatch = text.match(
          /–∫–∞–∂–¥—ã–µ?\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)/i,
        );

        if (intervalMatch) {
          intervalAmount = parseInt(intervalMatch[1]);
          intervalUnit = intervalMatch[2].toLowerCase();

          if (intervalUnit.includes('–º–∏–Ω—É—Ç')) {
            intervalMinutes = intervalAmount;
          } else if (intervalUnit.includes('—á–∞—Å')) {
            intervalMinutes = intervalAmount * 60;
          }
        }
      }

      if (intervalMinutes > 0) {
        // Validate interval (minimum 1 minute, maximum 24 hours)
        if (intervalMinutes < 1 || intervalMinutes > 1440) {
          await ctx.replyWithMarkdown(`
‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª*

–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –º–∏–Ω—É—Ç—ã –¥–æ 24 —á–∞—Å–æ–≤.
          `);
          return;
        }

        // Extract reminder text for interval reminder
        const reminderText = text
          .replace(/–Ω–∞–ø–æ–º–Ω–∏\s*(–º–Ω–µ)?/gi, '')
          .replace(/–Ω–∞–ø–æ–º–Ω—é\s*(—Ç–µ–±–µ|–≤–∞–º)?/gi, '')
          .replace(/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/gi, '')
          .replace(/–ø–æ—Å—Ç–∞–≤—å/gi, '')
          .replace(/—É—Å—Ç–∞–Ω–æ–≤–∏/gi, '')
          .replace(/–∫–∞–∂–¥—É—é\s+–º–∏–Ω—É—Ç—É/gi, '')
          .replace(/–∫–∞–∂–¥—ã–π\s+—á–∞—Å/gi, '')
          .replace(/–∫–∞–∂–¥—ã–µ?\s*\d+\s*(?:–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)/gi, '')
          .trim();

        if (!reminderText || reminderText.length < 2) {
          await ctx.replyWithMarkdown(`
ü§î *–û —á–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–µ ${intervalAmount} ${intervalUnit}?*

–í—ã —É–∫–∞–∑–∞–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–ª–∏, –æ —á–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å.

*–ü—Ä–∏–º–µ—Ä:* "–Ω–∞–ø–æ–º–∏–Ω–∞–π –ø–∏—Ç—å –≤–æ–¥—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"
          `);
          return;
        }

        await this.handleIntervalReminder(ctx, reminderText, intervalMinutes);
        return;
      }

      // –ï—Å–ª–∏ –Ω–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ, —Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      const reminderText = this.extractReminderText(text);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—Ä–µ–º—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
      const timeMatch = this.extractTimeFromText(text);

      if (timeMatch) {
        // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await this.handleReminderRequest(
          ctx,
          reminderText,
          timeMatch.hours,
          timeMatch.minutes,
        );
      } else {
        // –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ø—Ä–æ—Å–∏–º —É—Ç–æ—á–Ω–∏—Ç—å
        await this.askForReminderTime(ctx, reminderText);
      }
    } catch (error) {
      this.logger.error('Error handling natural reminder request:', error);
      await ctx.reply(
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.',
      );
    }
  }

  private extractReminderText(text: string): string {
    // –£–¥–∞–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    const cleanText = text
      .toLowerCase()
      .replace(
        /^(–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ|–Ω–∞–ø–æ–º–Ω–∏|–ø–æ—Å—Ç–∞–≤—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ|—Å–æ–∑–¥–∞–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ|remind me|remind)\s*/i,
        '',
      )
      .replace(/\s*(—á–µ—Ä–µ–∑|–≤|–≤ —Ç–µ—á–µ–Ω–∏–µ|after|in)\s*\d+.*$/i, '') // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏
      .trim();

    return cleanText || '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ';
  }

  private extractTimeFromText(
    text: string,
  ): { hours: string; minutes: string } | null {
    // –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
    const timeRegex = /(\d{1,2}):(\d{2})/;
    const timeMatch = text.match(timeRegex);

    if (timeMatch) {
      return {
        hours: timeMatch[1].padStart(2, '0'),
        minutes: timeMatch[2],
      };
    }

    // –ò—â–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (—á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤)
    const relativeTimeRegex = /—á–µ—Ä–µ–∑\s+(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)/i;
    const relativeMatch = text.match(relativeTimeRegex);

    if (relativeMatch) {
      const amount = parseInt(relativeMatch[1]);
      const unit = relativeMatch[2].toLowerCase();

      const now = new Date();
      let targetTime = new Date(now);

      if (unit.includes('–º–∏–Ω—É—Ç')) {
        targetTime.setMinutes(targetTime.getMinutes() + amount);
        // Normalize to minute boundary (seconds and ms = 0)
        targetTime.setSeconds(0, 0);
        // If normalization moved time to the past or equal to now, push to next minute
        if (targetTime.getTime() <= now.getTime()) {
          targetTime.setTime(targetTime.getTime() + 60 * 1000);
        }
      } else if (unit.includes('—á–∞—Å')) {
        targetTime.setHours(targetTime.getHours() + amount);
        // Normalize to minute boundary (seconds and ms = 0)
        targetTime.setSeconds(0, 0);
        if (targetTime.getTime() <= now.getTime()) {
          targetTime.setTime(targetTime.getTime() + 60 * 1000);
        }
      }

      return {
        hours: targetTime.getHours().toString().padStart(2, '0'),
        minutes: targetTime.getMinutes().toString().padStart(2, '0'),
      };
    }

    return null;
  }

  private async askForReminderTime(ctx: BotContext, reminderText: string) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.pendingReminder = {
      text: reminderText,
      originalText: reminderText,
    };
    ctx.session.waitingForReminderTime = true;

    await ctx.replyWithMarkdown(
      `üìù *–°–æ–∑–¥–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* "${reminderText}"

‚è∞ –ö–æ–≥–¥–∞ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚è∞ –ß–µ—Ä–µ–∑ 15 –º–∏–Ω', callback_data: 'remind_in_15min' },
              { text: '‚è∞ –ß–µ—Ä–µ–∑ 30 –º–∏–Ω', callback_data: 'remind_in_30min' },
            ],
            [
              { text: '‚è∞ –ß–µ—Ä–µ–∑ 1 —á–∞—Å', callback_data: 'remind_in_1hour' },
              { text: '‚è∞ –ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞', callback_data: 'remind_in_2hours' },
            ],
            [
              {
                text: '‚è∞ –ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º (9:00)',
                callback_data: 'remind_tomorrow_morning',
              },
              {
                text: '‚è∞ –ó–∞–≤—Ç—Ä–∞ –≤–µ—á–µ—Ä–æ–º (18:00)',
                callback_data: 'remind_tomorrow_evening',
              },
            ],
            [
              {
                text: 'üïê –£–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è',
                callback_data: 'remind_custom_time',
              },
            ],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_reminder' }],
          ],
        },
      },
    );
  }

  private async handleSimpleReminderRequest(ctx: BotContext, text: string) {
    this.logger.log(
      `Handling simple reminder request: "${text}" for user ${ctx.userId}`,
    );

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—É–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞)
    let reminderText = text;

    // –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    reminderText = reminderText.replace(
      /^(–Ω–∞–ø–æ–º–Ω–∏\s+–º–Ω–µ\s+|–Ω–∞–ø–æ–º–Ω—é\s+—Å–µ–±–µ\s+|–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+|–ø–æ—Å—Ç–∞–≤—å\s+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+|—É—Å—Ç–∞–Ω–æ–≤–∏\s+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+|—Å–æ–∑–¥–∞–π\s+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+)/i,
      '',
    );

    // –¢—Ä–µ–±—É–µ–º —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏. –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.
    let cleanedText = reminderText.trim();

    // –ü–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–≤–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ç–µ–∫—Å—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "15:00" –∏–ª–∏ "—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç" –∏–ª–∏ "–∑–∞–≤—Ç—Ä–∞ –≤ 15:00")
    const timeInfo = this.extractTimeFromText(text);

    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    cleanedText = this.extractReminderText(reminderText);
    ctx.session.pendingReminder = {
      text: cleanedText,
      originalText: text,
    };

    if (timeInfo) {
      // –ï—Å–ª–∏ –≤—Ä–µ–º—è —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å—Ä–∞–∑—É
      ctx.session.waitingForReminderTime = false;
      ctx.session.pendingReminderTime = undefined;

      // –î–µ–ª–µ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      await this.handleReminderRequest(
        ctx,
        cleanedText,
        timeInfo.hours,
        timeInfo.minutes,
      );
      return;
    }

    // –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ ‚Äî —Å–æ–∑–¥–∞—ë–º –ó–ê–î–ê–ß–£, –∞ –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    try {
      const task = await this.taskService.createTask({
        userId: ctx.userId,
        title: cleanedText,
        description: cleanedText,
        priority: 'MEDIUM',
      });

      await ctx.replyWithMarkdown(
        `‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\nüìù "${cleanedText}"\n\n–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –µ—ë –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏".\n\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:\n‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "–Ω–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –≤ 17:30"\n‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ: "–Ω–∞–ø–æ–º–∏–Ω–∞–π –ø–∏—Ç—å –≤–æ–¥—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error('Error creating task from reminder text:', error);
      await ctx.replyWithMarkdown(
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
      );
    }
    return;
  }

  private async handleAITimePlanning(ctx: BotContext) {
    const user = await this.userService.findByTelegramId(ctx.userId);
    const currentHour = new Date().getHours();

    let timeAdvice = '';
    if (currentHour < 9) {
      timeAdvice =
        'üåÖ –£—Ç—Ä–æ–º –ª—É—á—à–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞. –ú–æ–∑–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ!';
    } else if (currentHour < 14) {
      timeAdvice =
        '‚òÄÔ∏è –ü–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏! –í—Ä–µ–º—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π.';
    } else if (currentHour < 18) {
      timeAdvice =
        'üïê –ü–æ—Å–ª–µ –æ–±–µ–¥–∞ —ç–Ω–µ—Ä–≥–∏—è —Å–Ω–∏–∂–∞–µ—Ç—Å—è. –ü–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –¥–µ–ª.';
    } else {
      timeAdvice =
        'üåÜ –í–µ—á–µ—Ä - –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è –∏ –ª–µ–≥–∫–∏—Ö –∑–∞–¥–∞—á.';
    }

    await ctx.editMessageTextWithMarkdown(
      `
‚è∞ *–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏*

üïê –°–µ–π—á–∞—Å ${currentHour}:00

${timeAdvice}

*–ú–µ—Ç–æ–¥—ã:*
‚Ä¢ üçÖ –ü–æ–º–æ–¥–æ—Ä–æ (25 –º–∏–Ω —Ä–∞–±–æ—Ç–∞ / 5 –º–∏–Ω –æ—Ç–¥—ã—Ö)
‚Ä¢ ‚è∞ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ 
‚Ä¢ üéØ –ü—Ä–∞–≤–∏–ª–æ 3-—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
      `,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      },
    );
  }

  private async handleAICustomQuestion(ctx: BotContext) {
    await ctx.editMessageTextWithMarkdown(
      `
‚úçÔ∏è *–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å*

–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –æ–¥–Ω–æ–π –∏–∑ —Ç–µ–º:
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∞–º–∏
‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–µ–∫  
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏–∏ –∏ —Ü–µ–ª—è—Ö
‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

–Ø –æ—Ç–≤–µ—á—É –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É!
      `,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      },
    );

    // Enable custom AI chat mode
    ctx.session.aiChatMode = true;
  }

  // Referral system methods
  private async handleReferralRegistration(
    ctx: BotContext,
    newUserId: string,
    referrerId: string,
  ): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ä–∞–∑–Ω—ã–µ
      if (newUserId === referrerId) {
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
      const referrer = await this.userService
        .findByTelegramId(referrerId)
        .catch(() => null);
      if (!referrer) {
        this.logger.warn(`Referrer ${referrerId} not found`);
        return;
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await this.userService.updateUser(newUserId, {
        referredBy: referrer.id,
      });

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
      const currentReferralsCount = await this.getReferralsCount(referrerId);
      await this.userService.updateUser(referrerId, {
        referralsCount: currentReferralsCount + 1,
        activeReferrals: currentReferralsCount + 1, // –°—á–∏—Ç–∞–µ–º –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã–º–∏
      });

      // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã —Ä–µ—Ñ–µ—Ä–µ—Ä—É
      const referrerUser = await this.userService.findByTelegramId(referrerId);
      let bonusXp = 500; // –ë–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
      const newReferralsCount = currentReferralsCount + 1;
      let achievementMessage = '';
      let achievementType: 'first' | 'triple' | 'five' | null = null;

      if (newReferralsCount === 1) {
        bonusXp += 200; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞
        achievementMessage =
          '\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü–µ—Ä–≤—ã–π –¥—Ä—É–≥" —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ! (+200 XP)';
        achievementType = 'first';
      } else if (newReferralsCount === 3) {
        bonusXp += 500; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ 3 –¥—Ä—É–∑–µ–π
        achievementMessage =
          '\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–¢—Ä–æ–π–∫–∞ –¥—Ä—É–∑–µ–π" —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ! (+500 XP)';
        achievementType = 'triple';
      } else if (newReferralsCount === 5) {
        bonusXp += 1000; // –ë–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ 5 –¥—Ä—É–∑–µ–π
        achievementMessage =
          '\nüèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "–ü—è—Ç–µ—Ä–∫–∞ –¥—Ä—É–∑–µ–π" —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ! (+1000 XP)';
        achievementType = 'five';
      }

      await this.userService.updateUser(referrerId, {
        totalXp: referrerUser.totalXp + bonusXp,
      });

      // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const newUser = await this.userService.findByTelegramId(newUserId);
      await this.userService.updateUser(newUserId, {
        totalXp: newUser.totalXp + 200,
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      try {
        await this.bot.telegram.sendMessage(
          referrerId,
          `üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*

üë§ –í–∞—à –¥—Ä—É–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ Ticky AI!

 **–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê:**
‚Ä¢ –ö–æ–≥–¥–∞ –¥—Ä—É–≥ –æ–ø–ª–∞—Ç–∏—Ç –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É (199‚ÇΩ) ‚Üí –í—ã –ø–æ–ª—É—á–∏—Ç–µ 79‚ÇΩ
‚Ä¢ –ö–æ–≥–¥–∞ –¥—Ä—É–≥ –æ–ø–ª–∞—Ç–∏—Ç –≥–æ–¥–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É (999‚ÇΩ) ‚Üí –í—ã –ø–æ–ª—É—á–∏—Ç–µ 399‚ÇΩ
‚Ä¢ –í—ã–ø–ª–∞—Ç—ã –ø–æ—Å—Ç—É–ø–∞—é—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!

üë• –í—Å–µ–≥–æ –¥—Ä—É–∑–µ–π: ${newReferralsCount}/5${achievementMessage}

üéÅ **XP –±–æ–Ω—É—Å—ã:**
üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ +${bonusXp} XP
‚ú® –î—Ä—É–≥ –ø–æ–ª—É—á–∏–ª +200 XP –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

üîó –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –µ—â–µ –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ!`,
          { parse_mode: 'Markdown' },
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
        if (achievementType) {
          setTimeout(async () => {
            await this.sendReferralAchievementNotification(
              referrerId,
              achievementType,
              bonusXp,
            );
          }, 2000); // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        }
      } catch (error) {
        this.logger.warn(
          `Could not send referral notification to ${referrerId}: ${error.message}`,
        );
      }
      await ctx.replyWithMarkdown(
        `üéÅ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –¥—Ä—É–≥–∞!\n‚≠ê –ü–æ–ª—É—á–∏–ª–∏ +200 XP –±–æ–Ω—É—Å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n\nüöÄ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –±–æ—Ç–æ–º!`,
      );

      this.logger.log(
        `Referral registration: ${newUserId} invited by ${referrerId}`,
      );
    } catch (error) {
      this.logger.error('Error handling referral registration:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
   */
  private async sendReferralAchievementNotification(
    userId: string,
    achievement: 'first' | 'triple' | 'five',
    bonusXp: number,
  ): Promise<void> {
    try {
      let message = '';
      let emoji = '';

      switch (achievement) {
        case 'first':
          emoji = 'ü•â';
          message = `${emoji} *–î–û–°–¢–ò–ñ–ï–ù–ò–ï –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–û!*

üéâ **"–ü–µ—Ä–≤—ã–π –¥—Ä—É–≥"**
–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞!

üí∞ **–ü–æ–ª—É—á–µ–Ω–æ:** +${bonusXp} XP
üéØ **–°–ª–µ–¥—É—é—â–∞—è —Ü–µ–ª—å:** –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 3 –¥—Ä—É–∑–µ–π`;
          break;

        case 'triple':
          emoji = 'ü•à';
          message = `${emoji} *–î–û–°–¢–ò–ñ–ï–ù–ò–ï –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù–û!*

üéâ **"–¢—Ä–æ–π–∫–∞ –¥—Ä—É–∑–µ–π"**
–£ –≤–∞—Å —É–∂–µ 3 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–≥–∞!

üí∞ **–ü–æ–ª—É—á–µ–Ω–æ:** +${bonusXp} XP
üéØ **–°–ª–µ–¥—É—é—â–∞—è —Ü–µ–ª—å:** –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 5 –¥—Ä—É–∑–µ–π`;
          break;

        case 'five':
          emoji = 'ü•á';
          message = `${emoji} *–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –î–û–°–¢–ò–ñ–ï–ù–ò–ï!*

üéâ **"–ü—è—Ç–µ—Ä–∫–∞ –¥—Ä—É–∑–µ–π"**
–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º—É–º–∞ - 5 –¥—Ä—É–∑–µ–π!

üí∞ **–ü–æ–ª—É—á–µ–Ω–æ:** +${bonusXp} XP
üèÜ **–°—Ç–∞—Ç—É—Å:** –ú–∞—Å—Ç–µ—Ä —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
üëë **–ë–æ–Ω—É—Å:** –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!`;
          break;
      }

      await this.bot.telegram.sendMessage(userId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                callback_data: 'referral_stats',
              },
            ],
            [
              {
                text: 'ÔøΩ –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É',
                callback_data: 'copy_referral_link',
              },
              {
                text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è',
                callback_data: 'share_referral_link',
              },
            ],
          ],
        },
      });
    } catch (error) {
      this.logger.warn(
        `Could not send achievement notification to ${userId}:`,
        error,
      );
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
   */
  private async updateUserActivity(userId: string): Promise<void> {
    try {
      await this.userService.updateUser(userId, {
        lastActivity: new Date(),
      });
    } catch (error) {
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      this.logger.debug(`Could not update activity for ${userId}:`, error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  private async getReferralsCount(userId: string): Promise<number> {
    try {
      const user = await this.userService.findByTelegramId(userId);
      const referralsCount = await this.prisma.user.count({
        where: {
          referredBy: user.id,
        },
      });
      return referralsCount;
    } catch (error) {
      this.logger.error(`Error getting referrals count for ${userId}:`, error);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
   */
  private async getReferralStats(userId: string): Promise<{
    totalReferrals: number;
    activeReferrals: number;
    totalBonus: number;
    referralBalance: number;
    topReferrals: Array<{ name: string; joinDate: string; isActive: boolean }>;
  }> {
    try {
      const user = await this.userService.findByTelegramId(userId);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      const referrals = await this.prisma.user.findMany({
        where: {
          referredBy: user.id,
        },
        select: {
          firstName: true,
          lastName: true,
          username: true,
          createdAt: true,
          lastActivity: true,
        },
        orderBy: {
          createdAt: 'desc',
        },
      });

      // –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
      const weekAgo = new Date();
      weekAgo.setDate(weekAgo.getDate() - 7);

      const activeReferrals = referrals.filter(
        (ref) => ref.lastActivity && ref.lastActivity > weekAgo,
      ).length;

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–æ–Ω—É—Å (–±–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å + –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è)
      const totalReferrals = referrals.length;
      let totalBonus = totalReferrals * 500; // –ë–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥–æ–≥–æ

      // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      if (totalReferrals >= 1) totalBonus += 200; // –ü–µ—Ä–≤—ã–π –¥—Ä—É–≥
      if (totalReferrals >= 3) totalBonus += 500; // –¢—Ä–æ–π–∫–∞ –¥—Ä—É–∑–µ–π
      if (totalReferrals >= 5) totalBonus += 1000; // –ü—è—Ç–µ—Ä–∫–∞ –¥—Ä—É–∑–µ–π

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ –ë–î
      const userData = await this.prisma.user.findUnique({
        where: { id: user.id },
        select: { referralBalance: true },
      });

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      const topReferrals = referrals.slice(0, 5).map((ref) => ({
        name: ref.firstName || ref.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        joinDate: ref.createdAt.toLocaleDateString('ru-RU'),
        isActive: !!(ref.lastActivity && ref.lastActivity > weekAgo),
      }));

      return {
        totalReferrals,
        activeReferrals,
        totalBonus,
        referralBalance: userData?.referralBalance || 0,
        topReferrals,
      };
    } catch (error) {
      this.logger.error(`Error getting referral stats for ${userId}:`, error);
      return {
        totalReferrals: 0,
        activeReferrals: 0,
        totalBonus: 0,
        referralBalance: 0,
        topReferrals: [],
      };
    }
  }

  async onModuleInit() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    this.launch().catch((error) => {
      this.logger.error('Failed to launch bot:', error);
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    this.startMotivationalMessagesService();
  }

  private startMotivationalMessagesService() {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–π —á–∞—Å —Å 8:00 –¥–æ 22:00
    setInterval(
      async () => {
        const currentHour = new Date().getHours();

        // –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å 8:00 –¥–æ 22:00
        if (currentHour >= 8 && currentHour <= 22) {
          await this.sendMotivationalMessages();
        }
      },
      60 * 60 * 1000,
    ); // –∫–∞–∂–¥—ã–π —á–∞—Å

    this.logger.log('Motivational messages service started');
  }

  private async sendMotivationalMessages() {
    try {
      // –ó–¥–µ—Å—å –≤—ã –±—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
      // –ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

      // const usersWithDependencies = await this.getUsersWithActiveDependencies();
      //
      // for (const user of usersWithDependencies) {
      //   const motivationalMessage = await this.generateMotivationalMessage(user.dependency);
      //   await this.bot.telegram.sendMessage(user.telegramId, motivationalMessage, {
      //     parse_mode: 'Markdown'
      //   });
      // }

      this.logger.log('Motivational messages sent');
    } catch (error) {
      this.logger.error('Error sending motivational messages:', error);
    }
  }

  async onModuleDestroy() {
    await this.stop();
  }

  private async startOnboarding(ctx: BotContext) {
    // Step 1: Welcome
    await this.showOnboardingStep1(ctx);
  }

  private async showOnboardingStep1(ctx: BotContext) {
    // –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ò–ò-—á–∞—Ç–∞
    ctx.session.aiChatMode = false;
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üöÄ –ù–∞—á–∞—Ç—å', callback_data: 'onboarding_start' },
          {
            text: 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã',
            callback_data: 'onboarding_examples',
          },
        ],
      ],
    };

    await ctx.replyWithMarkdown(
      `ü§ñ *–ü—Ä–∏–≤–µ—Ç! –Ø Ticky AI ‚Äî —Ç–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º –∏ –∑–∞–¥–∞—á–∞–º —Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π.*`,
      { reply_markup: keyboard },
    );

    ctx.session.step = 'onboarding_welcome';
  }

  private async showOnboardingStep2(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üéØ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É',
            callback_data: 'onboarding_add_habit',
          },
          { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'onboarding_skip_habit' },
        ],
      ],
    };

    await ctx.editMessageTextWithMarkdown(
      `
üöÄ *–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç*

–î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º —Ç–≤–æ—é –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É!
–ù–∞–ø—Ä–∏–º–µ—Ä: "–ü–∏—Ç—å –≤–æ–¥—É"

*–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:*
    `,
      { reply_markup: keyboard },
    );

    ctx.session.step = 'onboarding_quick_start';
  }

  private async showOnboardingStep3(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [{ text: '‚úÖ –ü–æ–Ω—è—Ç–Ω–æ!', callback_data: 'onboarding_complete' }],
      ],
    };

    await ctx.replyWithMarkdown(
      `
üìö *–ú–∏–Ω–∏-FAQ*

*–ß–¢–û –£–ú–ï–ï–¢ –ë–û–¢?*

‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏
‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
‚Ä¢ –í–æ–≤–ª–µ–∫–∞—Ç—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∏
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö

üéØ –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å?
    `,
      { reply_markup: keyboard },
    );

    ctx.session.step = 'onboarding_faq';
  }

  private async showMainMenu(ctx: BotContext, shouldEdit: boolean = false) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É', callback_data: 'add_habit' },
          { text: '‚úÖ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'my_habits' },
        ],
        [
          { text: 'üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'my_tasks' },
          { text: 'üçÖ –ü–æ–º–æ–¥–æ—Ä–æ', callback_data: 'pomodoro_focus' },
        ],
        [
          { text: 'üü¢ –ï—â—ë —Ñ—É–Ω–∫—Ü–∏–∏', callback_data: 'more_functions' },
          { text: 'üß† –ß–∞—Ç —Å –ò–ò', callback_data: 'ai_chat' },
        ],
        [
          { text: 'üìä –ü—Ä–æ–≥—Ä–µ—Å—Å', callback_data: 'my_progress' },
          { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'faq_support' },
          { text: 'üîí –õ–∏–º–∏—Ç—ã', callback_data: 'show_limits' },
        ],
      ],
    };

    const user = await this.getOrCreateUser(ctx);
    const trialInfo = await this.billingService.getTrialInfo(ctx.userId);
    const subscriptionStatus = await this.billingService.getSubscriptionStatus(
      ctx.userId,
    );

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    const todayTasks = await this.taskService.getTodayTasks(ctx.userId);
    const completedTasks = todayTasks.filter(
      (task) => task.status === 'COMPLETED',
    );
    const totalTasks = todayTasks.length;

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –∑–∞–¥–∞—á
    let tasksProgressBar = '';
    if (totalTasks > 0) {
      // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ ‚Äî –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
      const completedCount = completedTasks.length;
      const taskProgress =
        'üü©'.repeat(completedCount) +
        '‚¨ú'.repeat(Math.max(0, totalTasks - completedCount));

      tasksProgressBar = `\nüìã **–ó–∞–¥–∞—á–∏ –Ω–∞ ${new Date().toLocaleDateString('ru-RU')}:**\n–ü—Ä–æ–≥—Ä–µ—Å—Å: ${taskProgress} ${completedCount}/${totalTasks}`;
    } else {
      tasksProgressBar = `\nüìã **–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:** –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á`;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–º–æ–¥–æ—Ä–æ —Å–µ—Å—Å–∏—é
    const activeSession = this.activePomodoroSessions.get(ctx.userId);
    let pomodoroStatus = '';
    if (activeSession) {
      const currentTime = new Date();
      const totalElapsed =
        currentTime.getTime() -
        activeSession.startTime.getTime() -
        (activeSession.totalPausedTime || 0);
      const elapsed = Math.floor(totalElapsed / (1000 * 60));
      const remaining = Math.max(0, 25 - elapsed);

      if (activeSession.pausedAt) {
        pomodoroStatus =
          '\n‚è∏Ô∏è **–§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –Ω–∞ –ø–∞—É–∑–µ** (–æ—Å—Ç–∞–ª–æ—Å—å ~' + remaining + ' –º–∏–Ω)';
      } else if (activeSession.breakTimer) {
        pomodoroStatus = '\n‚òï **–ê–∫—Ç–∏–≤–µ–Ω –ø–µ—Ä–µ—Ä—ã–≤** –ø–æ–º–æ–¥–æ—Ä–æ';
      } else {
        pomodoroStatus =
          '\nüçÖ **–ê–∫—Ç–∏–≤–Ω–∞—è —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—è** (–æ—Å—Ç–∞–ª–æ—Å—å ~' + remaining + ' –º–∏–Ω)';
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
      keyboard.inline_keyboard.unshift([
        { text: 'üçÖ –ö –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏', callback_data: 'pomodoro_focus' },
      ]);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—Ä–æ–≤–Ω–µ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
    const userStats = `\nüèÜ XP: ${user.totalXp} | üî• –£—Ä–æ–≤–µ–Ω—å: ${user.level}`;

    let statusText = '';
    if (trialInfo.isTrialActive) {
      statusText = `üéÅ **–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥:** ${trialInfo.daysRemaining} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å\n`;
    } else if (subscriptionStatus.type !== 'FREE') {
      statusText = `üíé **${subscriptionStatus.type === 'PREMIUM' ? 'Premium' : 'Premium Plus'}**\n`;
    }

    const message = `
üëã *–ü—Ä–∏–≤–µ—Ç, ${this.userService.getDisplayName(user)}!*

${statusText}ü§ñ –Ø Ticky AI ‚Äì —Ç–≤–æ–π –ª–∏—á–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏.
${tasksProgressBar}${pomodoroStatus}${userStats}
    `;

    if (shouldEdit) {
      try {
        await ctx.editMessageTextWithMarkdown(message, {
          reply_markup: keyboard,
        });
      } catch (err) {
        const e = err as any;
        const desc = e?.response?.description || e?.message || '';
        if (
          typeof desc === 'string' &&
          desc.includes('message is not modified')
        ) {
          this.logger.log(
            'Edit resulted in no-op (all tasks identical), sending a new message instead',
          );
          await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
        } else {
          throw err;
        }
      }
    } else {
      await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
    }

    // Check if we should show feedback request
    setTimeout(() => this.checkAndShowFeedbackRequest(ctx), 2000);
  }

  async launch() {
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞
      await this.bot.telegram.setMyCommands([
        { command: 'start', description: 'üé¨ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
        { command: 'menu', description: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },
        { command: 'tasks', description: 'üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏' },
        { command: 'habits', description: 'üéØ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏' },
        { command: 'reminders', description: '‚è∞ –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è' },
        { command: 'mood', description: 'üòä –î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è' },
        { command: 'focus', description: 'üçÖ –†–µ–∂–∏–º —Ñ–æ–∫—É—Å–∞' },
        { command: 'billing', description: 'üíé –ú–æ–∏ –ª–∏–º–∏—Ç—ã –∏ –ø–æ–¥–ø–∏—Å–∫–∞' },
        { command: 'feedback', description: 'üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å' },
        { command: 'help', description: 'üÜò –°–ø—Ä–∞–≤–∫–∞' },
      ]);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Menu Button - –∫–Ω–æ–ø–∫—É –º–µ–Ω—é —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
      await this.bot.telegram.setChatMenuButton({
        menuButton: {
          type: 'commands',
        },
      });

      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Web App –∫–Ω–æ–ø–∫—É –¥–ª—è –±–æ–ª–µ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é
      // await this.bot.telegram.setChatMenuButton({
      //   menuButton: {
      //     type: 'web_app',
      //     text: '–ú–µ–Ω—é',
      //     web_app: { url: 'https://your-domain.com/menu' }
      //   }
      // });

      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
      this.bot
        .launch()
        .then(() => {
          this.logger.log('üöÄ Telegram bot launched successfully');
        })
        .catch((error) => {
          this.logger.error('‚ùå Failed to launch Telegram bot:', error);
        });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
      this.logger.log('ü§ñ Telegram bot launch initiated');
    } catch (error) {
      this.logger.error('‚ùå Error during bot initialization:', error);
      throw error;
    }
  }

  async stop() {
    // Clear all active Pomodoro timers before stopping
    for (const [userId, session] of this.activePomodoroSessions.entries()) {
      if (session.focusTimer) clearTimeout(session.focusTimer);
      if (session.breakTimer) clearTimeout(session.breakTimer);
    }
    this.activePomodoroSessions.clear();

    // Clear all active interval reminders before stopping
    for (const [userId, reminder] of this.activeIntervalReminders.entries()) {
      clearInterval(reminder.intervalId);
      this.logger.log(`Stopped interval reminder for user ${userId}`);
    }
    this.activeIntervalReminders.clear();

    this.bot.stop('SIGINT');
    this.logger.log('üõë Telegram bot stopped');
  }

  getBotInstance(): Telegraf<BotContext> {
    return this.bot;
  }

  // Task management methods
  private async showTasksMenu(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'tasks_add' },
          { text: 'üìã –í—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'tasks_list' },
        ],
        [{ text: 'ü§ñ AI-—Å–æ–≤–µ—Ç –ø–æ –∑–∞–¥–∞—á–∞–º', callback_data: 'tasks_ai_advice' }],
        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_main' }],
      ],
    };

    const message = `
üìù *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    `;

    // Check if this is a callback query (can edit) or command (need to reply)
    if (ctx.callbackQuery) {
      try {
        await ctx.editMessageTextWithMarkdown(message, {
          reply_markup: keyboard,
        });
      } catch (err) {
        const e = err as any;
        const desc = e?.response?.description || e?.message || '';
        if (
          typeof desc === 'string' &&
          desc.includes('message is not modified')
        ) {
          this.logger.log(
            'Edit resulted in no-op, sending a new message instead (showTasksList)',
          );
          await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
        } else {
          throw err;
        }
      }
    } else {
      await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
    }
  }

  private async startAddingTask(ctx: BotContext) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–¥–∞—á–∏
    const user = await this.userService.findByTelegramId(ctx.userId);
    if (!user.timezone) {
      ctx.session.pendingAction = 'adding_task';
      await this.askForTimezone(ctx);
      return;
    }

    // Check billing limits for tasks
    const limitCheck = await this.billingService.checkUsageLimit(
      ctx.userId,
      'dailyTasks',
    );

    if (!limitCheck.allowed) {
      await ctx.replyWithMarkdown(
        limitCheck.message || 'üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–¥–∞—á',
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Premium',
                  callback_data: 'upgrade_premium',
                },
              ],
              [{ text: 'üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã', callback_data: 'show_limits' }],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'menu_tasks' }],
            ],
          },
        },
      );
      return;
    }

    await ctx.replyWithMarkdown(
      `
‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏*

üìä **–ó–∞–¥–∞—á —Å–µ–≥–æ–¥–Ω—è:** ${limitCheck.current}${limitCheck.limit === -1 ? '' : `/${limitCheck.limit}`}

ÔøΩ **–°–ø–æ—Å–æ–±—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:**
‚Ä¢ ÔøΩüìù –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
‚Ä¢ üéôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

ü§ñ **–Ø –≤—Å–µ –ø–æ–π–º—É!** 

‚¨áÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*
    `,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' },
              { text: 'üìã –ö –∑–∞–¥–∞—á–∞–º', callback_data: 'menu_tasks' },
            ],
          ],
        },
      },
    );

    ctx.session.step = 'waiting_for_task_title';
  }

  private async handleTaskCreation(ctx: BotContext, taskTitle: string) {
    try {
      const task = await this.taskService.createTask({
        userId: ctx.userId,
        title: taskTitle.trim(),
        description: '',
        priority: 'MEDIUM' as any,
      });

      // Increment daily tasks counter
      await this.billingService.incrementUsage(ctx.userId, 'dailyTasks');

      // Get current user stats to increment
      const user = await this.userService.findByTelegramId(ctx.userId);
      await this.userService.updateUser(ctx.userId, {
        totalTasks: user.totalTasks + 1,
      });

      // Get current usage for display
      const usageInfo = await this.billingService.checkUsageLimit(
        ctx.userId,
        'dailyTasks',
      );

      await ctx.replyWithMarkdown(
        `
‚úÖ *–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!*

üìù *${task.title}*
‚ö° XP –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: ${task.xpReward}
üìä **–ó–∞–¥–∞—á —Å–µ–≥–æ–¥–Ω—è:** ${usageInfo.current}${usageInfo.limit === -1 ? '' : `/${usageInfo.limit}`}

–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫!
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'tasks_list' },
                { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data: 'tasks_add' },
              ],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );

      ctx.session.step = undefined;
      // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
    } catch (error) {
      this.logger.error('Error creating task:', error);
      await ctx.replyWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
      `);
      ctx.session.step = undefined;
    }
  }

  private async showTasksList(ctx: BotContext) {
    try {
      const tasks = await this.taskService.findTasksByUserId(ctx.userId);

      if (tasks.length === 0) {
        await ctx.editMessageTextWithMarkdown(`
üìã *–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç*

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!
        `);
        return;
      }

      const pendingTasks = tasks.filter(
        (task) => task.status === 'PENDING' || task.status === 'IN_PROGRESS',
      );
      const completedTasks = tasks.filter(
        (task) => task.status === 'COMPLETED',
      );

      let message = `üìã *–í–∞—à–∏ –∑–∞–¥–∞—á–∏:*\n\n`;
      message += `üîÑ **–ê–∫—Ç–∏–≤–Ω—ã—Ö:** ${pendingTasks.length}\n`;
      message += `‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö:** ${completedTasks.length}\n\n`;

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
      const taskButtons: any[] = [];

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å —Å–µ—Ä—ã–º–∏ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∞–º–∏
      pendingTasks.forEach((task) => {
        taskButtons.push([
          {
            text: `     ‚¨ú ${task.title.substring(0, 30)}${task.title.length > 30 ? '...' : ''}     `,
            callback_data: `task_complete_${task.id}`,
          },
        ]);
      });

      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (pendingTasks.length === 0) {
        taskButtons.push([
          {
            text: 'üìù –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á',
            callback_data: 'noop_separator',
          },
        ]);
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
      const extraButtons: any[] = [];

      // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ)
      if (completedTasks.length > 0) {
        extraButtons.push([
          {
            text: `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ (${completedTasks.length})`,
            callback_data: 'tasks_completed',
          },
        ]);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞—á–∏
      if (pendingTasks.length > 0 || completedTasks.length > 0) {
        extraButtons.push([
          {
            text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏',
            callback_data: 'edit_tasks_menu',
          },
        ]);
      }

      extraButtons.push([
        { text: 'üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –∑–∞–¥–∞—á', callback_data: 'menu_tasks' },
      ]);

      const keyboard = {
        inline_keyboard: [...taskButtons, ...extraButtons],
      };

      try {
        await ctx.editMessageTextWithMarkdown(message, {
          reply_markup: keyboard,
        });
      } catch (err) {
        const e = err as any;
        const desc = e?.response?.description || e?.message || '';
        if (
          typeof desc === 'string' &&
          desc.includes('message is not modified')
        ) {
          this.logger.log(
            'Edit resulted in no-op, sending a new message instead (showAllTasksList)',
          );
          await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
        } else {
          throw err;
        }
      }
    } catch (error) {
      this.logger.error('Error showing tasks list:', error);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á',
      );
    }
  }

  private async showAllTasksList(ctx: BotContext) {
    try {
      const tasks = await this.taskService.findTasksByUserId(ctx.userId);

      const pendingTasks = tasks.filter(
        (task) => task.status === 'PENDING' || task.status === 'IN_PROGRESS',
      );

      if (pendingTasks.length === 0) {
        await ctx.editMessageTextWithMarkdown(`
üìã *–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏*

–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! üéâ
        `);
        return;
      }

      let message = `üìã *–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (${pendingTasks.length}):*\n\n`;
      message += `*–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:*`;

      // Create keyboard with pending tasks first, then completed tasks marked green
      const pendingButtons = pendingTasks.map((task) => [
        {
          text: `     ${this.getPriorityEmoji(task.priority)} ${task.title.substring(0, 25)}${task.title.length > 25 ? '...' : ''}     `,
          callback_data: `task_complete_${task.id}`,
        },
      ]);

      // Gather completed tasks for display
      const completedTasks = tasks.filter((t) => t.status === 'COMPLETED');

      const completedButtons = completedTasks.map((task) => [
        {
          text: `‚úÖ ${task.title.substring(0, 35)}${task.title.length > 35 ? '...' : ''} (${task.xpReward} XP)`,
          // Use a safe view callback to avoid rerunning completion
          callback_data: `task_view_${task.id}`,
        },
      ]);

      const rowsAll: any[] = [
        ...pendingButtons,
        ...(completedButtons.length
          ? [[{ text: '‚Äî –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ ‚Äî', callback_data: 'noop_separator' }]]
          : []),
        ...completedButtons,
      ];

      if (completedButtons.length > 0) {
        rowsAll.push([
          {
            text: 'üóÇÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ',
            callback_data: 'tasks_completed',
          },
        ]);
      }
      rowsAll.push([
        { text: 'üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –∑–∞–¥–∞—á', callback_data: 'menu_tasks' },
      ]);

      const keyboard = { inline_keyboard: rowsAll };

      await ctx.editMessageTextWithMarkdown(message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      this.logger.error('Error showing all tasks list:', error);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á',
      );
    }
  }

  private async showTodayTasks(ctx: BotContext) {
    try {
      const tasks = await this.taskService.getTodayTasks(ctx.userId);

      if (tasks.length === 0) {
        try {
          await ctx.editMessageTextWithMarkdown(
            `
üìÖ *–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*

–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç! üéâ
        `,
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'tasks_add' }],
                  [
                    { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' },
                    { text: 'üìã –í—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'tasks_list' },
                  ],
                ],
              },
            },
          );
        } catch (editErr) {
          await ctx.replyWithMarkdown(
            `
üìÖ *–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*

–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç! üéâ
        `,
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'tasks_add' }],
                  [
                    { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' },
                    { text: 'üìã –í—Å–µ –∑–∞–¥–∞—á–∏', callback_data: 'tasks_list' },
                  ],
                ],
              },
            },
          );
        }
        return;
      }

      const pendingTasks = tasks.filter((task) => task.status !== 'COMPLETED');
      const completedTasks = tasks.filter(
        (task) => task.status === 'COMPLETED',
      );

      let message = `üìÖ *–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n`;
      message += `üîÑ **–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é:** ${pendingTasks.length}\n`;
      message += `‚úÖ **–í—ã–ø–æ–ª–Ω–µ–Ω–æ:** ${completedTasks.length}\n\n`;

      const rows: any[] = [];

      // –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
      rows.push(
        ...pendingTasks.slice(0, 8).map((task) => [
          {
            text: `     ${this.getPriorityEmoji(task.priority)} ${task.title.substring(0, 25)}${task.title.length > 25 ? '...' : ''}     `,
            callback_data: `task_complete_${task.id}`,
          },
        ]),
      );

      if (pendingTasks.length > 8) {
        rows.push([
          {
            text: `... –∏ –µ—â–µ ${pendingTasks.length - 8} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á`,
            callback_data: 'tasks_list_more',
          },
        ]);
      }

      // –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å –∑–µ–ª–µ–Ω—ã–º–∏ –≥–∞–ª–æ—á–∫–∞–º–∏)
      rows.push(
        ...completedTasks.slice(0, 3).map((task) => [
          {
            text: `     ‚úÖ ${task.title.substring(0, 25)}${task.title.length > 25 ? '...' : ''}     `,
            callback_data: `task_view_${task.id}`,
          },
        ]),
      );

      // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (–µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 3)
      if (completedTasks.length > 3) {
        rows.push([
          {
            text: `‚úÖ –í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ (${completedTasks.length})`,
            callback_data: 'tasks_completed',
          },
        ]);
      }

      // Add edit tasks button
      rows.push([
        {
          text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏',
          callback_data: 'edit_tasks_menu',
        },
      ]);

      rows.push([
        { text: 'üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –∑–∞–¥–∞—á', callback_data: 'menu_tasks' },
      ]);

      const keyboard = { inline_keyboard: rows };

      try {
        await ctx.editMessageTextWithMarkdown(message, {
          reply_markup: keyboard,
        });
      } catch (err) {
        const e = err as any;
        const desc = e?.response?.description || e?.message || '';
        if (
          typeof desc === 'string' &&
          (desc.includes('message is not modified') ||
            desc.includes("message can't be edited"))
        ) {
          this.logger.log(
            'Edit failed (showTodayTasks), sending a new message instead',
          );
          await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
        } else {
          throw err;
        }
      }
    } catch (error) {
      this.logger.error('Error showing today tasks:', error);
      try {
        await ctx.editMessageTextWithMarkdown(
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
        );
      } catch (editErr) {
        await ctx.replyWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è');
      }
    }
  }

  private async showCompletedTasks(ctx: BotContext) {
    try {
      const tasks = await this.taskService.findTasksByUserId(
        ctx.userId,
        'COMPLETED' as any,
      );

      if (!tasks || tasks.length === 0) {
        await ctx.editMessageTextWithMarkdown(`
üìÇ *–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏*

–ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
        `);
        return;
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—Ä—Ö—É) –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
      const sortedTasks = tasks
        .filter((task) => task.completedAt) // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ completedAt —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        .sort((a, b) => {
          const dateA = a.completedAt ? new Date(a.completedAt).getTime() : 0;
          const dateB = b.completedAt ? new Date(b.completedAt).getTime() : 0;
          return dateB - dateA;
        })
        .slice(0, 10);

      const totalCount = tasks.length;
      const showingCount = Math.min(sortedTasks.length, 10);

      let message = `üìÇ *–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏*\n\n`;
      message += `–ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö ${showingCount} –∏–∑ ${totalCount}\n\n`;

      const keyboard = {
        inline_keyboard: [
          ...sortedTasks.map((task) => [
            {
              text: `‚úÖ ${task.title.substring(0, 45)}${task.title.length > 45 ? '...' : ''}`,
              callback_data: `task_view_${task.id}`,
            },
          ]),
          [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á', callback_data: 'tasks_list' }],
        ],
      };

      await ctx.editMessageTextWithMarkdown(message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      this.logger.error('Error showing completed tasks:', error);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á',
      );
    }
  }

  private async completeTask(ctx: BotContext, taskId: string) {
    try {
      const result = await this.taskService.completeTask(taskId, ctx.userId);

      // Get current user stats to increment and check level up
      const userBefore = await this.userService.findByTelegramId(ctx.userId);

      const statsUpdate = await this.userService.updateStats(ctx.userId, {
        todayTasks: userBefore.todayTasks + 1,
        xpGained: result.xpGained,
      });

      // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –±–µ–∑ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      await ctx.answerCbQuery('‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!');

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è, –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
      const currentMessage = (ctx.callbackQuery?.message as any)?.text;
      if (currentMessage?.includes('–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏')) {
        // –ú—ã –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        await this.showAllTasksList(ctx);
      } else if (currentMessage?.includes('–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')) {
        // –ú—ã –≤ —Å–ø–∏—Å–∫–µ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        await this.showTodayTasks(ctx);
      } else {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        await this.showTodayTasks(ctx);
      }
    } catch (error) {
      this.logger.error('Error completing task:', error);
      if (error.message.includes('already completed')) {
        await ctx.answerCbQuery('‚ÑπÔ∏è –≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!');
      } else {
        await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
      }
    }
  }

  private getPriorityEmoji(priority: string): string {
    switch (priority) {
      case 'URGENT':
        return 'üî¥';
      case 'HIGH':
        return 'üü†';
      case 'MEDIUM':
        return '‚¨ú';
      case 'LOW':
        return 'üü¢';
      default:
        return '‚ö™';
    }
  }

  private async askForTimezone(ctx: BotContext) {
    // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ IP
    await ctx.replyWithMarkdown('üîç *–û–ø—Ä–µ–¥–µ–ª—è—é –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å...*');

    try {
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å IP –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é
      const ipTimezone = await this.detectTimezoneByIP();

      if (ipTimezone) {
        await ctx.replyWithMarkdown(
          `
üåç *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å*

üèôÔ∏è –†–µ–≥–∏–æ–Ω: ${ipTimezone.city || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${ipTimezone.timezone}

–í—Å–µ –≤–µ—Ä–Ω–æ?`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '‚úÖ –î–∞, –≤–µ—Ä–Ω–æ',
                    callback_data: `confirm_timezone_${ipTimezone.timezone}`,
                  },
                  {
                    text: '‚ùå –ù–µ—Ç, –≤—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é',
                    callback_data: 'manual_timezone',
                  },
                ],
              ],
            },
          },
        );
        return;
      }
    } catch (error) {
      this.logger.warn('Could not detect timezone by IP:', error);
    }

    // –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—É—á–Ω–æ–π –≤—ã–±–æ—Ä
    await this.showManualTimezoneSelection(ctx);
  }

  private async showManualTimezoneSelection(ctx: BotContext) {
    await ctx.replyWithMarkdown(
      `
üåç *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞*

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–±:`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üèôÔ∏è –í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥', callback_data: 'input_city' },
              {
                text: 'üïê –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞',
                callback_data: 'select_timezone',
              },
            ],
          ],
        },
      },
    );
  }

  private async detectTimezoneByIP(): Promise<{
    timezone: string;
    city?: string;
  } | null> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –ø–æ IP
      const fetch = (await import('node-fetch')).default;
      const response = await fetch('http://worldtimeapi.org/api/ip');

      if (!response.ok) {
        return null;
      }

      const data = await response.json();

      return {
        timezone: data.timezone,
        city: data.timezone.split('/')[1]?.replace(/_/g, ' '),
      };
    } catch (error) {
      this.logger.warn('Error detecting timezone by IP:', error);
      return null;
    }
  }

  private async handleCityInput(ctx: BotContext, cityName: string) {
    await ctx.replyWithMarkdown('üîç *–û–ø—Ä–µ–¥–µ–ª—è—é —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å...*');

    const result = await this.openaiService.getTimezoneByCity(cityName);

    if (!result) {
      await ctx.replyWithMarkdown(`
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –≥–æ—Ä–æ–¥–∞ "${cityName}"*

üìç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ:
      `);
      return;
    }

    // Save timezone and city to database
    await this.userService.updateUser(ctx.userId, {
      timezone: result.timezone,
      city: result.normalizedCity,
    });

    await ctx.replyWithMarkdown(`
‚úÖ *–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!*

üèôÔ∏è –ì–æ—Ä–æ–¥: ${result.normalizedCity}
üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${result.timezone}

–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∏!
    `);

    // Reset session step
    ctx.session.step = undefined;

    // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–º –¥–µ–π—Å—Ç–≤–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç–µ–ª —Å–¥–µ–ª–∞—Ç—å
    if (ctx.session.pendingAction === 'adding_task') {
      ctx.session.pendingAction = undefined;
      await this.startAddingTask(ctx);
    } else if (ctx.session.pendingAction === 'adding_habit') {
      ctx.session.pendingAction = undefined;
      ctx.session.step = 'adding_habit';
      await ctx.replyWithMarkdown(
        'üîÑ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:\n\n‚¨áÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∂–µ*',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    } else {
      await this.showMainMenu(ctx);
    }
  }

  // Gamification helpers
  private createProgressBar(progress: number, length: number = 10): string {
    const filled = Math.round(progress * length);
    const empty = length - filled;
    return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
  }

  // Feedback system methods
  private async checkAndShowFeedbackRequest(ctx: BotContext) {
    const user = await this.userService.findByTelegramId(ctx.userId);
    const accountAge = Date.now() - user.createdAt.getTime();
    const threeDaysInMs = 3 * 24 * 60 * 60 * 1000;

    // Show feedback request after 3 days
    if (accountAge >= threeDaysInMs && !user.feedbackGiven) {
      await this.showFeedbackRequest(ctx);
    }
  }

  private async showFeedbackSurvey(ctx: BotContext) {
    try {
      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üéØ –£–¥–æ–±—Å—Ç–≤–æ', callback_data: 'feedback_like_convenience' },
            {
              text: 'üöÄ –ú–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π',
              callback_data: 'feedback_like_features',
            },
          ],
          [
            {
              text: 'üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è',
              callback_data: 'feedback_like_gamification',
            },
            { text: 'üîß –î—Ä—É–≥–æ–µ', callback_data: 'feedback_like_other' },
          ],
        ],
      };

      const message = `
üí≠ *–ú–∏–Ω–∏-–æ–ø—Ä–æ—Å*

üëç *–ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è?*

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤ –±–æ—Ç–µ:
      `;

      // Check if this is a callback query (can edit) or command (need to reply)
      if (ctx.callbackQuery) {
        await ctx.editMessageTextWithMarkdown(message, {
          reply_markup: keyboard,
        });
      } else {
        await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
      }
    } catch (error) {
      this.logger.error('Error in showFeedbackSurvey:', error);
      await ctx.replyWithMarkdown(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      );
    }
  }

  private async showFeedbackRequest(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚≠êÔ∏è', callback_data: 'feedback_rating_5' },
          { text: 'üòä', callback_data: 'feedback_rating_4' },
          { text: 'üòê', callback_data: 'feedback_rating_3' },
          { text: 'üò†', callback_data: 'feedback_rating_2' },
        ],
        [{ text: '‚è∞ –ü–æ–∑–∂–µ', callback_data: 'feedback_later' }],
      ],
    };

    const message = `
üí≠ *–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞*

–ö–∞–∫ –≤–∞–º —Ä–∞–±–æ—Ç–∞ —Å Ticky AI? –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ!
    `;

    try {
      await ctx.editMessageTextWithMarkdown(message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      // If we can't edit the message, send a new one
      await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
    }
  }

  private async handleFeedbackRating(ctx: BotContext, rating: number) {
    await ctx.answerCbQuery();

    ctx.session.feedbackRating = rating;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üéØ –£–¥–æ–±—Å—Ç–≤–æ', callback_data: 'feedback_like_convenience' },
          { text: 'üöÄ –ú–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π', callback_data: 'feedback_like_features' },
        ],
        [
          {
            text: 'üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è',
            callback_data: 'feedback_like_gamification',
          },
          { text: 'üîß –î—Ä—É–≥–æ–µ', callback_data: 'feedback_like_other' },
        ],
      ],
    };

    await ctx.editMessageTextWithMarkdown(
      `
üëç *–ß—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è?*

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤ –±–æ—Ç–µ:
      `,
      { reply_markup: keyboard },
    );
  }

  private async handleFeedbackImprovement(
    ctx: BotContext,
    likedFeature: string,
  ) {
    await ctx.answerCbQuery();

    ctx.session.feedbackLiked = likedFeature;

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üîß –ë–æ–ª—å—à–µ —Ñ—É–Ω–∫—Ü–∏–π',
            callback_data: 'feedback_improve_features',
          },
          { text: 'üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å', callback_data: 'feedback_improve_interface' },
        ],
        [
          {
            text: '‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã',
            callback_data: 'feedback_improve_speed',
          },
          {
            text: 'üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ',
            callback_data: 'feedback_improve_custom',
          },
        ],
        [
          {
            text: '‚úÖ –í—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç',
            callback_data: 'feedback_improve_nothing',
          },
        ],
      ],
    };

    await ctx.editMessageTextWithMarkdown(
      `
üí° *–ß—Ç–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —É–ª—É—á—à–∏—Ç—å?*

–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ:
      `,
      { reply_markup: keyboard },
    );
  }

  private async completeFeedbackSurvey(ctx: BotContext, improvement: string) {
    await ctx.answerCbQuery();

    // Save feedback to database (survey-only, no rating)
    await this.userService.updateUser(ctx.userId, {
      feedbackGiven: true,
    });

    // Prepare improvement text
    const improvements = {
      convenience: 'üéØ –£–¥–æ–±—Å—Ç–≤–æ',
      features: 'üöÄ –ú–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π',
      gamification: 'üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è',
      other: 'üîß –î—Ä—É–≥–æ–µ',
    };

    const improvementText = improvements[improvement] || improvement;

    await ctx.editMessageTextWithMarkdown(
      `
‚ú® *–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ!*

–í—ã –≤—ã–±—Ä–∞–ª–∏: ${improvementText}

–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üíù

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∏ –¥–æ—Å—Ç–∏–≥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö —Ü–µ–ª–µ–π! üöÄ
    `,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
          ],
        },
      },
    );
  }

  private async completeFeedback(ctx: BotContext, improvement: string) {
    // Save feedback to database
    await this.userService.updateUser(ctx.userId, {
      feedbackGiven: true,
    });

    const ratingEmojis = ['üò†', 'üò†', 'üòê', 'üòä', '‚≠êÔ∏è'];
    const rating = ctx.session.feedbackRating || 3;
    const ratingEmoji = ratingEmojis[rating - 1];

    await ctx.replyWithMarkdown(`
üôè *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!*

${ratingEmoji} –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: ${rating}/5
üëç –ù—Ä–∞–≤–∏—Ç—Å—è: ${ctx.session.feedbackLiked || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üí° –£–ª—É—á—à–∏—Ç—å: ${improvement}

–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å! üíö
    `);

    // Clear feedback session data
    ctx.session.feedbackRating = undefined;
    ctx.session.feedbackLiked = undefined;
  }

  private async startAIChat(ctx: BotContext) {
    await ctx.editMessageTextWithMarkdown(
      `
üß† *–ò–ò –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç*

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å:
    `,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è',
                callback_data: 'ai_analyze_profile',
              },
            ],
            [
              {
                text: 'üí° –°–æ–≤–µ—Ç—ã –ø–æ –∑–∞–¥–∞—á–∞–º',
                callback_data: 'ai_task_recommendations',
              },
            ],
            [
              {
                text: 'üéØ –ü–æ–º–æ—â—å —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏',
                callback_data: 'ai_habit_help',
              },
            ],
            [
              {
                text: '‚úçÔ∏è –°–≤–æ–π –≤–æ–ø—Ä–æ—Å',
                callback_data: 'ai_custom_question',
              },
            ],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      },
    );

    // Set AI chat mode
    ctx.session.aiChatMode = true;
  }

  private async handleAIAnalyzeProfile(ctx: BotContext) {
    const user = await this.userService.findByTelegramId(ctx.userId);
    const tasks = await this.taskService.findTasksByUserId(ctx.userId);
    const completedTasks = tasks.filter((task) => task.completedAt !== null);

    const accountDays = Math.floor(
      (Date.now() - user.createdAt.getTime()) / (1000 * 60 * 60 * 24),
    );
    const completionRate =
      tasks.length > 0
        ? Math.round((completedTasks.length / tasks.length) * 100)
        : 0;

    let status = '';
    if (user.totalXp < 500) {
      status = 'üå± –ù–æ–≤–∏—á–æ–∫ - —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!';
    } else if (user.totalXp < 2000) {
      status = 'üìà –†–∞–∑–≤–∏–≤–∞–µ—Ç–µ—Å—å - —É–∂–µ –≤–∏–¥–Ω—ã –ø–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!';
    } else {
      status = 'üöÄ –û–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!';
    }

    await ctx.editMessageTextWithMarkdown(
      `
üìä *–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è*

${status}

**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚≠ê –û–ø—ã—Ç: ${user.totalXp} XP (—É—Ä–æ–≤–µ–Ω—å ${user.level})
üìÖ –° –±–æ—Ç–æ–º: ${accountDays} –¥–Ω–µ–π
üìù –ó–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ: ${tasks.length}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedTasks.length} (${completionRate}%)

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:**
${
  completionRate > 70
    ? 'üéØ –û—Ç–ª–∏—á–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Ü–µ–ª–∏.'
    : completionRate > 40
      ? 'üí™ –•–æ—Ä–æ—à–æ! –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á.'
      : 'ÔøΩ –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ - –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ –≤ –¥–µ–Ω—å!'
}
      `,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      },
    );
  }

  private async handleAIChatMessage(ctx: BotContext, message: string) {
    // –ù–µ –æ—Ç–≤–µ—á–∞—Ç—å, –µ—Å–ª–∏ —Ä–µ–∂–∏–º –ò–ò-—á–∞—Ç–∞ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
    if (!ctx.session.aiChatMode) {
      return;
    }
    try {
      // Check billing limits for AI queries
      const limitCheck = await this.billingService.checkUsageLimit(
        ctx.userId,
        'dailyAiQueries',
      );

      if (!limitCheck.allowed) {
        await ctx.replyWithMarkdown(
          limitCheck.message || 'üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ò–ò-–∑–∞–ø—Ä–æ—Å–æ–≤',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Premium',
                    callback_data: 'upgrade_premium',
                  },
                ],
                [{ text: 'üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã', callback_data: 'show_limits' }],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
        return;
      }

      // Check if this is a reminder request
      const absoluteTimePatterns = [
        /–Ω–∞–ø–æ–º–Ω–∏\s+–º–Ω–µ\s+(.+?)\s+–≤\s+(\d{1,2}):(\d{2})/i,
        /–Ω–∞–ø–æ–º–Ω–∏\s+(.+?)\s+–≤\s+(\d{1,2}):(\d{2})/i,
        /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+(.+?)\s+–≤\s+(\d{1,2}):(\d{2})/i,
        /–ø–æ—Å—Ç–∞–≤—å\s+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+(.+?)\s+–Ω–∞\s+(\d{1,2}):(\d{2})/i,
      ];

      const relativeTimePatterns = [
        /–Ω–∞–ø–æ–º–Ω–∏\s+–º–Ω–µ\s+(.+?)\s+—á–µ—Ä–µ–∑\s+(\d+)\s+–º–∏–Ω—É—Ç/i,
        /–Ω–∞–ø–æ–º–Ω–∏\s+(.+?)\s+—á–µ—Ä–µ–∑\s+(\d+)\s+–º–∏–Ω—É—Ç/i,
        /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+(.+?)\s+—á–µ—Ä–µ–∑\s+(\d+)\s+–º–∏–Ω—É—Ç/i,
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É "—á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É", "—á–µ—Ä–µ–∑ —á–∞—Å"
        /–Ω–∞–ø–æ–º–Ω–∏\s+–º–Ω–µ\s+(.+?)\s+—á–µ—Ä–µ–∑\s+–º–∏–Ω—É—Ç—É/i,
        /–Ω–∞–ø–æ–º–Ω–∏\s+(.+?)\s+—á–µ—Ä–µ–∑\s+–º–∏–Ω—É—Ç—É/i,
        /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+(.+?)\s+—á–µ—Ä–µ–∑\s+–º–∏–Ω—É—Ç—É/i,
        /–Ω–∞–ø–æ–º–Ω–∏\s+–º–Ω–µ\s+(.+?)\s+—á–µ—Ä–µ–∑\s+—á–∞—Å/i,
        /–Ω–∞–ø–æ–º–Ω–∏\s+(.+?)\s+—á–µ—Ä–µ–∑\s+—á–∞—Å/i,
        /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+(.+?)\s+—á–µ—Ä–µ–∑\s+—á–∞—Å/i,
        // –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –±–µ–∑ "–Ω–∞–ø–æ–º–Ω–∏"
        /^(.+?)\s+—á–µ—Ä–µ–∑\s+–º–∏–Ω—É—Ç—É$/i,
        /^(.+?)\s+—á–µ—Ä–µ–∑\s+—á–∞—Å$/i,
        /^(.+?)\s+—á–µ—Ä–µ–∑\s+(\d+)\s+–º–∏–Ω—É—Ç$/i,
        /^(.+?)\s+—á–µ—Ä–µ–∑\s+(\d+)\s+—á–∞—Å–∞?$/i,
      ];

      const intervalPatterns = [
        /–Ω–∞–ø–æ–º–∏–Ω–∞–π\s+(.+?)\s+–∫–∞–∂–¥—ã–µ?\s+(\d+)\s+(–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)/i,
        /–Ω–∞–ø–æ–º–Ω–∏\s+(.+?)\s+–∫–∞–∂–¥—ã–µ?\s+(\d+)\s+(–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)/i,
        /(.+?)\s+–∫–∞–∂–¥—ã–µ?\s+(\d+)\s+(–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)/i,
      ];

      // Check interval patterns first
      let reminderMatch: RegExpMatchArray | null = null;
      for (const pattern of intervalPatterns) {
        reminderMatch = message.match(pattern);
        if (reminderMatch) {
          const [, reminderText, amount, unit] = reminderMatch;
          let intervalMinutes = 0;

          if (unit.includes('–º–∏–Ω—É—Ç')) {
            intervalMinutes = parseInt(amount);
          } else if (unit.includes('—á–∞—Å')) {
            intervalMinutes = parseInt(amount) * 60;
          }

          if (intervalMinutes >= 1 && intervalMinutes <= 1440) {
            await this.handleIntervalReminder(
              ctx,
              reminderText.trim(),
              intervalMinutes,
            );
            return;
          }
        }
      }

      // Check absolute time
      for (const pattern of absoluteTimePatterns) {
        reminderMatch = message.match(pattern);
        if (reminderMatch) {
          const [, reminderText] = reminderMatch;
          await this.askForReminderTime(ctx, reminderText.trim());
          return;
        }
      }

      // Check relative time
      for (const pattern of relativeTimePatterns) {
        reminderMatch = message.match(pattern);
        if (reminderMatch) {
          const [, reminderText] = reminderMatch;
          await this.askForReminderTime(ctx, reminderText.trim());
          return;
        }
      }

      await ctx.replyWithMarkdown('ü§î *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...*');

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI Context Service
      const personalizedResponse =
        await this.aiContextService.generatePersonalizedMessage(
          ctx.userId,
          'motivation',
          `${message}. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ, –¥–æ 100 —Å–ª–æ–≤, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É.`,
        );

      // –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –ø–æ—Ö–æ–∂–µ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∑–∞–¥–∞—á—É –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

      // Increment AI usage counter
      await this.billingService.incrementUsage(ctx.userId, 'dailyAiQueries');

      // Get current usage for display
      const usageInfo = await this.billingService.checkUsageLimit(
        ctx.userId,
        'dailyAiQueries',
      );

      await ctx.replyWithMarkdown(
        `
üß† *–ò–ò –æ—Ç–≤–µ—á–∞–µ—Ç:*

${personalizedResponse}

üìä –ò–ò-–∑–∞–ø—Ä–æ—Å–æ–≤: ${usageInfo.current}${usageInfo.limit === -1 ? '' : `/${usageInfo.limit}`}
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              [{ text: 'üö™ –í—ã–π—Ç–∏ –∏–∑ –ò–ò-—á–∞—Ç–∞', callback_data: 'exit_ai_chat' }],
            ],
          },
        },
      );
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ò–ò-—á–∞—Ç–∞
      this.bot.action('exit_ai_chat', async (ctx) => {
        ctx.session.aiChatMode = false;
        await ctx.editMessageTextWithMarkdown(
          'üß† –†–µ–∂–∏–º –ò–ò-—á–∞—Ç–∞ –∑–∞–≤–µ—Ä—à—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      });
    } catch (error) {
      await ctx.replyWithMarkdown(
        `
‚ùå *–û—à–∏–±–∫–∞ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞*

–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å.
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ò–ò –º–µ–Ω—é', callback_data: 'ai_back_menu' }],
            ],
          },
        },
      );
    }
  }

  private async handleRelativeReminderRequest(
    ctx: BotContext,
    reminderText: string,
    minutesFromNow: number,
  ) {
    try {
      const user = await this.userService.findByTelegramId(ctx.userId);

      // Validate minutes
      if (minutesFromNow <= 0 || minutesFromNow > 1440) {
        // max 24 hours
        await ctx.editMessageTextWithMarkdown(`
‚ùå *–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ—Ç 1 –¥–æ 1440 –º–∏–Ω—É—Ç (–º–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞)
        `);
        return;
      }

      // Calculate reminder time
      const now = new Date();
      const reminderDate = new Date(now.getTime() + minutesFromNow * 60 * 1000);
      // Normalize to exact minute boundary (seconds and ms = 0)
      reminderDate.setSeconds(0, 0);
      // If normalization made the reminderDate <= now (possible when now has seconds > 0), push it forward by one minute
      if (reminderDate.getTime() <= now.getTime()) {
        reminderDate.setTime(reminderDate.getTime() + 60 * 1000);
      }

      // Schedule the reminder
      setTimeout(
        async () => {
          try {
            await ctx.telegram.sendMessage(
              ctx.userId,
              `üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*

${reminderText}`,
              {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [
                      {
                        text: '‚úÖ –ì–æ—Ç–æ–≤–æ',
                        callback_data: 'reminder_done',
                      },
                    ],
                    [
                      {
                        text: '‚è∞ –ß–µ—Ä–µ–∑ 15 –º–∏–Ω',
                        callback_data: 'reminder_snooze_15',
                      },
                      {
                        text: '‚è∞ –ß–µ—Ä–µ–∑ —á–∞—Å',
                        callback_data: 'reminder_snooze_60',
                      },
                    ],
                  ],
                },
              },
            );
          } catch (error) {
            this.logger.error('Error sending reminder:', error);
          }
        },
        // Use precise delay based on absolute timestamp to respect normalized seconds
        Math.max(0, reminderDate.getTime() - now.getTime()),
      );

      const timeStr = this.formatTimeWithTimezone(reminderDate, user?.timezone);

      await ctx.editMessageTextWithMarkdown(
        `‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!*

üìù **–¢–µ–∫—Å—Ç:** ${reminderText}
‚è∞ **–í—Ä–µ–º—è:** —á–µ—Ä–µ–∑ ${minutesFromNow} –º–∏–Ω—É—Ç (–≤ ${timeStr})

–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è! üîî`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º', callback_data: 'reminders' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );

      // Add XP for using reminders
      await this.userService.updateUser(ctx.userId, {
        totalXp: user.totalXp + 5,
      });
    } catch (error) {
      this.logger.error('Error creating relative reminder:', error);
      await ctx.editMessageTextWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*

–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.
      `);
    }
  }

  private async handleReminderRequest(
    ctx: BotContext,
    reminderText: string,
    hours: string,
    minutes: string,
  ) {
    try {
      const user = await this.userService.findByTelegramId(ctx.userId);

      // Check billing limits for reminders
      const limitCheck = await this.billingService.checkUsageLimit(
        ctx.userId,
        'dailyReminders',
      );

      if (!limitCheck.allowed) {
        await ctx.replyWithMarkdown(
          limitCheck.message || 'üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Premium',
                    callback_data: 'upgrade_premium',
                  },
                ],
                [{ text: 'üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã', callback_data: 'show_limits' }],
              ],
            },
          },
        );
        return;
      }

      // Validate time
      const hourNum = parseInt(hours);
      const minuteNum = parseInt(minutes);

      if (hourNum < 0 || hourNum > 23 || minuteNum < 0 || minuteNum > 59) {
        await ctx.replyWithMarkdown(`
‚ùå *–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 17:30)
        `);
        return;
      }

      // Create reminder time for today
      const now = new Date();
      const reminderDate = new Date();
      reminderDate.setHours(hourNum, minuteNum, 0, 0);

      // If time has already passed today, set for tomorrow
      if (reminderDate <= now) {
        reminderDate.setDate(reminderDate.getDate() + 1);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const savedReminder = await this.prisma.reminder.create({
        data: {
          userId: ctx.userId,
          type: 'GENERAL',
          title: reminderText,
          message: reminderText,
          scheduledTime: reminderDate,
          status: ReminderStatus.ACTIVE,
        },
      });

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ cron job –≤ NotificationService

      // Increment usage counter
      await this.billingService.incrementUsage(ctx.userId, 'dailyReminders');

      // Format time/date using user's timezone when available
      const timeStr =
        this.formatTimeWithTimezone(reminderDate, user?.timezone) ||
        `${hours.padStart(2, '0')}:${minutes.padStart(2, '0')}`;
      const dateStr = this.formatDateWithTimezone(reminderDate, user?.timezone);

      // Get current usage for display
      const usageInfo = await this.billingService.checkUsageLimit(
        ctx.userId,
        'dailyReminders',
      );

      await ctx.replyWithMarkdown(
        `
‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!*

üìù **–¢–µ–∫—Å—Ç:** ${reminderText}
‚è∞ **–í—Ä–µ–º—è:** ${timeStr}
üìÖ **–î–∞—Ç–∞:** ${dateStr}

üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è:** ${usageInfo.current}${usageInfo.limit === -1 ? '' : `/${usageInfo.limit}`} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è! üîî
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º', callback_data: 'reminders' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );

      // Add XP for using reminders
      await this.userService.updateUser(ctx.userId, {
        totalXp: user.totalXp + 5,
      });
    } catch (error) {
      this.logger.error('Error creating reminder:', error);
      await ctx.replyWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*

–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.
      `);
    }
  }

  private async handleReminderTimeInput(ctx: BotContext, timeInput: string) {
    try {
      const reminderData = ctx.session.pendingReminder;

      if (!reminderData) {
        await ctx.replyWithMarkdown('‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      const reminderText = reminderData.text;

      // Try to parse different time formats
      let hours: string | undefined, minutes: string | undefined;

      // Format: HH:MM –∏–ª–∏ H:MM
      const timeMatch = timeInput.match(/(\d{1,2}):(\d{2})/);
      if (timeMatch) {
        hours = timeMatch[1];
        minutes = timeMatch[2];
      }
      // Format: "–≤ HH" –∏–ª–∏ "–≤ HH:MM"
      else {
        const inTimeMatch = timeInput.match(/–≤\s*(\d{1,2})(?::(\d{2}))?/i);
        if (inTimeMatch) {
          hours = inTimeMatch[1];
          minutes = inTimeMatch[2] || '00';
        }
        // Format: "—á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç"
        else {
          const minutesMatch = timeInput.match(/—á–µ—Ä–µ–∑\s*(\d+)\s*–º–∏–Ω—É—Ç/i);
          if (minutesMatch) {
            const minutesToAdd = parseInt(minutesMatch[1]);
            const futureTime = new Date();
            futureTime.setMinutes(futureTime.getMinutes() + minutesToAdd);
            // Normalize to minute boundary (seconds and ms = 0)
            futureTime.setSeconds(0, 0);
            // Ensure resulting time is in the future after normalization
            if (futureTime.getTime() <= Date.now()) {
              futureTime.setTime(futureTime.getTime() + 60 * 1000);
            }
            hours = futureTime.getHours().toString();
            minutes = futureTime.getMinutes().toString().padStart(2, '0');
          }
          // Format: "—á–µ—Ä–µ–∑ X —á–∞—Å–æ–≤"
          else {
            const hoursMatch = timeInput.match(/—á–µ—Ä–µ–∑\s*(\d+)\s*—á–∞—Å/i);
            if (hoursMatch) {
              const hoursToAdd = parseInt(hoursMatch[1]);
              const futureTime = new Date();
              futureTime.setHours(futureTime.getHours() + hoursToAdd);
              hours = futureTime.getHours().toString();
              minutes = futureTime.getMinutes().toString().padStart(2, '0');
            }
            // Try to parse just numbers as HH:MM
            else if (
              timeInput.match(/^\d{1,2}$/) &&
              parseInt(timeInput) <= 23
            ) {
              hours = timeInput;
              minutes = '00';
            }
          }
        }
      }

      // If no valid time format found
      if (!hours || !minutes) {
        await ctx.editMessageTextWithMarkdown(`
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –≤—Ä–µ–º—è*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:
‚Ä¢ **17:30** - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ **–≤ 18:00** - —Å –ø—Ä–µ–¥–ª–æ–≥–æ–º
‚Ä¢ **—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç** - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ **—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞** - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ **18** - —Ü–µ–ª—ã–π —á–∞—Å (18:00)

_–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑_
        `);
        return;
      }

      // Validate parsed time
      const hourNum = parseInt(hours);
      const minuteNum = parseInt(minutes);

      if (hourNum < 0 || hourNum > 23 || minuteNum < 0 || minuteNum > 59) {
        await ctx.editMessageTextWithMarkdown(`
‚ùå *–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è*

–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 0 –¥–æ 59.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
        `);
        return;
      }

      // Clear session state
      ctx.session.pendingReminder = undefined;
      ctx.session.waitingForReminderTime = false;

      // Create the reminder
      await this.handleReminderRequest(ctx, reminderText, hours, minutes);
    } catch (error) {
      this.logger.error('Error processing reminder time input:', error);

      // Clear session state on error
      ctx.session.pendingReminder = undefined;
      ctx.session.waitingForReminderTime = false;

      // Use reply instead of edit to avoid "message can't be edited" error
      await ctx.replyWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.
      `);
    }
  }

  private async handleAudioMessage(ctx: BotContext, type: 'voice' | 'audio') {
    try {
      const emoji = type === 'voice' ? 'üé§' : 'üéµ';
      const messageType =
        type === 'voice' ? '–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' : '–∞—É–¥–∏–æ —Ñ–∞–π–ª';

      await ctx.replyWithMarkdown(`${emoji} *–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ${messageType}...*`);

      const transcribedText = await this.transcribeAudio(ctx, type);
      if (!transcribedText) {
        await ctx.replyWithMarkdown(
          `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å ${messageType}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`,
        );
        return;
      }

      // Normalize transcription for downstream matching (log the original too)
      const originalTranscribed = transcribedText;
      const normalizedTranscribed = transcribedText
        .replace(/["‚Äú‚Äù'`¬´¬ª]/g, '')
        .replace(/\s+/g, ' ')
        .trim();

      const prettyMessage = `üé§ *–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ*\n\nüéØ *–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:* "${originalTranscribed}"\n\n–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏: —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–≤—ã—á–∫—É. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞...`;

      await ctx.replyWithMarkdown(prettyMessage, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      });

      // Handle AI Chat mode for audio messages
      if (ctx.session.aiChatMode) {
        await this.handleAIChatMessage(ctx, normalizedTranscribed);
        return;
      }

      // Handle audio reminders
      if (this.isReminderRequest(normalizedTranscribed)) {
        // Log for debugging: show normalized text
        this.logger.log(
          `Audio: treating as reminder, normalizedText="${normalizedTranscribed}"`,
        );
        await this.processReminderFromText(ctx, normalizedTranscribed);
        return;
      }

      // Handle voice commands for tasks
      if (
        normalizedTranscribed.toLowerCase().includes('–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É') ||
        normalizedTranscribed.toLowerCase().includes('–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞') ||
        normalizedTranscribed.toLowerCase().includes('—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É')
      ) {
        await this.startAddingTask(ctx);
        return;
      }

      // Handle voice commands for menu
      if (
        normalizedTranscribed.toLowerCase().includes('–º–µ–Ω—é') ||
        normalizedTranscribed.toLowerCase().includes('–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') ||
        normalizedTranscribed.toLowerCase().includes('–ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é')
      ) {
        await this.showMainMenu(ctx);
        return;
      }

      // Handle voice commands for help
      if (
        normalizedTranscribed.toLowerCase().includes('–ø–æ–º–æ—â—å') ||
        normalizedTranscribed.toLowerCase().includes('—Å–ø—Ä–∞–≤–∫–∞') ||
        normalizedTranscribed.toLowerCase().includes('—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å')
      ) {
        await ctx.editMessageTextWithMarkdown(`
ü§ñ *Ticky AI - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É  
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ

*–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
üé§ "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ..." - —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
üé§ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É" - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
üé§ "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é" - –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
üé§ "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?" - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

*–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*
üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
üß† –ü–æ–æ–±—â–∞—Ç—å—Å—è —Å –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º
üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu
        `);
        return;
      }

      // Handle voice commands for feedback
      if (
        normalizedTranscribed.toLowerCase().includes('–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å') ||
        normalizedTranscribed.toLowerCase().includes('–æ—Ç–∑—ã–≤') ||
        normalizedTranscribed.toLowerCase().includes('—Ñ–∏–¥–±–µ–∫')
      ) {
        await this.showFeedbackSurvey(ctx);
        return;
      }

      // Handle voice commands for habits
      if (
        normalizedTranscribed.toLowerCase().includes('–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É') ||
        normalizedTranscribed.toLowerCase().includes('–Ω–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞') ||
        normalizedTranscribed.toLowerCase().includes('—Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É')
      ) {
        await this.startAddingHabit(ctx);
        return;
      }

      // Try to intelligently parse the transcribed text to create task/reminder/habit
      await this.analyzeAndCreateFromVoice(ctx, normalizedTranscribed);
    } catch (error) {
      this.logger.error(`${type} message processing error:`, error);
      await ctx.replyWithMarkdown(
        `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${type === 'voice' ? '–≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è' : '–∞—É–¥–∏–æ —Ñ–∞–π–ª–∞'}.`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    }
  }

  private async transcribeAudio(
    ctx: BotContext,
    type: 'voice' | 'audio',
  ): Promise<string | null> {
    try {
      // Check if message exists and has the right type
      if (!ctx.message) {
        return null;
      }

      let fileId: string;

      if (type === 'voice' && 'voice' in ctx.message) {
        fileId = ctx.message.voice.file_id;
      } else if (type === 'audio' && 'audio' in ctx.message) {
        fileId = ctx.message.audio.file_id;
      } else {
        return null;
      }

      // Get file info and download
      const fileLink = await ctx.telegram.getFileLink(fileId);
      const response = await fetch(fileLink.href);
      const buffer = await response.arrayBuffer();

      // Create a File object for OpenAI
      const fileName = type === 'voice' ? 'voice.ogg' : 'audio.mp3';
      const mimeType = type === 'voice' ? 'audio/ogg' : 'audio/mpeg';
      const file = new File([buffer], fileName, { type: mimeType });

      // Use OpenAI Whisper for transcription
      const transcription = await this.openaiService.transcribeAudio(file);

      return transcription;
    } catch (error) {
      this.logger.error(`Error transcribing ${type}:`, error);
      return null;
    }
  }

  private async processReminderFromText(ctx: BotContext, text: string) {
    const normalized = text
      .replace(/["‚Äú‚Äù'`¬´¬ª]/g, '')
      .replace(/\s+/g, ' ')
      .trim();
    this.logger.log(
      `Processing reminder from text: original="${text}" normalized="${normalized}"`,
    );

    // For debugging: log which patterns match
    try {
      const debugInterval =
        /–∫–∞–∂–¥—É—é\s+–º–∏–Ω—É—Ç—É|–∫–∞–∂–¥—ã–π\s+—á–∞—Å|–∫–∞–∂–¥—ã–µ?\s*\d+\s*(–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)/i.test(
          normalized,
        );
      const debugTime =
        /–≤\s*(\d{1,2}):(\d{2})|–≤\s*(\d{1,2})\s*—á–∞—Å|–Ω–∞\s*(\d{1,2}):(\d{2})|–∫\s*(\d{1,2}):(\d{2})|(\d{1,2}):(\d{2})/i.test(
          normalized,
        );
      const debugSimpleRel =
        /—á–µ—Ä–µ–∑\s*(–º–∏–Ω—É—Ç—É|–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–º–µ—Å—è—Ü|–≥–æ–¥|–ª–µ—Ç)/i.test(
          normalized,
        );
      const debugRelNum =
        /—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)/i.test(
          normalized,
        );
      const debugReminderWithoutTime = this.isReminderWithoutTime(normalized);
      this.logger.log(
        `Debug matches -> interval:${debugInterval} time:${debugTime} simpleRel:${debugSimpleRel} relNum:${debugRelNum} withoutTime:${debugReminderWithoutTime}`,
      );
    } catch (e) {
      this.logger.warn('Error computing debug matches', e);
    }

    // Check for interval reminders - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
    let intervalMinutes = 0;
    let intervalAmount = 0;
    let intervalUnit = '';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º "–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É", "–∫–∞–∂–¥—ã–π —á–∞—Å" –∏ —Ç.–¥.
    if (normalized.match(/–∫–∞–∂–¥—É—é\s+–º–∏–Ω—É—Ç—É/i)) {
      intervalMinutes = 1;
      intervalAmount = 1;
      intervalUnit = '–º–∏–Ω—É—Ç';
    } else if (normalized.match(/–∫–∞–∂–¥—ã–π\s+—á–∞—Å/i)) {
      intervalMinutes = 60;
      intervalAmount = 1;
      intervalUnit = '—á–∞—Å';
    } else {
      // Check for interval reminders (–∫–∞–∂–¥—ã–µ X –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤)
      const intervalMatch = normalized.match(
        /–∫–∞–∂–¥—ã–µ?\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)/i,
      );

      if (intervalMatch) {
        intervalAmount = parseInt(intervalMatch[1]);
        intervalUnit = intervalMatch[2].toLowerCase();

        if (intervalUnit.includes('–º–∏–Ω—É—Ç')) {
          intervalMinutes = intervalAmount;
        } else if (intervalUnit.includes('—á–∞—Å')) {
          intervalMinutes = intervalAmount * 60;
        }
      }
    }

    if (intervalMinutes > 0) {
      // Validate interval (minimum 1 minute, maximum 24 hours)
      if (intervalMinutes < 1 || intervalMinutes > 1440) {
        await ctx.replyWithMarkdown(`
‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª*

–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –º–∏–Ω—É—Ç—ã –¥–æ 24 —á–∞—Å–æ–≤.
        `);
        return;
      }

      // Extract reminder text
      const reminderText = normalized
        .replace(/–Ω–∞–ø–æ–º–Ω–∏\s*(–º–Ω–µ)?/gi, '')
        .replace(/–Ω–∞–ø–æ–º–Ω—é\s*(—Ç–µ–±–µ|–≤–∞–º)?/gi, '')
        .replace(/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/gi, '')
        .replace(/–ø–æ—Å—Ç–∞–≤—å/gi, '')
        .replace(/—É—Å—Ç–∞–Ω–æ–≤–∏/gi, '')
        .replace(/–∫–∞–∂–¥—É—é\s+–º–∏–Ω—É—Ç—É/gi, '')
        .replace(/–∫–∞–∂–¥—ã–π\s+—á–∞—Å/gi, '')
        .replace(/–∫–∞–∂–¥—ã–µ?\s*\d+\s*(?:–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)/gi, '')
        .trim();

      if (!reminderText || reminderText.length < 2) {
        await ctx.replyWithMarkdown(`
ü§î *–û —á–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–µ ${intervalAmount} ${intervalUnit}?*

–í—ã —É–∫–∞–∑–∞–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–ª–∏, –æ —á–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å.

*–ü—Ä–∏–º–µ—Ä:* "–Ω–∞–ø–æ–º–∏–Ω–∞–π –ø–∏—Ç—å –≤–æ–¥—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"
        `);
        return;
      }

      await this.handleIntervalReminder(ctx, reminderText, intervalMinutes);
      return;
    }

    // Extract time and reminder text from voice/text input
    const timeMatch =
      normalized.match(/–≤\s*(\d{1,2}):(\d{2})/i) ||
      normalized.match(
        /–≤\s*(\d{1,2})\s*—á–∞—Å(?:–∞|–æ–≤)?(?:\s*(\d{2})\s*–º–∏–Ω—É—Ç)?/i,
      ) ||
      normalized.match(/–Ω–∞\s*(\d{1,2}):(\d{2})/i) ||
      normalized.match(/–∫\s*(\d{1,2}):(\d{2})/i) ||
      normalized.match(/(\d{1,2}):(\d{2})/i); // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú

    if (timeMatch) {
      const hours = timeMatch[1];
      const minutes = timeMatch[2] || '00';
      this.logger.log(`Time extracted: ${hours}:${minutes}`);

      // Extract reminder text by removing time references and trigger words
      const reminderText = normalized
        .replace(/–Ω–∞–ø–æ–º–Ω–∏\s*(–º–Ω–µ)?/gi, '')
        .replace(/–Ω–∞–ø–æ–º–Ω—é\s*(—Ç–µ–±–µ|–≤–∞–º)?/gi, '')
        .replace(/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/gi, '')
        .replace(/–ø–æ—Å—Ç–∞–≤—å/gi, '')
        .replace(/—É—Å—Ç–∞–Ω–æ–≤–∏/gi, '')
        .replace(/–≤\s*\d{1,2}:?\d{0,2}\s*(?:—á–∞—Å|–º–∏–Ω—É—Ç)?(?:–∞|–æ–≤)?/gi, '')
        .replace(/–Ω–∞\s*\d{1,2}:?\d{0,2}/gi, '')
        .replace(/–∫\s*\d{1,2}:?\d{0,2}/gi, '')
        .replace(/\d{1,2}:\d{2}/g, '') // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
        .replace(/(—É—Ç—Ä–æ–º|–¥–Ω–µ–º|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é)/gi, '') // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏ –¥–Ω—è
        .trim();

      this.logger.log(`Reminder text extracted: "${reminderText}"`);

      // If no text left, ask for clarification
      if (!reminderText || reminderText.length < 2) {
        await ctx.replyWithMarkdown(`
ü§î *–û —á–µ–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å?*

–í—ã —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º—è ${hours}:${minutes}, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–ª–∏, –æ —á–µ–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å.

*–ü—Ä–∏–º–µ—Ä:* "–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –≤ 17:30"
        `);
        return;
      }

      await this.handleReminderRequest(ctx, reminderText, hours, minutes);
      return;
    }

    // Handle relative time (—á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤/–¥–Ω–µ–π/–Ω–µ–¥–µ–ª—å/–º–µ—Å—è—Ü–µ–≤/–ª–µ—Ç)
    // Support both numeric forms (—á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç) and natural single-unit forms (—á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É, —á–µ—Ä–µ–∑ —á–∞—Å)
    const simpleRelativeMatch = normalized.match(
      /—á–µ—Ä–µ–∑\s*(?:([\d]+|[–∞-—è—ë]+)\s*)?(–º–∏–Ω—É—Ç—É|–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–º–µ—Å—è—Ü|–≥–æ–¥|–ª–µ—Ç)/i,
    );

    if (simpleRelativeMatch) {
      // If user said a number word like '–æ–¥–Ω—É' or '–¥–≤–µ', simpleRelativeMatch[1] may contain it
      let amount = 1;
      const possibleNum = simpleRelativeMatch[1];
      const unit = simpleRelativeMatch[2].toLowerCase();
      if (possibleNum) {
        const parsed = this.parseRussianNumber(possibleNum);
        if (parsed !== null) {
          amount = parsed;
        }
      }

      const now = new Date();
      let targetDate = new Date(now);

      if (unit.includes('–º–∏–Ω—É—Ç')) {
        targetDate.setMinutes(targetDate.getMinutes() + amount);
      } else if (unit.includes('—á–∞—Å')) {
        targetDate.setHours(targetDate.getHours() + amount);
      } else if (
        unit.includes('–¥–µ–Ω—å') ||
        unit.includes('–¥–Ω—è') ||
        unit.includes('–¥–Ω–µ–π')
      ) {
        targetDate.setDate(targetDate.getDate() + amount);
      } else if (unit.includes('–Ω–µ–¥–µ–ª')) {
        targetDate.setDate(targetDate.getDate() + amount * 7);
      } else if (unit.includes('–º–µ—Å—è—Ü')) {
        targetDate.setMonth(targetDate.getMonth() + amount);
      } else if (unit.includes('–≥–æ–¥') || unit.includes('–ª–µ—Ç')) {
        targetDate.setFullYear(targetDate.getFullYear() + amount);
      }

      const hours = targetDate.getHours().toString().padStart(2, '0');
      const minutes = targetDate.getMinutes().toString().padStart(2, '0');

      const reminderText = normalized
        .replace(/–Ω–∞–ø–æ–º–Ω–∏\s*(–º–Ω–µ)?/gi, '')
        .replace(/–Ω–∞–ø–æ–º–Ω—é\s*(—Ç–µ–±–µ|–≤–∞–º)?/gi, '')
        .replace(
          /—á–µ—Ä–µ–∑\s*(?:–º–∏–Ω—É—Ç—É|–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–º–µ—Å—è—Ü|–≥–æ–¥|–ª–µ—Ç)/gi,
          '',
        )
        .trim();

      // For single-unit (1) relative times we can treat short durations (<1 day) as normal reminders
      if (
        amount > 0 &&
        (unit.includes('–¥–µ–Ω—å') ||
          unit.includes('–Ω–µ–¥–µ–ª') ||
          unit.includes('–º–µ—Å—è—Ü') ||
          unit.includes('–≥–æ–¥') ||
          unit.includes('–ª–µ—Ç'))
      ) {
        await this.handleLongTermReminder(
          ctx,
          reminderText,
          targetDate,
          amount,
          unit,
        );
        return;
      }

      await this.handleReminderRequest(ctx, reminderText, hours, minutes);
      return;
    }

    const relativeMatch = normalized.match(
      /—á–µ—Ä–µ–∑\s*([\d]+|[–∞-—è—ë]+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)/i,
    );

    if (relativeMatch) {
      // Parse numeric word or digits
      const rawAmount = relativeMatch[1];
      let amount = parseInt(rawAmount);
      if (isNaN(amount)) {
        const parsed = this.parseRussianNumber(rawAmount);
        amount = parsed === null ? 1 : parsed;
      }
      const unit = relativeMatch[2].toLowerCase();

      const now = new Date();
      let targetDate = new Date(now);

      // Calculate target date based on unit
      if (unit.includes('–º–∏–Ω—É—Ç')) {
        targetDate.setMinutes(targetDate.getMinutes() + amount);
      } else if (unit.includes('—á–∞—Å')) {
        targetDate.setHours(targetDate.getHours() + amount);
      } else if (
        unit.includes('–¥–µ–Ω—å') ||
        unit.includes('–¥–Ω—è') ||
        unit.includes('–¥–Ω–µ–π')
      ) {
        targetDate.setDate(targetDate.getDate() + amount);
      } else if (unit.includes('–Ω–µ–¥–µ–ª')) {
        targetDate.setDate(targetDate.getDate() + amount * 7);
      } else if (unit.includes('–º–µ—Å—è—Ü')) {
        targetDate.setMonth(targetDate.getMonth() + amount);
      } else if (unit.includes('–≥–æ–¥') || unit.includes('–ª–µ—Ç')) {
        targetDate.setFullYear(targetDate.getFullYear() + amount);
      }

      const hours = targetDate.getHours().toString().padStart(2, '0');
      const minutes = targetDate.getMinutes().toString().padStart(2, '0');

      const reminderText = normalized
        .replace(/–Ω–∞–ø–æ–º–Ω–∏\s*(–º–Ω–µ)?/gi, '')
        .replace(/–Ω–∞–ø–æ–º–Ω—é\s*(—Ç–µ–±–µ|–≤–∞–º)?/gi, '')
        .replace(
          /—á–µ—Ä–µ–∑\s*\d+\s*(?:–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)(?:–∞|–æ–≤)?/gi,
          '',
        )
        .trim();

      // If it's more than a day, we need special handling
      if (
        amount > 0 &&
        (unit.includes('–¥–µ–Ω—å') ||
          unit.includes('–Ω–µ–¥–µ–ª') ||
          unit.includes('–º–µ—Å—è—Ü') ||
          unit.includes('–≥–æ–¥') ||
          unit.includes('–ª–µ—Ç'))
      ) {
        await this.handleLongTermReminder(
          ctx,
          reminderText,
          targetDate,
          amount,
          unit,
        );
        return;
      }

      await this.handleReminderRequest(ctx, reminderText, hours, minutes);
      return;
    }

    // Handle specific time expressions (–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ, –∑–∞–≤—Ç—Ä–∞, –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞, etc.)
    const specificTimeMatch = this.parseSpecificTimeExpressions(normalized);
    if (specificTimeMatch) {
      const { targetDate, reminderText } = specificTimeMatch;

      // Default to 9:00 AM for date-only reminders
      targetDate.setHours(9, 0, 0, 0);

      await this.handleLongTermReminder(
        ctx,
        reminderText,
        targetDate,
        0,
        'specific',
      );
      return;
    }

    // Check if this is a reminder request without time
    const isReminderWithoutTime = this.isReminderWithoutTime(normalized);
    if (isReminderWithoutTime) {
      // Extract reminder text by removing trigger words
      const reminderText = text
        .replace(/–Ω–∞–ø–æ–º–Ω–∏\s*(–º–Ω–µ)?/gi, '')
        .replace(/–Ω–∞–ø–æ–º–Ω—é\s*(–º–Ω–µ)?/gi, '')
        .replace(/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ/gi, '')
        .replace(/–ø–æ—Å—Ç–∞–≤—å/gi, '')
        .replace(/—É—Å—Ç–∞–Ω–æ–≤–∏/gi, '')
        .replace(/–Ω—É–∂–Ω–æ.*–Ω–∞–ø–æ–º–Ω–∏—Ç—å/gi, '')
        .replace(/–Ω–µ –∑–∞–±—ã—Ç—å/gi, '')
        .trim();

      if (reminderText && reminderText.length > 1) {
        // Store reminder text in session and ask for time
        ctx.session.pendingReminder = {
          text: reminderText,
          originalText: text,
        };
        ctx.session.waitingForReminderTime = true;

        await ctx.replyWithMarkdown(`
‚è∞ *–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?*

–û —á–µ–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å: "${reminderText}"

*–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è:*
‚Ä¢ –í –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è: "17:30", "–≤ 18:00"  
‚Ä¢ –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è: "—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç", "—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"

_–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ_
        `);
        return;
      }
    }

    // If no specific time found and not a clear reminder request, ask for clarification
    await ctx.replyWithMarkdown(`
ü§î *–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
‚Ä¢ "–Ω–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –≤ 17:30"
‚Ä¢ "–Ω–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç"
    `);
  }

  private isReminderWithoutTime(text: string): boolean {
    const reminderPatterns = [
      /–Ω–∞–ø–æ–º–Ω–∏(?:\s+–º–Ω–µ)?\s+.+/i,
      /–Ω–∞–ø–æ–º–Ω—é(?:\s+–º–Ω–µ)?\s+.+/i,
      /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+.+/i,
      /–ø–æ—Å—Ç–∞–≤—å\s+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+.+/i,
      /—É—Å—Ç–∞–Ω–æ–≤–∏\s+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+.+/i,
      /–Ω—É–∂–Ω–æ\s+–Ω–∞–ø–æ–º–Ω–∏—Ç—å\s+.+/i,
      /–Ω–µ\s+–∑–∞–±—ã—Ç—å\s+.+/i,
    ];

    // Check if it's a reminder request but doesn't have time indicators
    const hasReminderTrigger = reminderPatterns.some((pattern) =>
      pattern.test(text),
    );

    // Extended time indicators including new patterns
    // Also detect single-unit relative forms like "—á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É" or "—á–µ—Ä–µ–∑ —á–∞—Å"
    const hasTimeIndicator =
      /–≤\s*\d{1,2}:?\d{0,2}|–Ω–∞\s*\d{1,2}:?\d{0,2}|–∫\s*\d{1,2}:?\d{0,2}|—á–µ—Ä–µ–∑\s*(?:\d+|–æ–¥–Ω—É|–æ–¥–∏–Ω|–º–∏–Ω—É—Ç—É|–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)\s*(?:$|\b)|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–Ω–∞\s*—Å–ª–µ–¥—É—é—â–µ–π\s*–Ω–µ–¥–µ–ª–µ|–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–º–µ—Å—è—Ü–µ|–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–≥–æ–¥—É|–Ω–∞\s*—ç—Ç–æ–π\s*–Ω–µ–¥–µ–ª–µ|–≤\s*—ç—Ç–æ–º\s*–º–µ—Å—è—Ü–µ/i.test(
        text,
      );

    return hasReminderTrigger && !hasTimeIndicator;
  }

  /**
   * Parse small Russian number words into integers.
   * Returns null if not recognized.
   */
  private parseRussianNumber(word: string): number | null {
    if (!word) return null;
    const w = word.toString().toLowerCase().trim();
    const map: Record<string, number> = {
      '0': 0,
      '1': 1,
      '2': 2,
      '3': 3,
      '4': 4,
      '5': 5,
      '6': 6,
      '7': 7,
      '8': 8,
      '9': 9,
      '10': 10,
      –æ–¥–∏–Ω: 1,
      –æ–¥–Ω–∞: 1,
      –æ–¥–Ω—É: 1,
      –¥–≤–∞: 2,
      –¥–≤–µ: 2,
      —Ç—Ä–∏: 3,
      —á–µ—Ç—ã—Ä–µ: 4,
      –ø—è—Ç—å: 5,
      —à–µ—Å—Ç—å: 6,
      —Å–µ–º—å: 7,
      –≤–æ—Å–µ–º—å: 8,
      –¥–µ–≤—è—Ç—å: 9,
      –¥–µ—Å—è—Ç—å: 10,
      –Ω–µ—Å–∫–æ–ª—å–∫–æ: 3,
      –ø–∞—Ä—É: 2,
      –ø–∞—Ä–∞: 2,
    };

    if (map[w] !== undefined) return map[w];

    // Try extracting digits
    const digits = w.match(/\d+/);
    if (digits) return parseInt(digits[0], 10);

    return null;
  }

  /*
  –õ–û–ì–ò–ö–ê –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô:
  
  üîî –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø (isReminderRequest) - —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º:
  ‚úÖ "–Ω–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å —Ö–ª–µ–± –≤ 15:30"
  ‚úÖ "–≤–µ—á–µ—Ä–æ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –≤ 23:00" 
  ‚úÖ "–∑–∞–≤—Ç—Ä–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –≤ 14:00"
  ‚úÖ "–≤ 18:30 –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏"
  ‚úÖ "—á–µ—Ä–µ–∑ —á–∞—Å –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É"
  ‚úÖ "—Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"
  
  üìã –ó–ê–î–ê–ß–ò (isTaskRequest) - —Å–æ–æ–±—â–µ–Ω–∏—è –ë–ï–ó –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:
  ‚úÖ "–∑–∞–≤—Ç—Ä–∞ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ" (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
  ‚úÖ "–∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã"
  ‚úÖ "–ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ"
  ‚úÖ "–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç—á–µ—Ç"
  ‚úÖ "—Å–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
  
  ü§ñ –ò–ò –ß–ê–¢ (isGeneralChatMessage) - –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:
  ‚úÖ "–ø—Ä–∏–≤–µ—Ç"
  ‚úÖ "–∫–∞–∫ –¥–µ–ª–∞?"
  ‚úÖ "—á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å?"
  ‚úÖ "–ø–æ—Å–æ–≤–µ—Ç—É–π –º–Ω–µ"
  
  ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –î–õ–Ø –ò–ò:
  ‚ùå –õ—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (–≥–ª–∞–≥–æ–ª—ã)
  ‚ùå –õ—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º
  ‚ùå –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
  */

  private isReminderRequest(text: string): boolean {
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`[DEBUG] Checking if text is reminder: "${text}"`);

    // –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞!
    const intervalReminderPatterns = [
      /–∫–∞–∂–¥—É—é\s+–º–∏–Ω—É—Ç—É/i,
      /–∫–∞–∂–¥—ã–π\s+—á–∞—Å/i,
      /–∫–∞–∂–¥—ã–µ\s*\d+\s*(–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)/i,
      /(–Ω–∞–ø–æ–º–Ω–∏|–Ω–∞–ø–æ–º–∏–Ω–∞–π|–Ω–∞–ø–æ–º–Ω—é).*–∫–∞–∂–¥—É—é\s+–º–∏–Ω—É—Ç—É/i,
      /(–Ω–∞–ø–æ–º–Ω–∏|–Ω–∞–ø–æ–º–∏–Ω–∞–π|–Ω–∞–ø–æ–º–Ω—é).*–∫–∞–∂–¥—ã–π\s+—á–∞—Å/i,
      /(–Ω–∞–ø–æ–º–Ω–∏|–Ω–∞–ø–æ–º–∏–Ω–∞–π|–Ω–∞–ø–æ–º–Ω—é).*–∫–∞–∂–¥—ã–µ\s*\d+\s*(–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤)/i,
      /.*–∫–∞–∂–¥—É—é\s+–º–∏–Ω—É—Ç—É.*(–Ω–∞–ø–æ–º–Ω–∏|–Ω–∞–ø–æ–º–∏–Ω–∞–π|–Ω–∞–ø–æ–º–Ω—é)/i,
      /.*–∫–∞–∂–¥—ã–π\s+—á–∞—Å.*(–Ω–∞–ø–æ–º–Ω–∏|–Ω–∞–ø–æ–º–∏–Ω–∞–π|–Ω–∞–ø–æ–º–Ω—é)/i,
      /.*–∫–∞–∂–¥—ã–µ\s*\d+\s*(–º–∏–Ω—É—Ç|—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤).*(–Ω–∞–ø–æ–º–Ω–∏|–Ω–∞–ø–æ–º–∏–Ω–∞–π|–Ω–∞–ø–æ–º–Ω—é)/i,
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
    const hasIntervalReminder = intervalReminderPatterns.some((pattern) =>
      pattern.test(text),
    );

    if (hasIntervalReminder) {
      return true;
    }

    // Also consider simple relative phrases like "—á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É", "—á–µ—Ä–µ–∑ –æ–¥–Ω—É –º–∏–Ω—É—Ç—É", "—á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É", "—á–µ—Ä–µ–∑ —á–∞—Å" as reminders
    const simpleRelativeReminder =
      /—á–µ—Ä–µ–∑\s*(?:\d+|–æ–¥–Ω—É|–æ–¥–∏–Ω)?\s*(?:–º–∏–Ω—É—Ç—É|–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)/i;
    if (simpleRelativeReminder.test(text)) {
      return true;
    }

    // –ü—Ä—è–º—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ —Å–ª–æ–≤–æ–º "–Ω–∞–ø–æ–º–Ω–∏" –∏ "–Ω–∞–ø–æ–º–Ω—é"
    const explicitReminderPatterns = [
      // –ü—Ä–æ—Å—Ç—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
      /^–Ω–∞–ø–æ–º–Ω–∏\s+(.+)/i, // "–Ω–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"
      /^–Ω–∞–ø–æ–º–Ω—é\s+(.+)/i, // "–Ω–∞–ø–æ–º–Ω—é –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ"
      /^–ø–æ—Å—Ç–∞–≤—å\s+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+(.+)/i, // "–ø–æ—Å—Ç–∞–≤—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫—É–ø–∏—Ç—å —Ö–ª–µ–±"
      /^—É—Å—Ç–∞–Ω–æ–≤–∏\s+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+(.+)/i, // "—É—Å—Ç–∞–Ω–æ–≤–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–æ–º"
      /^—Å–æ–∑–¥–∞–π\s+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+(.+)/i, // "—Å–æ–∑–¥–∞–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω"

      // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
      /–Ω–∞–ø–æ–º–Ω–∏.*–≤\s*(\d{1,2}):(\d{2})/i,
      /–Ω–∞–ø–æ–º–Ω–∏.*–≤\s*(\d{1,2})\s*—á–∞—Å/i,
      /–Ω–∞–ø–æ–º–Ω–∏.*—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)/i,
      /–Ω–∞–ø–æ–º–Ω—é.*–≤\s*(\d{1,2}):(\d{2})/i,
      /–Ω–∞–ø–æ–º–Ω—é.*–≤\s*(\d{1,2})\s*—á–∞—Å/i,
      /–Ω–∞–ø–æ–º–Ω—é.*—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)/i,
      /–Ω–∞–ø–æ–º–Ω–∏.*(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–Ω–∞\s*—Å–ª–µ–¥—É—é—â–µ–π\s*–Ω–µ–¥–µ–ª–µ|–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–º–µ—Å—è—Ü–µ|–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–≥–æ–¥—É)/i,
      /–Ω–∞–ø–æ–º–Ω—é.*(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–Ω–∞\s*—Å–ª–µ–¥—É—é—â–µ–π\s*–Ω–µ–¥–µ–ª–µ|–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–º–µ—Å—è—Ü–µ|–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–≥–æ–¥—É)/i,
      /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.*–≤\s*(\d{1,2}):(\d{2})/i,
      /–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.*—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)/i,
      /–ø–æ—Å—Ç–∞–≤—å.*–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.*–≤\s*(\d{1,2}):(\d{2})/i,
      /—É—Å—Ç–∞–Ω–æ–≤–∏.*–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.*–≤\s*(\d{1,2}):(\d{2})/i,
      /–ø–æ—Å—Ç–∞–≤—å.*–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.*—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)/i,
      /—É—Å—Ç–∞–Ω–æ–≤–∏.*–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.*—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)/i,
    ];

    // –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
    const naturalTimePatterns = [
      // –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º
      /(–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥–∞|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü–∞|—Å—É–±–±–æ—Ç–∞|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ).*–≤\s*(\d{1,2}):(\d{2})/i, // "–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 14:00"
      /(–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥–∞|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü–∞|—Å—É–±–±–æ—Ç–∞|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ).*–≤\s*(\d{1,2})\s*—á–∞—Å/i, // "–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 14 —á–∞—Å–æ–≤"
      /–≤\s*(–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥–∞|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü–∞|—Å—É–±–±–æ—Ç–∞|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ).*–≤\s*(\d{1,2}):(\d{2})/i, // "–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 14:00"
      /–≤\s*(–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥–∞|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü–∞|—Å—É–±–±–æ—Ç–∞|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ).*–≤\s*(\d{1,2})\s*—á–∞—Å/i, // "–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 14 —á–∞—Å–æ–≤"

      // –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º (—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã)
      /(—É—Ç—Ä–æ–º|–¥–Ω–µ–º|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é|—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞).*–≤\s*(\d{1,2}):(\d{2})/i, // "–≤–µ—á–µ—Ä–æ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ 23:00"
      /(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è).*–≤\s*(\d{1,2}):(\d{2})/i, // "–∑–∞–≤—Ç—Ä–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤ 15:30"
      /–≤\s*(\d{1,2}):(\d{2}).*(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è)/i, // "–≤ 15:30 –ø–æ–∑–≤–æ–Ω–∏—Ç—å"

      // –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å —á–∞—Å–∞–º–∏ –±–µ–∑ –º–∏–Ω—É—Ç
      /(—É—Ç—Ä–æ–º|–¥–Ω–µ–º|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é|—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞).*–≤\s*(\d{1,2})\s*—á–∞—Å/i, // "–≤–µ—á–µ—Ä–æ–º –≤ 8 —á–∞—Å–æ–≤"
      /–≤\s*(\d{1,2})\s*—á–∞—Å.*(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è)/i, // "–≤ 8 —á–∞—Å–æ–≤ –ø–æ–∑–≤–æ–Ω–∏—Ç—å"

      // –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ
      /—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç).*(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è)/i, // "—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –ø–æ–∑–≤–æ–Ω–∏—Ç—å"
      /(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è).*—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)/i, // "–ø–æ–∑–≤–æ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü"

      // –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
      /(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞).*(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è)/i, // "–∑–∞–≤—Ç—Ä–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç—å"
      /(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è).*(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)/i, // "–ø–æ–∑–≤–æ–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞"
      /–Ω–∞\s*—Å–ª–µ–¥—É—é—â–µ–π\s*–Ω–µ–¥–µ–ª–µ.*(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è)/i, // "–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å"
      /(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è).*–Ω–∞\s*—Å–ª–µ–¥—É—é—â–µ–π\s*–Ω–µ–¥–µ–ª–µ/i, // "–ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ"
      /–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–º–µ—Å—è—Ü–µ.*(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è)/i, // "–≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å"
      /(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è).*–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–º–µ—Å—è—Ü–µ/i, // "–ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ"

      // –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º - —Å–¥–µ–ª–∞–µ–º –∏—Ö –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º–∏
      /.*–≤\s*(\d{1,2}):(\d{2}).*[–∞-—è—ë]/i, // –ª—é–±–æ–π —Ç–µ–∫—Å—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ —Ä—É—Å—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏
      /.*(\d{1,2}):(\d{2}).*[–∞-—è—ë]/i, // –ª—é–±–æ–π —Ç–µ–∫—Å—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º –∏ —Ä—É—Å—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏ (–±–µ–∑ "–≤")
      /(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è).*(\d{1,2}):(\d{2})/i, // "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ 23:00"
      /(\d{1,2}):(\d{2}).*(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è)/i, // "23:00 –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ"
      /(—É—Ç—Ä–æ–º|–¥–Ω–µ–º|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é).*(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å|–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å|–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å|–æ—Ç–Ω–µ—Å—Ç–∏|–ø—Ä–∏–Ω–µ—Å—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å|–ø–æ–∫–∞–∑–∞—Ç—å|—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å|–∑–∞–ø–ª–∞—Ç–∏—Ç—å|–æ–ø–ª–∞—Ç–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|–ø—Ä–æ–≤–µ—Ä–∏—Ç—å|–∏–∑—É—á–∏—Ç—å|–ø—Ä–æ—á–∏—Ç–∞—Ç—å|–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å|–ø–æ—á–∏—Å—Ç–∏—Ç—å|—É–±—Ä–∞—Ç—å|–ø–æ–º—ã—Ç—å|–ø–æ—Å—Ç–∏—Ä–∞—Ç—å|–ø–æ–≥–ª–∞–¥–∏—Ç—å|—Å—Ö–æ–¥–∏—Ç—å|—Å—ä–µ–∑–¥–∏—Ç—å|–¥–æ–π—Ç–∏|–¥–æ–±—Ä–∞—Ç—å—Å—è|–¥–æ–µ—Ö–∞—Ç—å|–ø—Ä–∏–µ—Ö–∞—Ç—å|–ø—Ä–∏–π—Ç–∏|–∑–∞–µ—Ö–∞—Ç—å|–∑–∞–π—Ç–∏|–∑–∞–≤–µ—Ä–Ω—É—Ç—å|–∑–∞—Å–∫–æ—á–∏—Ç—å|–Ω–∞–≤–µ—Å—Ç–∏—Ç—å|–ø–æ—Å–µ—Ç–∏—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è|—É–≤–∏–¥–µ—Ç—å—Å—è|–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å|–æ–±—Å—É–¥–∏—Ç—å|—Ä–µ—à–∏—Ç—å|–∑–∞–∫–æ–Ω—á–∏—Ç—å|–∑–∞–≤–µ—Ä—à–∏—Ç—å|–Ω–∞—á–∞—Ç—å|–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å|–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å|–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å|–æ—Ç–∫—Ä—ã—Ç—å|–∑–∞–∫—Ä—ã—Ç—å|–≤–∫–ª—é—á–∏—Ç—å|–≤—ã–∫–ª—é—á–∏—Ç—å|–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å|—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å|—Å–∫–∞—á–∞—Ç—å|–∑–∞–≥—Ä—É–∑–∏—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è|–≤—ã–π—Ç–∏|—É–π—Ç–∏|–≤–µ—Ä–Ω—É—Ç—å—Å—è|–æ—Ç–¥–æ—Ö–Ω—É—Ç—å|–ø–æ—Å–ø–∞—Ç—å|–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å|—Å–æ–±—Ä–∞—Ç—å—Å—è|–æ–¥–µ—Ç—å—Å—è|–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è).*(\d{1,2}):(\d{2})/i, // "–≤–µ—á–µ—Ä–æ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ 23:00"
    ];

    const hasExplicitReminder = explicitReminderPatterns.some((pattern) =>
      pattern.test(text),
    );
    const hasNaturalTime = naturalTimePatterns.some((pattern) =>
      pattern.test(text),
    );

    const isReminder = hasExplicitReminder || hasNaturalTime;
    console.log(
      `[DEBUG] isReminderRequest result: ${isReminder} (explicit: ${hasExplicitReminder}, natural: ${hasNaturalTime})`,
    );

    return isReminder;
  }

  private isVerbByEnding(word: string): boolean {
    if (!word || word.length < 3) return false;

    const lowerWord = word.toLowerCase().trim();

    // –ò–Ω—Ñ–∏–Ω–∏—Ç–∏–≤—ã (—á—Ç–æ –¥–µ–ª–∞—Ç—å?)
    const infinitiveEndings = [
      '—Ç—å',
      '—Ç–∏',
      '—á—å', // –¥–µ–ª–∞—Ç—å, –∏–¥—Ç–∏, –ø–µ—á—å
      '–∏—Ç—å', // –≥–æ–≤–æ—Ä–∏—Ç—å, –ª—é–±–∏—Ç—å, —Å—Ç—Ä–æ–∏—Ç—å
      '–µ—Ç—å', // —Å–º–æ—Ç—Ä–µ—Ç—å, —Å–∏–¥–µ—Ç—å, –ª–µ—Ç–µ—Ç—å
      '–∞—Ç—å', // –∏–≥—Ä–∞—Ç—å, —á–∏—Ç–∞—Ç—å, —Å–ª—É—à–∞—Ç—å
      '—è—Ç—å', // —Å—Ç–æ—è—Ç—å, –±–æ—è—Ç—å—Å—è, —Å–º–µ—è—Ç—å—Å—è
      '–æ—Ç—å', // –∫–æ–ª–æ—Ç—å, –ø–æ–ª–æ—Ç—å, –º–æ–ª–æ—Ç—å
      '—É—Ç—å', // —Ç—è–Ω—É—Ç—å, –≥–Ω—É—Ç—å, —Å–≥–∏–±–Ω—É—Ç—å
      '—Å—Ç–∏', // –Ω–µ—Å—Ç–∏, –≤–µ–∑—Ç–∏, —Ä–∞—Å—Ç–∏
      '–∑—Ç–∏', // –ø–æ–ª–∑—Ç–∏, –≥—Ä—ã–∑—Ç–∏
      '—Å—Ç—å', // –µ—Å—Ç—å, –∫–ª–∞—Å—Ç—å
    ];

    // –ì–ª–∞–≥–æ–ª—ã 1-–≥–æ –ª–∏—Ü–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ (—è —á—Ç–æ –¥–µ–ª–∞—é?)
    const firstPersonEndings = [
      '—É',
      '—é', // –¥–µ–ª–∞—é, —á–∏—Ç–∞—é, –ø–∏—à—É
      '–∞—é',
      '—è—é',
      '—É—é',
      '—é—é', // –∏–≥—Ä–∞—é, –≥—É–ª—è—é, —Ä–∏—Å—É—é
      '—à—É',
      '–∂—É',
      '—á—É',
      '—â—É', // –ø–∏—à—É, —Ä–µ–∂—É, –∫—Ä–∏—á—É, –∏—â—É
      '–ª—é',
      '—Ä—é',
      '—Å—é',
      '–∑—é', // –≥–æ–≤–æ—Ä—é, –Ω–µ—Å—É, –≤–µ–∑—É
      '—å—é', // –ø—å—é, –ª—å—é
      '–º—É',
      '–Ω—É',
      '–∫—É',
      '–≥—É', // –∂–º—É, —Ç—è–Ω—É, –ø–µ–∫—É, –±–µ—Ä–µ–≥—É
      '–¥—É',
      '—Ç—É',
      '–±—É', // –≤–µ–¥—É, –Ω–µ—Å—É, —Å–∫—Ä–µ–±—É
    ];

    // –ì–ª–∞–≥–æ–ª—ã 2-–≥–æ –ª–∏—Ü–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ (—Ç—ã —á—Ç–æ –¥–µ–ª–∞–µ—à—å?)
    const secondPersonEndings = [
      '–µ—à—å',
      '—ë—à—å',
      '–∏—à—å', // –¥–µ–ª–∞–µ—à—å, –∏–¥—ë—à—å, –≥–æ–≤–æ—Ä–∏—à—å
      '–∞–µ—à—å',
      '—è–µ—à—å',
      '—É–µ—à—å', // –∏–≥—Ä–∞–µ—à—å, –≥—É–ª—è–µ—à—å, —Ä–∏—Å—É–µ—à—å
      '—å–µ—à—å',
      '—å—ë—à—å', // –ø—å—ë—à—å, –ª—å—ë—à—å
    ];

    // –ì–ª–∞–≥–æ–ª—ã 3-–≥–æ –ª–∏—Ü–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ (–æ–Ω/–æ–Ω–∞ —á—Ç–æ –¥–µ–ª–∞–µ—Ç?)
    const thirdPersonEndings = [
      '–µ—Ç',
      '—ë—Ç',
      '–∏—Ç', // –¥–µ–ª–∞–µ—Ç, –∏–¥—ë—Ç, –≥–æ–≤–æ—Ä–∏—Ç
      '–∞–µ—Ç',
      '—è–µ—Ç',
      '—É–µ—Ç',
      '—é–µ—Ç', // –∏–≥—Ä–∞–µ—Ç, –≥—É–ª—è–µ—Ç, —Ä–∏—Å—É–µ—Ç
      '–µ–µ—Ç',
      '–æ–µ—Ç', // —Å–º–µ–µ—Ç—Å—è, –≤–æ–µ—Ç
      '—Å—Ç',
      '–∑—Ç', // –Ω–µ—Å—ë—Ç, –≤–µ–∑—ë—Ç
      '—å—ë—Ç',
      '—å–µ—Ç', // –ø—å—ë—Ç, –ª—å—ë—Ç
    ];

    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ 1-–≥–æ –ª–∏—Ü–∞ (–º—ã —á—Ç–æ –¥–µ–ª–∞–µ–º?)
    const firstPersonPluralEndings = [
      '–µ–º',
      '—ë–º',
      '–∏–º', // –¥–µ–ª–∞–µ–º, –∏–¥—ë–º, –≥–æ–≤–æ—Ä–∏–º
      '–∞–µ–º',
      '—è–µ–º',
      '—É–µ–º', // –∏–≥—Ä–∞–µ–º, –≥—É–ª—è–µ–º, —Ä–∏—Å—É–µ–º
      '—å—ë–º',
      '—å–µ–º', // –ø—å—ë–º, –ª—å—ë–º
    ];

    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ 2-–≥–æ –ª–∏—Ü–∞ (–≤—ã —á—Ç–æ –¥–µ–ª–∞–µ—Ç–µ?)
    const secondPersonPluralEndings = [
      '–µ—Ç–µ',
      '—ë—Ç–µ',
      '–∏—Ç–µ', // –¥–µ–ª–∞–µ—Ç–µ, –∏–¥—ë—Ç–µ, –≥–æ–≤–æ—Ä–∏—Ç–µ
      '–∞–µ—Ç–µ',
      '—è–µ—Ç–µ',
      '—É–µ—Ç–µ', // –∏–≥—Ä–∞–µ—Ç–µ, –≥—É–ª—è–µ—Ç–µ, —Ä–∏—Å—É–µ—Ç–µ
    ];

    // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ 3-–≥–æ –ª–∏—Ü–∞ (–æ–Ω–∏ —á—Ç–æ –¥–µ–ª–∞—é—Ç?)
    const thirdPersonPluralEndings = [
      '—É—Ç',
      '—é—Ç',
      '–∞—Ç',
      '—è—Ç', // –¥–µ–ª–∞—é—Ç, —á–∏—Ç–∞—é—Ç, –∏–≥—Ä–∞—é—Ç, —Å—Ç–æ—è—Ç
      '–∞—é—Ç',
      '—è—é—Ç',
      '—É—é—Ç', // –∏–≥—Ä–∞—é—Ç, –≥—É–ª—è—é—Ç, —Ä–∏—Å—É—é—Ç
      '–µ—é—Ç',
      '–æ—é—Ç', // —Å–º–µ—é—Ç—Å—è, –≤–æ—é—Ç
    ];

    // –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∫–ª–æ–Ω–µ–Ω–∏–µ (—á—Ç–æ –¥–µ–ª–∞–π!)
    const imperativeEndings = [
      '–∏',
      '–∞–π',
      '—è–π',
      '–µ–π',
      '—É–π',
      '—é–π', // –¥–µ–ª–∞–π, –∏–≥—Ä–∞–π, —á–∏—Ç–∞–π, –ø–µ–π, –¥—É–π
    ];

    // –ü—Ä–∏—á–∞—Å—Ç–∏—è –∏ –¥–µ–µ–ø—Ä–∏—á–∞—Å—Ç–∏—è
    const participleEndings = [
      '—â–∏–π',
      '—â–∞—è',
      '—â–µ–µ',
      '—â–∏–µ', // –¥–µ–ª–∞—é—â–∏–π, —á–∏—Ç–∞—é—â–∞—è
      '–≤—à–∏–π',
      '–≤—à–∞—è',
      '–≤—à–µ–µ',
      '–≤—à–∏–µ', // —Å–¥–µ–ª–∞–≤—à–∏–π
      '–Ω–Ω—ã–π',
      '–Ω–Ω–∞—è',
      '–Ω–Ω–æ–µ',
      '–Ω–Ω—ã–µ', // —Å–¥–µ–ª–∞–Ω–Ω—ã–π
      '—Ç—ã–π',
      '—Ç–∞—è',
      '—Ç–æ–µ',
      '—Ç—ã–µ', // –±–∏—Ç—ã–π, –º—ã—Ç–∞—è
      '—è',
      '–≤',
      '–≤—à–∏',
      '—à–∏', // –¥–µ–ª–∞—è, —Å–¥–µ–ª–∞–≤, —Å–¥–µ–ª–∞–≤—à–∏
    ];

    // –ü—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
    const pastTenseEndings = [
      '–ª',
      '–ª–∞',
      '–ª–æ',
      '–ª–∏', // –¥–µ–ª–∞–ª, –¥–µ–ª–∞–ª–∞, –¥–µ–ª–∞–ª–æ, –¥–µ–ª–∞–ª–∏
      '–∞–ª',
      '–∞–ª–∞',
      '–∞–ª–æ',
      '–∞–ª–∏', // –∏–≥—Ä–∞–ª, –∏–≥—Ä–∞–ª–∞
      '—è–ª',
      '—è–ª–∞',
      '—è–ª–æ',
      '—è–ª–∏', // —Å—Ç–æ—è–ª, —Å—Ç–æ—è–ª–∞
      '–µ–ª',
      '–µ–ª–∞',
      '–µ–ª–æ',
      '–µ–ª–∏', // —Å–∏–¥–µ–ª, —Å–∏–¥–µ–ª–∞
      '–∏–ª',
      '–∏–ª–∞',
      '–∏–ª–æ',
      '–∏–ª–∏', // –≥–æ–≤–æ—Ä–∏–ª, –≥–æ–≤–æ—Ä–∏–ª–∞
      '—É–ª',
      '—É–ª–∞',
      '—É–ª–æ',
      '—É–ª–∏', // —Ç—è–Ω—É–ª, —Ç—è–Ω—É–ª–∞
      '—ã–ª',
      '—ã–ª–∞',
      '—ã–ª–æ',
      '—ã–ª–∏', // –±—ã–ª, –±—ã–ª–∞, –±—ã–ª–æ, –±—ã–ª–∏
      '—ë–ª',
      '—ë–ª–∞',
      '—ë–ª–æ',
      '—ë–ª–∏', // –≤—ë–ª, –≤–µ–ª–∞ (–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —ë–ª)
    ];

    // –í–æ–∑–≤—Ä–∞—Ç–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã (—Å -—Å—è, -—Å—å)
    const reflexiveEndings = [
      '—Å—è',
      '—Å—å', // –¥–µ–ª–∞–µ—Ç—Å—è, –¥–µ–ª–∞—é—Å—å, –¥–µ–ª–∞–ª—Å—è
      '—Ç—Å—è',
      '—Ç—å—Å—è', // –¥–µ–ª–∞–µ—Ç—Å—è, –¥–µ–ª–∞—Ç—å—Å—è
      '–µ—Ç—Å—è',
      '–∏—Ç—Å—è',
      '–∞–µ—Ç—Å—è',
      '—è–µ—Ç—Å—è', // –¥–µ–ª–∞–µ—Ç—Å—è, –≥–æ–≤–æ—Ä–∏—Ç—Å—è, –∏–≥—Ä–∞–µ—Ç—Å—è
      '–µ—à—å—Å—è',
      '–∏—à—å—Å—è',
      '–∞–µ—à—å—Å—è',
      '—è–µ—à—å—Å—è', // –¥–µ–ª–∞–µ—à—å—Å—è, –≥–æ–≤–æ—Ä–∏—à—å—Å—è
      '–µ–º—Å—è',
      '–∏–º—Å—è',
      '–∞–µ–º—Å—è',
      '—è–µ–º—Å—è', // –¥–µ–ª–∞–µ–º—Å—è, –≥–æ–≤–æ—Ä–∏–º—Å—è
      '–µ—Ç–µ—Å—å',
      '–∏—Ç–µ—Å—å',
      '–∞–µ—Ç–µ—Å—å',
      '—è–µ—Ç–µ—Å—å', // –¥–µ–ª–∞–µ—Ç–µ—Å—å, –≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å
      '—É—Ç—Å—è',
      '—è—Ç—Å—è',
      '–∞—é—Ç—Å—è',
      '—è—é—Ç—Å—è', // –¥–µ–ª–∞—é—Ç—Å—è, –≥–æ–≤–æ—Ä—è—Ç—Å—è, –∏–≥—Ä–∞—é—Ç—Å—è
      '–ª—Å—è',
      '–ª–∞—Å—å',
      '–ª–æ—Å—å',
      '–ª–∏—Å—å', // –¥–µ–ª–∞–ª—Å—è, –¥–µ–ª–∞–ª–∞—Å—å, –¥–µ–ª–∞–ª–æ—Å—å, –¥–µ–ª–∞–ª–∏—Å—å
    ];

    // –ë—É–¥—É—â–µ–µ –≤—Ä–µ–º—è
    const futureEndings = [
      '–±—É–¥—É',
      '–±—É–¥–µ—à—å',
      '–±—É–¥–µ—Ç',
      '–±—É–¥–µ–º',
      '–±—É–¥–µ—Ç–µ',
      '–±—É–¥—É—Ç', // –±—É–¥—É –¥–µ–ª–∞—Ç—å
    ];

    // –û—Å–æ–±—ã–µ —Ñ–æ—Ä–º—ã –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    const specialVerbs = [
      '–µ—Å—Ç—å',
      '–ø–∏—Ç—å',
      '—Å–ø–∞—Ç—å',
      '—Å—Ç–æ—è—Ç—å',
      '–ª–µ–∂–∞—Ç—å',
      '—Å–∏–¥–µ—Ç—å',
      '–∏–¥—Ç–∏',
      '–µ—Ö–∞—Ç—å',
      '–ª–µ—Ç–µ—Ç—å',
      '–ø–ª—ã—Ç—å',
      '–±–µ–∂–∞—Ç—å',
      '–ø–æ–ª–∑—Ç–∏',
      '–∂–∏—Ç—å',
      '–±—ã—Ç—å',
      '–∏–º–µ—Ç—å',
      '–¥–∞—Ç—å',
      '–≤–∑—è—Ç—å',
      '–∫–ª–∞—Å—Ç—å',
      '–º–æ—á—å',
      '—Ö–æ—Ç–µ—Ç—å',
      '—É–º–µ—Ç—å',
      '–∑–Ω–∞—Ç—å',
      '–≤–∏–¥–µ—Ç—å',
      '—Å–ª—ã—à–∞—Ç—å',
      '–ª—é–±–∏—Ç—å',
      '–Ω–µ–Ω–∞–≤–∏–¥–µ—Ç—å',
      '—Ä–∞–±–æ—Ç–∞—Ç—å',
      '–∏–≥—Ä–∞—Ç—å',
      '–¥—É–º–∞—Ç—å',
      '–≥–æ–≤–æ—Ä–∏—Ç—å',
      '—á–∏—Ç–∞—Ç—å',
      '–ø–∏—Å–∞—Ç—å',
      '—Ä–∏—Å–æ–≤–∞—Ç—å',
      '–ø–µ—Ç—å',
      '—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å',
      '–ø—Ä—ã–≥–∞—Ç—å',
      '–∫—Ä–∏—á–∞—Ç—å',
      '—Å–º–µ—è—Ç—å—Å—è',
      '–ø–ª–∞–∫–∞—Ç—å',
      '—É—á–∏—Ç—å—Å—è',
      '–≥–æ—Ç–æ–≤–∏—Ç—å',
      '–ø–æ–∫—É–ø–∞—Ç—å',
      '–ø—Ä–æ–¥–∞–≤–∞—Ç—å',
      '–∏—Å–∫–∞—Ç—å',
      '–Ω–∞—Ö–æ–¥–∏—Ç—å',
      '—Ç–µ—Ä—è—Ç—å',
      '–ø–æ–º–Ω–∏—Ç—å',
      '–∑–∞–±—ã–≤–∞—Ç—å',
      '–ø–æ–Ω–∏–º–∞—Ç—å',
      '–æ–±—ä—è—Å–Ω—è—Ç—å',
      '—Å–ª—É—à–∞—Ç—å',
      '—Å–º–æ—Ç—Ä–µ—Ç—å',
      '–∏–∑—É—á–∞—Ç—å',
      '–ø–æ–≤—Ç–æ—Ä—è—Ç—å',
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã
    if (specialVerbs.includes(lowerWord)) {
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è
    const allEndings = [
      ...infinitiveEndings,
      ...firstPersonEndings,
      ...secondPersonEndings,
      ...thirdPersonEndings,
      ...firstPersonPluralEndings,
      ...secondPersonPluralEndings,
      ...thirdPersonPluralEndings,
      ...imperativeEndings,
      ...participleEndings,
      ...pastTenseEndings,
      ...futureEndings,
      ...reflexiveEndings,
    ];

    return allEndings.some((ending) => {
      if (ending.length >= lowerWord.length) return false;
      return lowerWord.endsWith(ending);
    });
  }

  private findVerbsInText(text: string): string[] {
    const words = text
      .toLowerCase()
      .split(/\s+/)
      .filter((word) => word.length > 2);
    const detectedVerbs: string[] = [];

    for (const word of words) {
      // –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
      const cleanWord = word.replace(/[.,!?;:()"-]/g, '');
      if (this.isVerbByEnding(cleanWord)) {
        detectedVerbs.push(cleanWord);
      }
    }

    return detectedVerbs;
  }

  private isSimpleReminderRequest(text: string): boolean {
    // –ü—Ä–æ—Å—Ç—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    const simpleReminderPatterns = [
      /^–Ω–∞–ø–æ–º–Ω–∏\s+–º–Ω–µ\s+.+/i, // "–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∫—É–ø–∏—Ç—å —Ö–ª–µ–±"
      /^–Ω–∞–ø–æ–º–Ω—é\s+—Å–µ–±–µ\s+.+/i, // "–Ω–∞–ø–æ–º–Ω—é —Å–µ–±–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å"
      /^–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+.+/i, // "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"
      /^–ø–æ—Å—Ç–∞–≤—å\s+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+.+/i, // "–ø–æ—Å—Ç–∞–≤—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å"
      /^—É—Å—Ç–∞–Ω–æ–≤–∏\s+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+.+/i, // "—É—Å—Ç–∞–Ω–æ–≤–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω"
      /^—Å–æ–∑–¥–∞–π\s+–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\s+.+/i, // "—Å–æ–∑–¥–∞–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è"
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if (simpleReminderPatterns.some((pattern) => pattern.test(text))) {
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ –≥–ª–∞–≥–æ–ª–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏—è (—ç—Ç–æ —Ç–æ–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)
    const timeWords = [
      '–∑–∞–≤—Ç—Ä–∞',
      '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞',
      '—Å–µ–≥–æ–¥–Ω—è',
      '–≤–µ—á–µ—Ä–æ–º',
      '—É—Ç—Ä–æ–º',
      '–¥–Ω–µ–º',
      '–Ω–æ—á—å—é',
      '–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
      '–≤–æ –≤—Ç–æ—Ä–Ω–∏–∫',
      '–≤ —Å—Ä–µ–¥—É',
      '–≤ —á–µ—Ç–≤–µ—Ä–≥',
      '–≤ –ø—è—Ç–Ω–∏—Ü—É',
      '–≤ —Å—É–±–±–æ—Ç—É',
      '–≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
      '–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ',
      '–≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ',
      '–≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É',
    ];

    const actionVerbs = [
      '—Å–¥–µ–ª–∞—Ç—å',
      '–≤—ã–ø–æ–ª–Ω–∏—Ç—å',
      '–∫—É–ø–∏—Ç—å',
      '—Å–∫—É—à–∞—Ç—å',
      '—Å—ä–µ—Å—Ç—å',
      '–ø–æ–∑–≤–æ–Ω–∏—Ç—å',
      '–Ω–∞–ø–∏—Å–∞—Ç—å',
      '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å',
      '–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å',
      '–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å',
      '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å',
      '–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å',
      '–ø–æ–π—Ç–∏',
      '–ø–æ–µ—Ö–∞—Ç—å',
      '–∑–∞–±—Ä–∞—Ç—å',
      '–æ—Ç–Ω–µ—Å—Ç–∏',
      '–ø—Ä–∏–Ω–µ—Å—Ç–∏',
      '–≤–µ—Ä–Ω—É—Ç—å',
      '–ø–æ–∫–∞–∑–∞—Ç—å',
      '—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å',
      '–∑–∞–ø–ª–∞—Ç–∏—Ç—å',
      '–æ–ø–ª–∞—Ç–∏—Ç—å',
      '–∑–∞–∫–∞–∑–∞—Ç—å',
      '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è',
      '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
      '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å',
      '–∏–∑—É—á–∏—Ç—å',
      '–ø—Ä–æ—á–∏—Ç–∞—Ç—å',
      '–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å',
      '–ø–æ—á–∏—Å—Ç–∏—Ç—å',
      '—É–±—Ä–∞—Ç—å',
      '–ø–æ–º—ã—Ç—å',
      '–ø–æ—Å—Ç–∏—Ä–∞—Ç—å',
      '–ø–æ–≥–ª–∞–¥–∏—Ç—å',
      '—Å—Ö–æ–¥–∏—Ç—å',
      '—Å—ä–µ–∑–¥–∏—Ç—å',
      '–¥–æ–π—Ç–∏',
      '–¥–æ–±—Ä–∞—Ç—å—Å—è',
      '–¥–æ–µ—Ö–∞—Ç—å',
      '–ø—Ä–∏–µ—Ö–∞—Ç—å',
      '–ø—Ä–∏–π—Ç–∏',
      '–∑–∞–µ—Ö–∞—Ç—å',
      '–∑–∞–π—Ç–∏',
      '–∑–∞–≤–µ—Ä–Ω—É—Ç—å',
      '–∑–∞—Å–∫–æ—á–∏—Ç—å',
      '–Ω–∞–≤–µ—Å—Ç–∏—Ç—å',
      '–ø–æ—Å–µ—Ç–∏—Ç—å',
      '–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è',
      '—É–≤–∏–¥–µ—Ç—å—Å—è',
      '–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å',
      '–æ–±—Å—É–¥–∏—Ç—å',
      '—Ä–µ—à–∏—Ç—å',
      '–∑–∞–∫–æ–Ω—á–∏—Ç—å',
      '–∑–∞–≤–µ—Ä—à–∏—Ç—å',
      '–Ω–∞—á–∞—Ç—å',
      '–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å',
      '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
      '–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
      '–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å',
      '–æ—Ç–∫—Ä—ã—Ç—å',
      '–∑–∞–∫—Ä—ã—Ç—å',
      '–≤–∫–ª—é—á–∏—Ç—å',
      '–≤—ã–∫–ª—é—á–∏—Ç—å',
      '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å',
      '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
      '—Å–∫–∞—á–∞—Ç—å',
      '–∑–∞–≥—Ä—É–∑–∏—Ç—å',
      '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è',
      '–≤—ã–π—Ç–∏',
      '—É–π—Ç–∏',
      '–≤–µ—Ä–Ω—É—Ç—å—Å—è',
      '–æ—Ç–¥–æ—Ö–Ω—É—Ç—å',
      '–ø–æ—Å–ø–∞—Ç—å',
      '–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è',
      '–≤—Å—Ç–∞—Ç—å',
      '–ª–µ—á—å',
      '—Å–æ–±—Ä–∞—Ç—å—Å—è',
      '–æ–¥–µ—Ç—å—Å—è',
      '–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è',
      '—É–º—ã—Ç—å—Å—è',
      '–ø–æ—á–∏—Å—Ç–∏—Ç—å',
      '–ø–æ–∫—É—à–∞—Ç—å',
      '–ø–æ–µ—Å—Ç—å',
      '–ø–æ–ø–∏—Ç—å',
      '–≤—ã–ø–∏—Ç—å',
      '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å',
      '–ø–æ–ø—ã—Ç–∞—Ç—å—Å—è',
      '–ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å',
      '–ø–æ—É—á–∏—Ç—å—Å—è',
      '–ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è',
      '–ø–æ–∑–∞–Ω–∏–º–∞—Ç—å—Å—è',
      '–ø–æ–∏–≥—Ä–∞—Ç—å',
      '–ø–æ–≥—É–ª—è—Ç—å',
      '–ø–æ–±–µ–≥–∞—Ç—å',
      '–ø–æ—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å',
      '–ø–µ—Ç—å',
      '—Ä–∏—Å–æ–≤–∞—Ç—å',
      '–ø–∏—Å–∞—Ç—å',
      '—á–∏—Ç–∞—Ç—å',
      '—Å–ª—É—à–∞—Ç—å',
      '—Å–º–æ—Ç—Ä–µ—Ç—å',
      '—É—á–∏—Ç—å',
      '–∏–∑—É—á–∞—Ç—å',
      '–ø–æ–≤—Ç–æ—Ä–∏—Ç—å',
      '–∑–∞–ø–æ–º–Ω–∏—Ç—å',
      '–∑–∞–±—ã—Ç—å',
      '–≤—Å–ø–æ–º–Ω–∏—Ç—å',
      '–Ω–∞–π—Ç–∏',
      '–∏—Å–∫–∞—Ç—å',
      '–ø–æ—Ç–µ—Ä—è—Ç—å',
      '—Å–ª–æ–º–∞—Ç—å',
      '–ø–æ—á–∏–Ω–∏—Ç—å',
      '–∏—Å–ø—Ä–∞–≤–∏—Ç—å',
      '–ø–æ–¥–∞—Ä–∏—Ç—å',
      '–ø–æ–ª—É—á–∏—Ç—å',
      '–≤–∑—è—Ç—å',
      '–¥–∞—Ç—å',
      '–æ—Ç–¥–∞—Ç—å',
      '–æ–¥–æ–ª–∂–∏—Ç—å',
      '–∑–∞–Ω—è—Ç—å',
      '–ø—Ä–æ–¥–∞—Ç—å',
      '–ø–æ–∫—É–ø–∞—Ç—å',
      '–ø—Ä–æ–¥–∞–≤–∞—Ç—å',
      '–º–µ–Ω—è—Ç—å',
      '–æ–±–º–µ–Ω—è—Ç—å',
      '—Å—á–∏—Ç–∞—Ç—å',
      '–ø–æ–¥—Å—á–∏—Ç–∞—Ç—å',
      '—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å',
      '–∏–∑–º–µ—Ä–∏—Ç—å',
      '–≤–∑–≤–µ—Å–∏—Ç—å',
      '—Å—Ä–∞–≤–Ω–∏—Ç—å',
      '–≤—ã–±—Ä–∞—Ç—å',
      '—Ä–µ—à–∏—Ç—å',
      '–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å',
      '—É–∑–Ω–∞—Ç—å',
      '—Ä–∞–∑—É–∑–Ω–∞—Ç—å',
      '—Å–ø—Ä–æ—Å–∏—Ç—å',
      '–æ—Ç–≤–µ—Ç–∏—Ç—å',
      '–æ–±—ä—è—Å–Ω–∏—Ç—å',
      '–ø–æ–Ω—è—Ç—å',
      '—Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è',
      '–ø–æ–º–æ—á—å',
      '–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å',
      '–∑–∞—â–∏—Ç–∏—Ç—å',
      '—Å–ø–∞—Å—Ç–∏',
      '–≤—ã–ª–µ—á–∏—Ç—å',
      '–ø–æ–ª–µ—á–∏—Ç—å',
      '–±–æ–ª–µ—Ç—å',
      '–≤—ã–∑–¥–æ—Ä–æ–≤–µ—Ç—å',
      '–æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å',
    ];

    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –ò –≥–ª–∞–≥–æ–ª –¥–µ–π—Å—Ç–≤–∏—è - —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    const hasTimeWord = timeWords.some((timeWord) =>
      text.toLowerCase().includes(timeWord.toLowerCase()),
    );

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≥–æ–ª–æ–≤ + –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è–º
    const knownActionVerbs = actionVerbs.some((verb) =>
      text.toLowerCase().includes(verb.toLowerCase()),
    );

    // –ù–∞—Ö–æ–¥–∏–º –≥–ª–∞–≥–æ–ª—ã –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è–º
    const detectedVerbs = this.findVerbsInText(text);
    const hasDetectedVerb = detectedVerbs.length > 0;

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (hasDetectedVerb) {
      this.logger.log(
        `Detected verbs in "${text}": ${detectedVerbs.join(', ')}`,
      );
    }

    const hasActionVerb = knownActionVerbs || hasDetectedVerb;

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    const reminderIndicators = [
      /–Ω—É–∂–Ω–æ\s+/i, // "–Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å"
      /–Ω–∞–¥–æ\s+/i, // "–Ω–∞–¥–æ –∫—É–ø–∏—Ç—å"
      /–¥–æ–ª–∂–µ–Ω\s+/i, // "–¥–æ–ª–∂–µ–Ω –ø–æ–∑–≤–æ–Ω–∏—Ç—å"
      /–¥–æ–ª–∂–Ω–∞\s+/i, // "–¥–æ–ª–∂–Ω–∞ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è"
      /—Å—Ç–æ–∏—Ç\s+/i, // "—Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å"
      /—Ö–æ—á—É\s+/i, // "—Ö–æ—á—É —Å—Ö–æ–¥–∏—Ç—å –∑–∞–≤—Ç—Ä–∞"
      /–ø–ª–∞–Ω–∏—Ä—É—é\s+/i, // "–ø–ª–∞–Ω–∏—Ä—É—é –ø–æ–µ—Ö–∞—Ç—å"
      /—Å–æ–±–∏—Ä–∞—é—Å—å\s+/i, // "—Å–æ–±–∏—Ä–∞—é—Å—å –¥–µ–ª–∞—Ç—å"
      /–±—É–¥—É\s+/i, // "–±—É–¥—É —á–∏—Ç–∞—Ç—å –∑–∞–≤—Ç—Ä–∞"
    ];

    const hasReminderIndicator = reminderIndicators.some((pattern) =>
      pattern.test(text),
    );

    return hasTimeWord && (hasActionVerb || hasReminderIndicator);
  }

  private isTaskRequest(text: string): boolean {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    if (this.isReminderRequest(text)) {
      return false; // –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —Ç–æ –Ω–µ –∑–∞–¥–∞—á–∞
    }

    // –ò—Å–∫–ª—é—á–∞–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç—ã (1-2 —Å–ª–æ–≤–∞ –±–µ–∑ –≥–ª–∞–≥–æ–ª–æ–≤ –¥–µ–π—Å—Ç–≤–∏—è)
    const words = text.trim().split(/\s+/);
    if (words.length <= 2) {
      // –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑ —Ç—Ä–µ–±—É–µ–º —è–≤–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã –¥–µ–π—Å—Ç–≤–∏—è
      const actionVerbs = [
        '—Å–¥–µ–ª–∞—Ç—å',
        '–≤—ã–ø–æ–ª–Ω–∏—Ç—å',
        '–∫—É–ø–∏—Ç—å',
        '—Å–∫—É—à–∞—Ç—å',
        '—Å—ä–µ—Å—Ç—å',
        '–µ—Å—Ç—å',
        '–ø–æ–µ—Å—Ç—å',
        '–ø–æ–ø–∏—Ç—å',
        '–ø–æ–∑–≤–æ–Ω–∏—Ç—å',
        '–Ω–∞–ø–∏—Å–∞—Ç—å',
        '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å',
        '–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å',
        '–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å',
        '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å',
        '–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å',
        '–ø–æ–π—Ç–∏',
        '–ø–æ–µ—Ö–∞—Ç—å',
        '–∑–∞–±—Ä–∞—Ç—å',
        '–æ—Ç–Ω–µ—Å—Ç–∏',
        '–ø—Ä–∏–Ω–µ—Å—Ç–∏',
        '–≤–µ—Ä–Ω—É—Ç—å',
        '–ø–æ–∫–∞–∑–∞—Ç—å',
        '—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å',
        '–∑–∞–ø–ª–∞—Ç–∏—Ç—å',
        '–æ–ø–ª–∞—Ç–∏—Ç—å',
        '–∑–∞–∫–∞–∑–∞—Ç—å',
        '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è',
        '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
        '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å',
        '–∏–∑—É—á–∏—Ç—å',
        '–ø—Ä–æ—á–∏—Ç–∞—Ç—å',
        '–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å',
        '–ø–æ—á–∏—Å—Ç–∏—Ç—å',
        '—É–±—Ä–∞—Ç—å',
        '–ø–æ–º—ã—Ç—å',
        '–ø–æ—Å—Ç–∏—Ä–∞—Ç—å',
        '–ø–æ–≥–ª–∞–¥–∏—Ç—å',
        '—Å—Ö–æ–¥–∏—Ç—å',
        '—Å—ä–µ–∑–¥–∏—Ç—å',
        '–¥–æ–π—Ç–∏',
        '–¥–æ–±—Ä–∞—Ç—å—Å—è',
        '–¥–æ–µ—Ö–∞—Ç—å',
        '–ø—Ä–∏–µ—Ö–∞—Ç—å',
        '–ø—Ä–∏–π—Ç–∏',
        '–∑–∞–µ—Ö–∞—Ç—å',
        '–∑–∞–π—Ç–∏',
        '–∑–∞–≤–µ—Ä–Ω—É—Ç—å',
        '–∑–∞—Å–∫–æ—á–∏—Ç—å',
        '–Ω–∞–≤–µ—Å—Ç–∏—Ç—å',
        '–ø–æ—Å–µ—Ç–∏—Ç—å',
        '–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è',
        '—É–≤–∏–¥–µ—Ç—å—Å—è',
        '–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å',
        '–æ–±—Å—É–¥–∏—Ç—å',
        '—Ä–µ—à–∏—Ç—å',
        '–∑–∞–∫–æ–Ω—á–∏—Ç—å',
        '–∑–∞–≤–µ—Ä—à–∏—Ç—å',
        '–Ω–∞—á–∞—Ç—å',
        '–ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å',
        '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
        '–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
        '–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å',
        '–æ—Ç–∫—Ä—ã—Ç—å',
        '–∑–∞–∫—Ä—ã—Ç—å',
        '–≤–∫–ª—é—á–∏—Ç—å',
        '–≤—ã–∫–ª—é—á–∏—Ç—å',
        '–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å',
        '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
        '—Å–∫–∞—á–∞—Ç—å',
        '–∑–∞–≥—Ä—É–∑–∏—Ç—å',
        '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è',
        '–≤—ã–π—Ç–∏',
        '—É–π—Ç–∏',
        '–≤–µ—Ä–Ω—É—Ç—å—Å—è',
        '–æ—Ç–¥–æ—Ö–Ω—É—Ç—å',
        '–ø–æ—Å–ø–∞—Ç—å',
        '–ø—Ä–æ—Å–Ω—É—Ç—å—Å—è',
        '–≤—Å—Ç–∞—Ç—å',
        '–ª–µ—á—å',
        '—Å–æ–±—Ä–∞—Ç—å—Å—è',
        '–æ–¥–µ—Ç—å—Å—è',
        '–ø–µ—Ä–µ–æ–¥–µ—Ç—å—Å—è',
        '—É–º—ã—Ç—å—Å—è',
        '–ø–æ–∫—É—à–∞—Ç—å',
        '–ø–æ–µ—Å—Ç—å',
        '–ø–æ–ø–∏—Ç—å',
        '–≤—ã–ø–∏—Ç—å',
        '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å',
        '–ø–æ–ø—ã—Ç–∞—Ç—å—Å—è',
        '–ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å',
        '–ø–æ—É—á–∏—Ç—å—Å—è',
        '–ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è',
        '–ø–æ–∑–∞–Ω–∏–º–∞—Ç—å—Å—è',
        '–ø–æ–∏–≥—Ä–∞—Ç—å',
        '–ø–æ–≥—É–ª—è—Ç—å',
        '–ø–æ–±–µ–≥–∞—Ç—å',
        '–ø–æ—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å',
        '–ø–µ—Ç—å',
        '—Ä–∏—Å–æ–≤–∞—Ç—å',
        '–ø–∏—Å–∞—Ç—å',
        '—á–∏—Ç–∞—Ç—å',
        '—Å–ª—É—à–∞—Ç—å',
        '—Å–º–æ—Ç—Ä–µ—Ç—å',
        '—É—á–∏—Ç—å',
        '–∏–∑—É—á–∞—Ç—å',
        '–ø–æ–≤—Ç–æ—Ä–∏—Ç—å',
        '–∑–∞–ø–æ–º–Ω–∏—Ç—å',
        '–∑–∞–±—ã—Ç—å',
        '–≤—Å–ø–æ–º–Ω–∏—Ç—å',
        '–Ω–∞–π—Ç–∏',
        '–∏—Å–∫–∞—Ç—å',
        '–ø–æ—Ç–µ—Ä—è—Ç—å',
        '—Å–ª–æ–º–∞—Ç—å',
        '–ø–æ—á–∏–Ω–∏—Ç—å',
        '–∏—Å–ø—Ä–∞–≤–∏—Ç—å',
        '–ø–æ–¥–∞—Ä–∏—Ç—å',
        '–ø–æ–ª—É—á–∏—Ç—å',
        '–≤–∑—è—Ç—å',
        '–¥–∞—Ç—å',
        '–æ—Ç–¥–∞—Ç—å',
        '–æ–¥–æ–ª–∂–∏—Ç—å',
        '–∑–∞–Ω—è—Ç—å',
        '–ø—Ä–æ–¥–∞—Ç—å',
        '–ø–æ–∫—É–ø–∞—Ç—å',
        '–ø—Ä–æ–¥–∞–≤–∞—Ç—å',
        '–º–µ–Ω—è—Ç—å',
        '–æ–±–º–µ–Ω—è—Ç—å',
        '—Å—á–∏—Ç–∞—Ç—å',
        '–ø–æ–¥—Å—á–∏—Ç–∞—Ç—å',
        '—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å',
        '–∏–∑–º–µ—Ä–∏—Ç—å',
        '–≤–∑–≤–µ—Å–∏—Ç—å',
        '—Å—Ä–∞–≤–Ω–∏—Ç—å',
        '–≤—ã–±—Ä–∞—Ç—å',
        '–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å',
        '—É–∑–Ω–∞—Ç—å',
        '—Ä–∞–∑—É–∑–Ω–∞—Ç—å',
        '—Å–ø—Ä–æ—Å–∏—Ç—å',
        '–æ—Ç–≤–µ—Ç–∏—Ç—å',
        '–æ–±—ä—è—Å–Ω–∏—Ç—å',
        '–ø–æ–Ω—è—Ç—å',
        '—Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è',
        '–ø–æ–º–æ—á—å',
        '–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å',
        '–∑–∞—â–∏—Ç–∏—Ç—å',
        '—Å–ø–∞—Å—Ç–∏',
        '–≤—ã–ª–µ—á–∏—Ç—å',
        '–ø–æ–ª–µ—á–∏—Ç—å',
        '–±–æ–ª–µ—Ç—å',
        '–≤—ã–∑–¥–æ—Ä–æ–≤–µ—Ç—å',
        '–æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å',
        '–ø–∏—Ç—å',
        '–¥–µ–ª–∞—Ç—å',
      ];

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã –¥–µ–π—Å—Ç–≤–∏—è + –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è–º
      const knownActionVerbs = actionVerbs.some((verb) =>
        text.toLowerCase().includes(verb),
      );

      // –ù–∞—Ö–æ–¥–∏–º –≥–ª–∞–≥–æ–ª—ã –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è–º –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑
      const detectedVerbs = this.findVerbsInText(text);
      const hasDetectedVerb = detectedVerbs.length > 0;

      const hasActionVerb = knownActionVerbs || hasDetectedVerb;

      if (!hasActionVerb) {
        return false;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–¥–∞—á–∞ –ë–ï–ó –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –° –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
    const taskPatterns = [
      // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≥–ª–∞–≥–æ–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ —Ñ—Ä–∞–∑—ã (–∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤)
      /^[–∞-—è—ë]+–∞—Ç—å\s+/i, // –≥–ª–∞–≥–æ–ª—ã –Ω–∞ -–∞—Ç—å: –¥–µ–ª–∞—Ç—å, —á–∏—Ç–∞—Ç—å, –ø–∏—Å–∞—Ç—å
      /^[–∞-—è—ë]+–µ—Ç—å\s+/i, // –≥–ª–∞–≥–æ–ª—ã –Ω–∞ -–µ—Ç—å: —Å–º–æ—Ç—Ä–µ—Ç—å, –≤–∏–¥–µ—Ç—å
      /^[–∞-—è—ë]+–∏—Ç—å\s+/i, // –≥–ª–∞–≥–æ–ª—ã –Ω–∞ -–∏—Ç—å: –≥–æ–≤–æ—Ä–∏—Ç—å, –∫—É–ø–∏—Ç—å
      /^[–∞-—è—ë]+—è—Ç—å\s+/i, // –≥–ª–∞–≥–æ–ª—ã –Ω–∞ -—è—Ç—å: –±—Ä–∞—Ç—å, –≤–∑—è—Ç—å
      /^[–∞-—è—ë]+—ã—Ç—å\s+/i, // –≥–ª–∞–≥–æ–ª—ã –Ω–∞ -—ã—Ç—å: –±—ã—Ç—å, –º—ã—Ç—å
      /^[–∞-—è—ë]+–æ—Ç—å\s+/i, // –≥–ª–∞–≥–æ–ª—ã –Ω–∞ -–æ—Ç—å: –º–æ–ª–æ—Ç—å, –ø–æ–ª–æ—Ç—å
      /^[–∞-—è—ë]+—É—Ç—å\s+/i, // –≥–ª–∞–≥–æ–ª—ã –Ω–∞ -—É—Ç—å: —Ç—è–Ω—É—Ç—å, –≥–Ω—É—Ç—å
      /^[–∞-—è—ë]+—Å—Ç—å\s+/i, // –≥–ª–∞–≥–æ–ª—ã –Ω–∞ -—Å—Ç—å: –µ—Å—Ç—å, –∫–ª–∞—Å—Ç—å
      /^[–∞-—è—ë]+–∑—Ç—å\s+/i, // –≥–ª–∞–≥–æ–ª—ã –Ω–∞ -–∑—Ç—å: –ª–µ–∑—Ç—å, –≤–µ–∑—Ç—å
      /^[–∞-—è—ë]+—á—å\s+/i, // –≥–ª–∞–≥–æ–ª—ã –Ω–∞ -—á—å: –ø–µ—á—å, —Ç–µ—á—å
      /^[–∞-—è—ë]+—Ç–∏\s+/i, // –≥–ª–∞–≥–æ–ª—ã –Ω–∞ -—Ç–∏: –∏–¥—Ç–∏, –Ω–µ—Å—Ç–∏

      // –û—Å–æ–±—ã–µ —Ñ–æ—Ä–º—ã –∏ –∫—Ä–∞—Ç–∫–∏–µ –≥–ª–∞–≥–æ–ª—ã
      /^(–µ—Å—Ç—å|–ø–∏—Ç—å|—Å–ø–∞—Ç—å|–∂–∏—Ç—å|–±—ã—Ç—å|–¥–∞—Ç—å|–≤–∑—è—Ç—å|—Å–µ—Å—Ç—å|–≤—Å—Ç–∞—Ç—å|–ª–µ—á—å)\s+/i,

      // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –ª—é–±—ã–º–∏ –≥–ª–∞–≥–æ–ª–∞–º–∏
      /(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è|–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤–æ –≤—Ç–æ—Ä–Ω–∏–∫|–≤ —Å—Ä–µ–¥—É|–≤ —á–µ—Ç–≤–µ—Ä–≥|–≤ –ø—è—Ç–Ω–∏—Ü—É|–≤ —Å—É–±–±–æ—Ç—É|–≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)\s+/i,
      /^–Ω—É–∂–Ω–æ\s+/i,
      /^–Ω–∞–¥–æ\s+/i,
      /–∫–∞–∂–¥—ã–π\s+(–¥–µ–Ω—å|—á–∞—Å|–º–∏–Ω—É—Ç)/i,
      /–∫–∞–∂–¥—ã–µ\s+\d+/i,

      // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
      /—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)/i,
      /(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞)/i,
      /–Ω–∞\s*—Å–ª–µ–¥—É—é—â–µ–π\s*–Ω–µ–¥–µ–ª–µ/i,
      /–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–º–µ—Å—è—Ü–µ/i,
    ];

    // –°—Ç—Ä–æ–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å —è–≤–Ω—ã–º–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏
    const reminderOnlyExclusions = [
      /(—É—Ç—Ä–æ–º|–¥–Ω–µ–º|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é).*–≤\s*\d/i, // "–≤–µ—á–µ—Ä–æ–º –≤ ..." - —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
      /–∑–∞–≤—Ç—Ä–∞\s+–≤\s+\d/i, // "–∑–∞–≤—Ç—Ä–∞ –≤ 15:30" - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
      /—Å–µ–≥–æ–¥–Ω—è\s+–≤\s+\d/i, // "—Å–µ–≥–æ–¥–Ω—è –≤ 15:30" - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    ];

    // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    const reminderTriggers = [/–Ω–∞–ø–æ–º–Ω–∏|–Ω–∞–ø–æ–º–Ω—é|–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ|remind/i];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    const hasReminderOnlyExclusions = reminderOnlyExclusions.some((pattern) =>
      pattern.test(text),
    );
    const hasReminderTriggers = reminderTriggers.some((pattern) =>
      pattern.test(text),
    );

    if (hasReminderOnlyExclusions || hasReminderTriggers) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∑–∞–¥–∞—á—É
    const isTask = taskPatterns.some((pattern) => pattern.test(text));

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –≥–ª–∞–≥–æ–ª–æ–≤
    if (!isTask) {
      const detectedVerbs = this.findVerbsInText(text);
      const hasVerb = detectedVerbs.length > 0;

      // –ï—Å–ª–∏ –µ—Å—Ç—å –≥–ª–∞–≥–æ–ª –∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–¥–∞—á–∞
      const hasSpecificTime =
        /–≤\s+\d{1,2}:\d{2}|—á–µ—Ä–µ–∑\s+\d+\s*(–º–∏–Ω—É—Ç|—á–∞—Å)/i.test(text);

      if (hasVerb && !hasSpecificTime && text.length > 10) {
        this.logger.log(
          `Universal verb detector found task candidate: "${text}" with verbs: ${detectedVerbs.join(', ')}`,
        );
        return true;
      }
    }

    return isTask;
  }

  private isGeneralChatMessage(text: string): boolean {
    const generalPatterns = [
      // –¢–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ò–ò –∏–ª–∏ –±–æ—Ç—É
      /^(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π|–¥–æ–±—Ä—ã–π –¥–µ–Ω—å|–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä|—Ö–∞–π|hello|hi)$/i, // —Ç–æ—á–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
      /^(–ø–æ–∫–∞|–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è|—É–≤–∏–¥–∏–º—Å—è|–≤—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ|bye|goodbye)$/i, // —Ç–æ—á–Ω—ã–µ –ø—Ä–æ—â–∞–Ω–∏—è

      // –Ø–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫ –ò–ò
      /^–æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å/i,
      /^—á—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å/i,
      /^–∫–∞–∫ –¥–µ–ª–∞\??$/i,
      /^–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å\??$/i,
      /^—á—Ç–æ –Ω–æ–≤–æ–≥–æ\??$/i,
      /^—Ä–∞—Å—Å–∫–∞–∂–∏ –æ/i,
      /^–æ–±—ä—è—Å–Ω–∏ –º–Ω–µ/i,
      /^–ø–æ–º–æ–≥–∏ –ø–æ–Ω—è—Ç—å/i,
      /^—á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ/i,
      /^—Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ –æ/i,
      /^–∫–∞–∫ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å/i,
      /^–ø–æ—Å–æ–≤–µ—Ç—É–π –º–Ω–µ/i,
      /^—á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å\??$/i,

      // –¢–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫ –±–æ—Ç—É
      /^—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å\??$/i,
      /^–ø–æ–º–æ—â—å$/i,
      /^help$/i,

      // –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
      /^—Å–ø–∞—Å–∏–±–æ$/i,
      /^–±–ª–∞–≥–æ–¥–∞—Ä—é$/i,
      /^thanks$/i,
    ];

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π - –≤—Å–µ —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–¥–∞—á–µ–π, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π
    const excludePatterns = [
      /\/\w+/, // –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
      /–¥–æ–±–∞–≤–∏—Ç—å|—Å–æ–∑–¥–∞—Ç—å|—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–∫—É–ø–∏—Ç—å|–ø–æ–∑–≤–æ–Ω–∏—Ç—å|–Ω–∞–ø–∏—Å–∞—Ç—å|–æ—Ç–ø—Ä–∞–≤–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å|–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å|–ø–æ–π—Ç–∏|–ø–æ–µ—Ö–∞—Ç—å/i, // –≥–ª–∞–≥–æ–ª—ã –¥–µ–π—Å—Ç–≤–∏–π
      /–≤\s*\d{1,2}:\d{2}/, // –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ (—Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è) - –≤—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–∞–µ–º
      /—á–µ—Ä–µ–∑\s+\d+/, // –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ - –≤—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–∞–µ–º
      /–≤\s*\d{1,2}\s*—á–∞—Å/, // "–≤ 3 —á–∞—Å–∞" - –≤—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–∞–µ–º
      /(—É—Ç—Ä–æ–º|–¥–Ω–µ–º|–≤–µ—á–µ—Ä–æ–º|–Ω–æ—á—å—é).*–≤\s*\d/, // "–≤–µ—á–µ—Ä–æ–º –≤ ..." - –≤—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–∞–µ–º
      /–Ω–∞–ø–æ–º–Ω–∏|–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ|–±—É–¥–∏–ª—å–Ω–∏–∫|—Ç–∞–π–º–µ—Ä/i, // –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      /–∑–∞–¥–∞—á–∞|–¥–µ–ª–æ|–ø–ª–∞–Ω|—Ü–µ–ª—å/i, // –∑–∞–¥–∞—á–∏
      /–ø—Ä–∏–≤—ã—á–∫–∞|—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞|—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ/i, // –ø—Ä–∏–≤—ã—á–∫–∏
      /^\d+/, // —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —Ü–∏—Ñ—Ä
      /:\d{2}/, // –ª—é–±–æ–µ –≤—Ä–µ–º—è
      /\d+\s*(–º–∏–Ω—É—Ç|—á–∞—Å–æ–≤|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü–µ–≤)/i, // –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
      /–Ω—É–∂–Ω–æ|–Ω–∞–¥–æ|–¥–æ–ª–∂–µ–Ω|–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ/i, // —Å–ª–æ–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    const hasExclusions = excludePatterns.some((pattern) => pattern.test(text));
    if (hasExclusions) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const isGeneral = generalPatterns.some((pattern) => pattern.test(text));

    return isGeneral;
  }

  private async processTaskFromText(
    ctx: BotContext,
    text: string,
  ): Promise<void> {
    // Handle time-based tasks with extended patterns
    console.log(`üîç Processing task from text: "${text}"`);

    // Handle relative time for tasks (—á–µ—Ä–µ–∑ X –º–∏–Ω—É—Ç/—á–∞—Å–æ–≤/–¥–Ω–µ–π/–Ω–µ–¥–µ–ª—å/–º–µ—Å—è—Ü–µ–≤/–ª–µ—Ç)
    const relativeMatch = text.match(
      /—á–µ—Ä–µ–∑\s*(\d+)\s*(–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)/i,
    );

    if (relativeMatch) {
      const amount = parseInt(relativeMatch[1]);
      const unit = relativeMatch[2].toLowerCase();

      const now = new Date();
      let targetDate = new Date(now);

      // Calculate target date based on unit
      if (unit.includes('–º–∏–Ω—É—Ç')) {
        targetDate.setMinutes(targetDate.getMinutes() + amount);
      } else if (unit.includes('—á–∞—Å')) {
        targetDate.setHours(targetDate.getHours() + amount);
      } else if (
        unit.includes('–¥–µ–Ω—å') ||
        unit.includes('–¥–Ω—è') ||
        unit.includes('–¥–Ω–µ–π')
      ) {
        targetDate.setDate(targetDate.getDate() + amount);
      } else if (unit.includes('–Ω–µ–¥–µ–ª')) {
        targetDate.setDate(targetDate.getDate() + amount * 7);
      } else if (unit.includes('–º–µ—Å—è—Ü')) {
        targetDate.setMonth(targetDate.getMonth() + amount);
      } else if (unit.includes('–≥–æ–¥') || unit.includes('–ª–µ—Ç')) {
        targetDate.setFullYear(targetDate.getFullYear() + amount);
      }

      const taskText = text
        .replace(
          /—á–µ—Ä–µ–∑\s*\d+\s*(?:–º–∏–Ω—É—Ç|—á–∞—Å|–¥–µ–Ω—å|–¥–Ω—è|–¥–Ω–µ–π|–Ω–µ–¥–µ–ª—é|–Ω–µ–¥–µ–ª–∏|–Ω–µ–¥–µ–ª—å|–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞|–º–µ—Å—è—Ü–µ–≤|–≥–æ–¥|–≥–æ–¥–∞|–ª–µ—Ç)(?:–∞|–æ–≤)?/gi,
          '',
        )
        .trim();

      // If it's more than a day, we need special handling
      if (
        amount > 0 &&
        (unit.includes('–¥–µ–Ω—å') ||
          unit.includes('–Ω–µ–¥–µ–ª') ||
          unit.includes('–º–µ—Å—è—Ü') ||
          unit.includes('–≥–æ–¥') ||
          unit.includes('–ª–µ—Ç'))
      ) {
        await this.handleLongTermTask(ctx, taskText, targetDate, amount, unit);
        return;
      }

      // For short-term tasks (minutes/hours), create immediately with deadline
      await this.createTaskWithDeadline(ctx, taskText, targetDate);
      return;
    }

    // Handle specific time expressions for tasks (–∑–∞–≤—Ç—Ä–∞, –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ, etc.)
    const specificTimeMatch = this.parseSpecificTimeExpressionsForTasks(text);
    if (specificTimeMatch) {
      const { targetDate, taskText } = specificTimeMatch;

      // Default to 9:00 AM for date-only tasks
      targetDate.setHours(9, 0, 0, 0);

      await this.handleLongTermTask(ctx, taskText, targetDate, 0, 'specific');
      return;
    }

    // Handle concrete time patterns (–≤ 15:30, –∑–∞–≤—Ç—Ä–∞ –≤ 14:00)
    const concreteTimeMatch = text.match(/–≤\s*(\d{1,2}):(\d{2})/i);
    if (concreteTimeMatch) {
      const hours = parseInt(concreteTimeMatch[1]);
      const minutes = parseInt(concreteTimeMatch[2]);

      if (hours >= 0 && hours <= 23 && minutes >= 0 && minutes <= 59) {
        const targetDate = new Date();
        targetDate.setHours(hours, minutes, 0, 0);

        // If time has passed today, set for tomorrow
        if (targetDate.getTime() <= new Date().getTime()) {
          targetDate.setDate(targetDate.getDate() + 1);
        }

        const taskText = text.replace(/–≤\s*\d{1,2}:\d{2}/gi, '').trim();

        await this.createTaskWithDeadline(ctx, taskText, targetDate);
        return;
      }
    }

    // No specific time found - create regular task
    await this.createTaskFromText(ctx, text);
  }

  private async createTaskFromText(ctx: BotContext, text: string) {
    try {
      const user = await this.userService.findByTelegramId(ctx.userId);

      if (!user.timezone) {
        ctx.session.step = 'waiting_for_task_title';
        ctx.session.tempData = { taskTitle: text };
        await this.askForTimezone(ctx);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏
      const intervalInfo = this.extractTimeIntervalFromText(text.trim());

      if (intervalInfo) {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
        const habit = await this.habitService.createHabit({
          userId: ctx.userId,
          title: text.trim(),
          description: `–ü—Ä–∏–≤—ã—á–∫–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º: ${intervalInfo.interval}`,
          frequency: 'DAILY',
          reminderTime: intervalInfo.interval,
        });

        // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞
        // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

        let responseMessage = `‚úÖ *–ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!*\n\nüìù **"${habit.title}"**\n\nÔøΩ **–û–ø–∏—Å–∞–Ω–∏–µ:** ${intervalInfo.interval}\n\nüí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –º–µ–Ω—é –ø—Ä–∏–≤—ã—á–µ–∫.`;

        await ctx.replyWithMarkdown(responseMessage, {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
                  callback_data: `habit_set_reminder_${habit.id}`,
                },
              ],
              [{ text: 'üéØ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'habits_list' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        });
      } else {
        // –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        const task = await this.taskService.createTask({
          userId: ctx.userId,
          title: text.trim(),
        });

        let responseMessage = `‚úÖ *–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!*\n\nüìù **"${task.title}"**\n\n–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –µ—ë –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏".`;
        responseMessage += `\n\nüí° *–ü–æ–¥—Å–∫–∞–∑–∫–∏:*
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: "–Ω–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –≤ 17:30"
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ: "–Ω–∞–ø–æ–º–∏–Ω–∞–π –ø–∏—Ç—å –≤–æ–¥—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"`;

        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞—á–∏
        // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        this.logger.log(`[LOG] Reminder button raw title: ${task.title}`);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–∑–∂–µ
        if (!ctx.session.tempData) {
          ctx.session.tempData = {};
        }
        ctx.session.tempData.pendingReminderTitle = task.title;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∑–∞–¥–∞—á–∏ –∫–∞–∫ –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        const reminderCallback = `create_reminder_${task.id.slice(0, 10)}`;
        this.logger.log(
          `[LOG] Reminder button safe callback: ${reminderCallback}`,
        );

        await ctx.replyWithMarkdown(responseMessage, {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'tasks_list' }],
              [
                {
                  text: 'üîî –°–æ–∑–¥–∞—Ç—å –∫–∞–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
                  callback_data: reminderCallback,
                },
              ],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        });
      }
    } catch (error) {
      this.logger.error(`Error creating task from text: ${error}`);
      await ctx.replyWithMarkdown(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    }
  }

  private async showTasksAIAdvice(ctx: BotContext) {
    try {
      await ctx.editMessageTextWithMarkdown('ü§î *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –∑–∞–¥–∞—á–∏...*');

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –∑–∞–¥–∞—á–∞–º
      const aiAdvice = await this.aiContextService.generatePersonalizedMessage(
        ctx.userId,
        'task_suggestion',
        '',
      );

      await ctx.editMessageTextWithMarkdown(
        `
ü§ñ *AI-—Å–æ–≤–µ—Ç –ø–æ –∑–∞–¥–∞—á–∞–º:*

${aiAdvice}

üí° *–•–æ—Ç–∏—Ç–µ –µ—â—ë —Å–æ–≤–µ—Ç—ã?* –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ —á–∞—Ç!
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data: 'tasks_add' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –∑–∞–¥–∞—á', callback_data: 'menu_tasks' }],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error('Error getting AI advice for tasks:', error);
      await ctx.editMessageTextWithMarkdown(
        `
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI-—Å–æ–≤–µ—Ç*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç!
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –∑–∞–¥–∞—á', callback_data: 'menu_tasks' }],
            ],
          },
        },
      );
    }
  }

  private async showHabitsAIAdvice(ctx: BotContext) {
    try {
      await ctx.editMessageTextWithMarkdown('ü§î *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏...*');

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º
      const aiAdvice = await this.aiContextService.generatePersonalizedMessage(
        ctx.userId,
        'habit_advice',
        '',
      );

      await ctx.editMessageTextWithMarkdown(
        `
ü§ñ *AI-—Å–æ–≤–µ—Ç –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º:*

${aiAdvice}

üí° *–•–æ—Ç–∏—Ç–µ –µ—â—ë —Å–æ–≤–µ—Ç—ã?* –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ —á–∞—Ç!
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º', callback_data: 'menu_habits' }],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error('Error getting AI advice for habits:', error);
      await ctx.editMessageTextWithMarkdown(
        `
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI-—Å–æ–≤–µ—Ç*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç!
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º', callback_data: 'menu_habits' }],
            ],
          },
        },
      );
    }
  }

  // Command handler methods
  private async showHabitsMenu(ctx: BotContext) {
    const user = await this.userService.findByTelegramId(ctx.userId);
    if (!user.timezone) {
      ctx.session.step = 'adding_habit';
      await this.askForTimezone(ctx);
    } else {
      try {
        const habits = await this.habitService.findHabitsByUserId(ctx.userId);

        if (habits.length === 0) {
          const message = `üéØ *–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.\n\nüí° –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!`;

          const keyboard = {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üéØ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É', callback_data: 'habits_add' }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          };

          if (ctx.callbackQuery) {
            await ctx.editMessageTextWithMarkdown(message, keyboard);
          } else {
            await ctx.replyWithMarkdown(message, keyboard);
          }
        } else {
          let message = `üéØ *–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏*\n\n`;

          // Get user data first
          const user = await this.userService.findByTelegramId(ctx.userId);

          // Create progress bar for today's completion
          const today_str = new Date().toISOString().split('T')[0];
          // For now, use a simple logic - you'll need to implement proper daily tracking
          const completedCount = Math.floor(habits.length * 0.3); // Placeholder: 30% completed
          const totalHabits = habits.length;

          // Progress bar visualization (red -> yellow -> green)
          const progressPercentage =
            totalHabits > 0 ? (completedCount / totalHabits) * 100 : 0;
          let progressColor = 'üî¥';
          if (progressPercentage >= 30 && progressPercentage < 70) {
            progressColor = 'üü°';
          } else if (progressPercentage >= 70) {
            progressColor = 'üü¢';
          }

          const progressBar =
            '‚ñà'.repeat(Math.floor(progressPercentage / 10)) +
            '‚ñë'.repeat(10 - Math.floor(progressPercentage / 10));

          message += `${progressColor} **–ü—Ä–æ–≥—Ä–µ—Å—Å:** ${progressBar} ${completedCount}/${totalHabits}\n\n`;
          message += `üíé **XP:** ${user.totalXp || 0} | üèÜ **–£—Ä–æ–≤–µ–Ω—å:** ${user.level || 1}\n\n`;
          message += `üìÖ **${new Date().toLocaleDateString('ru-RU')}**\n\n`;

          // Add habits list with completion checkmarks
          for (const habit of habits.slice(0, 8)) {
            // For now, use currentStreak > 0 as completed indicator
            const isCompleted = habit.currentStreak > 0;
            const checkMark = isCompleted ? '‚úÖ' : '‚≠ï';
            message += `${checkMark} ${habit.title}\n`;
          }

          if (habits.length > 10) {
            message += `*... –∏ –µ—â–µ ${habits.length - 10} –ø—Ä–∏–≤—ã—á–µ–∫*\n\n`;
          }

          message += `üî• **–û–±—â–∞—è —Å–µ—Ä–∏—è:** ${user.currentStreak || 0} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n`;
          message += `‚≠ê **–û–±—â–∏–π XP:** ${user.totalXp || 0}`;

          // Create keyboard with habit management
          const keyboard = {
            reply_markup: {
              inline_keyboard: [
                // Quick completion buttons for incomplete habits
                ...habits
                  .filter((h) => h.currentStreak === 0)
                  .slice(0, 4)
                  .map((habit) => [
                    {
                      text: `‚úÖ ${habit.title.substring(0, 30)}${habit.title.length > 30 ? '...' : ''}`,
                      callback_data: `habit_complete_${habit.id}`,
                    },
                  ]),
                // Management and additional buttons
                [
                  {
                    text: '‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫',
                    callback_data: 'habits_management',
                  },
                ],
                [
                  { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data: 'habits_add' },
                  {
                    text: 'ü§ñ AI - —Å–æ–≤–µ—Ç –ø–æ –∑–∞–¥–∞—á–∞–º',
                    callback_data: 'habits_ai_advice',
                  },
                ],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          };

          if (ctx.callbackQuery) {
            await ctx.editMessageTextWithMarkdown(message, keyboard);
          } else {
            await ctx.replyWithMarkdown(message, keyboard);
          }
        }
      } catch (error) {
        this.logger.error(`Error fetching habits: ${error}`);

        const errorMessage =
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–≤—ã—á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        const errorKeyboard = {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        };

        if (ctx.callbackQuery) {
          await ctx.editMessageTextWithMarkdown(errorMessage, errorKeyboard);
        } else {
          await ctx.replyWithMarkdown(errorMessage, errorKeyboard);
        }
      }
    }
  }

  private getHabitProgressAnimation(completionCount: number): string {
    // –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
    const maxBars = 8;
    const levels = [5, 15, 30, 50, 100]; // –£—Ä–æ–≤–Ω–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞–¥–∏–π

    let currentLevel = 0;
    for (let i = 0; i < levels.length; i++) {
      if (completionCount >= levels[i]) {
        currentLevel = i + 1;
      }
    }

    const filledBars = Math.min(currentLevel * 2, maxBars);
    const emptyBars = maxBars - filledBars;

    // –†–∞–∑–Ω—ã–µ –≤–∏–¥—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
    let barChar = '‚ñì';
    let emptyChar = '‚ñë';

    if (currentLevel >= 4) {
      barChar = 'üî•'; // –û–≥–æ–Ω—å –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
    } else if (currentLevel >= 3) {
      barChar = '‚≠ê'; // –ó–≤–µ–∑–¥—ã –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
    } else if (currentLevel >= 2) {
      barChar = 'üí™'; // –ú—É—Å–∫—É–ª—ã –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
    }

    return `${barChar.repeat(Math.max(1, filledBars))}${emptyChar.repeat(emptyBars)}`;
  }

  private async showHabitDetails(ctx: BotContext, habitId: string) {
    try {
      const habit = await this.habitService.findHabitById(habitId, ctx.userId);

      if (!habit) {
        await ctx.editMessageTextWithMarkdown(
          '‚ùå *–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*\n\n–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–∏–≤—ã—á–µ–∫',
                    callback_data: 'habits_list',
                  },
                ],
              ],
            },
          },
        );
        return;
      }

      // Format reminder time
      let reminderText = 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã';
      if (habit.reminderTime) {
        reminderText = `‚è∞ ${habit.reminderTime}`;
      }

      const frequencyText =
        habit.frequency === 'DAILY'
          ? '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ'
          : habit.frequency === 'WEEKLY'
            ? '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ'
            : '–û—Å–æ–±–∞—è';

      const message = `
üéØ *${habit.title}*

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: ${habit.currentStreak} –¥–Ω–µ–π
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: ${habit.maxStreak} –¥–Ω–µ–π  
‚Ä¢ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${habit.totalCompletions} —Ä–∞–∑

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å: ${frequencyText}
‚Ä¢ ${reminderText}

*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*
      `;

      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ–π—á–∞—Å',
                callback_data: `habit_complete_${habit.id}`,
              },
            ],
            [
              {
                text: 'üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
                callback_data: `habit_set_time_${habit.id}`,
              },
            ],
            [
              {
                text: 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å',
                callback_data: `habit_frequency_${habit.id}`,
              },
            ],
            [
              {
                text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É',
                callback_data: `delete_habit_${habit.id}`,
              },
            ],
            [
              {
                text: 'üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–∏–≤—ã—á–µ–∫',
                callback_data: 'habits_list',
              },
            ],
          ],
        },
      };

      await ctx.editMessageTextWithMarkdown(message, keyboard);
    } catch (error) {
      this.logger.error(`Error showing habit details: ${error}`);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–∫–∏*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–∏–≤—ã—á–µ–∫', callback_data: 'habits_list' }],
            ],
          },
        },
      );
    }
  }

  private async showMoodMenu(ctx: BotContext) {
    const message = `
üòä *–î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è*

–û—Ç–º–µ—Ç—å—Ç–µ —Å–≤–æ–µ —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:
      `;

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üòÑ –û—Ç–ª–∏—á–Ω–æ', callback_data: 'mood_excellent' },
            { text: 'üòä –•–æ—Ä–æ—à–æ', callback_data: 'mood_good' },
          ],
          [
            { text: 'üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ', callback_data: 'mood_neutral' },
            { text: 'üòî –ì—Ä—É—Å—Ç–Ω–æ', callback_data: 'mood_sad' },
          ],
          [
            { text: 'üò§ –ó–ª–æ–π', callback_data: 'mood_angry' },
            { text: 'üò∞ –¢—Ä–µ–≤–æ–∂–Ω–æ', callback_data: 'mood_anxious' },
          ],
          [
            {
              text: 'ü§ñ AI-–∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
              callback_data: 'mood_ai_analysis',
            },
          ],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
        ],
      },
    };

    // Check if this is a callback query (can edit) or command (need to reply)
    if (ctx.callbackQuery) {
      await ctx.editMessageTextWithMarkdown(message, keyboard);
    } else {
      await ctx.replyWithMarkdown(message, keyboard);
    }
  }

  private async showMoodAIAnalysis(ctx: BotContext) {
    try {
      await ctx.editMessageTextWithMarkdown(
        'ü§î *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ...*',
      );

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
      const aiAnalysis =
        await this.aiContextService.generatePersonalizedMessage(
          ctx.userId,
          'mood_analysis',
          '',
        );

      await ctx.editMessageTextWithMarkdown(
        `
ü§ñ *AI-–∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:*

${aiAnalysis}

üí° *–•–æ—Ç–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã?* –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ —á–∞—Ç!
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üòä –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', callback_data: 'menu_mood' }],
              [{ text: 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error('Error getting AI mood analysis:', error);
      await ctx.editMessageTextWithMarkdown(
        `
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI-–∞–Ω–∞–ª–∏–∑*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç!
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é', callback_data: 'menu_mood' }],
            ],
          },
        },
      );
    }
  }

  private async showFocusSession(ctx: BotContext) {
    await this.showPomodoroMenu(ctx);
  }

  private async showRemindersMenu(ctx: BotContext) {
    try {
      this.logger.log('showRemindersMenu called for user:', ctx.userId);

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const reminders = await this.prisma.reminder.findMany({
        where: {
          userId: ctx.userId,
          status: ReminderStatus.ACTIVE,
          scheduledTime: {
            gte: new Date(), // –¢–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
          },
        },
        orderBy: {
          scheduledTime: 'asc',
        },
        take: 10, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –±–ª–∏–∂–∞–π—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
      });

      this.logger.log(
        `Found ${reminders.length} active reminders for user ${ctx.userId}`,
      );

      let message = `üîî *–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n`;

      if (reminders.length === 0) {
        message += `–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\nüí° –°–æ–∑–¥–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –Ω–∞–ø–∏—Å–∞–≤:\n"–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –≤ 17:30"`;

        const keyboard = {
          inline_keyboard: [
            [
              {
                text: '‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
                callback_data: 'create_reminder_help',
              },
              { text: 'üé§ –ì–æ–ª–æ—Å–æ–º', callback_data: 'voice_reminder_help' },
            ],
            [{ text: 'üìù –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data: 'all_reminders' }],
            [
              { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' },
              { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' },
            ],
          ],
        };

        if (ctx.callbackQuery) {
          await ctx.editMessageTextWithMarkdown(message, {
            reply_markup: keyboard,
          });
        } else {
          await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
        }
        return;
      }

      message += `üìä **–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:** ${reminders.length}\n\n`;
      message += `*–ë–ª–∏–∂–∞–π—à–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n\n`;

      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
      for (let i = 0; i < Math.min(5, reminders.length); i++) {
        const reminder = reminders[i];

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        this.logger.log(`Reminder ${i}: `, {
          id: reminder.id,
          title: reminder.title,
          scheduledTime: reminder.scheduledTime,
        });

        const date = new Date(reminder.scheduledTime);
        const dateStr = date.toLocaleDateString('ru-RU', {
          day: 'numeric',
          month: 'short',
        });
        const timeStr = date.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º title –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        const cleanTitle = reminder.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';

        message += `${i + 1}. üìù ${cleanTitle}\n`;
        message += `    ‚è∞ ${dateStr} –≤ ${timeStr}\n\n`;
      }

      if (reminders.length > 5) {
        message += `... –∏ –µ—â–µ ${reminders.length - 5} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π`;
      }

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: '‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
              callback_data: 'create_reminder_help',
            },
            { text: 'üé§ –ì–æ–ª–æ—Å–æ–º', callback_data: 'voice_reminder_help' },
          ],
          [{ text: 'üìù –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data: 'all_reminders' }],
          [
            { text: '‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data: 'manage_reminders' },
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'reminders_stats' },
          ],
          [
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' },
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' },
          ],
        ],
      };

      if (ctx.callbackQuery) {
        await ctx.editMessageTextWithMarkdown(message, {
          reply_markup: keyboard,
        });
      } else {
        await ctx.replyWithMarkdown(message, { reply_markup: keyboard });
      }
    } catch (error) {
      this.logger.error(`Error fetching reminders: ${error}`);

      const errorMessage =
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      const errorKeyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' },
              { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' },
            ],
            [],
          ],
        },
      };

      if (ctx.callbackQuery) {
        await ctx.editMessageTextWithMarkdown(errorMessage, errorKeyboard);
      } else {
        await ctx.replyWithMarkdown(errorMessage, errorKeyboard);
      }
    }
  }

  private async showAllReminders(ctx: BotContext) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
      const activeReminders = await this.prisma.reminder.findMany({
        where: {
          userId: ctx.userId,
          status: ReminderStatus.ACTIVE,
        },
        orderBy: {
          scheduledTime: 'asc',
        },
      });

      const completedReminders = await this.prisma.reminder.findMany({
        where: {
          userId: ctx.userId,
          status: { in: [ReminderStatus.COMPLETED, ReminderStatus.DISMISSED] },
        },
        orderBy: {
          scheduledTime: 'desc',
        },
        take: 5, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
      });

      let message = `üîî *–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n`;

      // –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∫ —á–µ–∫-–ª–∏—Å—Ç
      const allButtons: any[] = [];
      if (activeReminders.length > 0) {
        message += `üü¢ **–ê–∫—Ç–∏–≤–Ω—ã–µ (${activeReminders.length}):**\n\n`;
        activeReminders.forEach((reminder, index) => {
          const date = new Date(reminder.scheduledTime);
          const isToday = date.toDateString() === new Date().toDateString();
          const isTomorrow =
            date.toDateString() ===
            new Date(Date.now() + 24 * 60 * 60 * 1000).toDateString();

          let dateStr;
          if (isToday) {
            dateStr = '—Å–µ–≥–æ–¥–Ω—è';
          } else if (isTomorrow) {
            dateStr = '–∑–∞–≤—Ç—Ä–∞';
          } else {
            dateStr = date.toLocaleDateString('ru-RU', {
              day: 'numeric',
              month: 'short',
            });
          }

          const timeStr = date.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
          });

          // –ö–Ω–æ–ø–∫–∞ —Å –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
          allButtons.push([
            {
              text: `‚¨ú ${reminder.title} (${dateStr} –≤ ${timeStr})`,
              callback_data: `toggle_reminder_${reminder.id}`,
            },
          ]);
        });
      } else {
        message += `üü¢ **–ê–∫—Ç–∏–≤–Ω—ã–µ:** –Ω–µ—Ç\n\n`;
      }

      // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      if (completedReminders.length > 0) {
        message += `\n‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ ${completedReminders.length}):**\n\n`;
        completedReminders.forEach((reminder, index) => {
          const date = new Date(reminder.scheduledTime);
          const dateStr = date.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'short',
          });
          const timeStr = date.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
          });

          // –ö–Ω–æ–ø–∫–∞ —Å –∑–µ–ª–µ–Ω—ã–º –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–æ–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
          allButtons.push([
            {
              text: `‚úÖ ${reminder.title} (${dateStr} –≤ ${timeStr})`,
              callback_data: `toggle_reminder_${reminder.id}`,
            },
          ]);
        });
      } else {
        message += `\n‚úÖ **–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ:** –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏\n`;
      }

      const keyboard = {
        inline_keyboard: [
          ...allButtons,
          [
            { text: 'üîî –ê–∫—Ç–∏–≤–Ω—ã–µ', callback_data: 'reminders' },
            { text: '‚ûï –°–æ–∑–¥–∞—Ç—å', callback_data: 'create_reminder_help' },
          ],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'reminders' }],
        ],
      };
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      this.bot.action(/^toggle_reminder_(.+)$/, async (ctx) => {
        const reminderId = ctx.match[1];
        try {
          // –ù–∞–π–¥–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å
          const reminder = await this.prisma.reminder.findUnique({
            where: { id: reminderId },
          });

          if (reminder) {
            const newStatus =
              reminder.status === ReminderStatus.ACTIVE
                ? ReminderStatus.COMPLETED
                : ReminderStatus.ACTIVE;

            await this.prisma.reminder.update({
              where: { id: reminderId },
              data: { status: newStatus },
            });

            const statusText =
              newStatus === ReminderStatus.COMPLETED
                ? '–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º'
                : '–∞–∫—Ç–∏–≤–Ω—ã–º';

            await ctx.answerCbQuery(`–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ ${statusText}!`);
            await this.showAllReminders(ctx);
          }
        } catch (error) {
          this.logger.error('Error toggling reminder status:', error);
          await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
        }
      });

      await ctx.editMessageTextWithMarkdown(message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      this.logger.error(`Error fetching all reminders: ${error}`);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'reminders' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    }
  }

  private async showCreateReminderHelp(ctx: BotContext) {
    try {
      const message = `
‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*

**–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:**

üìù **–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:**
‚Ä¢ "–Ω–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –≤ 17:30"
‚Ä¢ "–Ω–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"
‚Ä¢ "–Ω–∞–ø–æ–º–Ω–∏ –≤—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00"
‚Ä¢ "–Ω–∞–ø–æ–º–Ω–∏ –ø—Ä–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –≤ 20:00"

‚è∞ **–§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:**
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è: "–≤ 15:30", "–Ω–∞ 18:00"
‚Ä¢ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: "—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç", "—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"

üí° **–°–æ–≤–µ—Ç:** –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç —á—Ç–æ –∏ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å!
      `;

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üîî –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data: 'reminders' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'reminders' }],
        ],
      };

      await ctx.editMessageTextWithMarkdown(message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      this.logger.error('Error in showCreateReminderHelp:', error);
      try {
        await ctx.replyWithMarkdown('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      } catch (replyError) {
        this.logger.error('Error sending error message:', replyError);
      }
    }
  }

  private async showVoiceReminderHelp(ctx: BotContext) {
    const message = `
üé§ *–ì–æ–ª–æ—Å–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*

üîä **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ** —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–µ–º

**–ü—Ä–∏–º–µ—Ä—ã:**
üéôÔ∏è "–ù–∞–ø–æ–º–Ω–∏ –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –∑–∞–≤—Ç—Ä–∞ –≤ 17:30"
üéôÔ∏è "–ù–∞–ø–æ–º–Ω–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞"
üéôÔ∏è "–ù–∞–ø–æ–º–Ω–∏ –ø—Ä–æ –≤—Å—Ç—Ä–µ—á—É –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 14:00"

üí° –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è
    `;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üìù –¢–µ–∫—Å—Ç–æ–º', callback_data: 'create_reminder_help' }],
        [{ text: 'üîî –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data: 'reminders' }],
        [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'reminders' },
          { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' },
        ],
      ],
    };

    await ctx.editMessageTextWithMarkdown(message, { reply_markup: keyboard });
  }

  private async showManageReminders(ctx: BotContext) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const reminders = await this.prisma.reminder.findMany({
        where: {
          userId: ctx.userId,
          status: ReminderStatus.ACTIVE,
        },
        orderBy: {
          scheduledTime: 'asc',
        },
      });

      let message = `‚úèÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏*\n\n`;

      if (reminders.length === 0) {
        message += `–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n`;
        message += `üí° –°–æ–∑–¥–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º.`;

        const keyboard = {
          inline_keyboard: [
            [
              {
                text: '‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
                callback_data: 'create_reminder_help',
              },
            ],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'reminders' }],
          ],
        };

        await ctx.editMessageTextWithMarkdown(message, {
          reply_markup: keyboard,
        });
        return;
      }

      message += `üìä **–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:** ${reminders.length}\n\n`;
      message += `*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*\n\n`;

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 8)
      const keyboard = {
        inline_keyboard: [
          ...reminders.slice(0, 8).map((reminder) => {
            const date = new Date(reminder.scheduledTime);
            const timeStr = date.toLocaleTimeString('ru-RU', {
              hour: '2-digit',
              minute: '2-digit',
            });
            const title =
              reminder.title.length > 25
                ? reminder.title.substring(0, 25) + '...'
                : reminder.title;

            return [
              {
                text: `üóëÔ∏è ${title} (${timeStr})`,
                callback_data: `delete_reminder_${reminder.id}`,
              },
            ];
          }),
          [
            { text: 'üîî –ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º', callback_data: 'reminders' },
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'reminders' },
          ],
        ],
      };

      if (reminders.length > 8) {
        message += `\n... –∏ –µ—â–µ ${reminders.length - 8} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n`;
        message += `_–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 8 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π_`;
      }

      await ctx.editMessageTextWithMarkdown(message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      this.logger.error(`Error showing manage reminders: ${error}`);
      await ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'reminders' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      });
    }
  }

  private async showRemindersStats(ctx: BotContext) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º
      const totalActive = await this.prisma.reminder.count({
        where: {
          userId: ctx.userId,
          status: ReminderStatus.ACTIVE,
        },
      });

      const totalCompleted = await this.prisma.reminder.count({
        where: {
          userId: ctx.userId,
          status: ReminderStatus.COMPLETED,
        },
      });

      const totalDismissed = await this.prisma.reminder.count({
        where: {
          userId: ctx.userId,
          status: ReminderStatus.DISMISSED,
        },
      });

      const todayCompleted = await this.prisma.reminder.count({
        where: {
          userId: ctx.userId,
          status: ReminderStatus.COMPLETED,
          scheduledTime: {
            gte: new Date(new Date().setHours(0, 0, 0, 0)),
            lte: new Date(new Date().setHours(23, 59, 59, 999)),
          },
        },
      });

      // –ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
      const nextReminder = await this.prisma.reminder.findFirst({
        where: {
          userId: ctx.userId,
          status: ReminderStatus.ACTIVE,
          scheduledTime: {
            gte: new Date(),
          },
        },
        orderBy: {
          scheduledTime: 'asc',
        },
      });

      let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*\n\n`;

      message += `**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
      message += `üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${totalActive}\n`;
      message += `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${totalCompleted}\n`;
      message += `‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${totalDismissed}\n`;
      message += `üìà –í—Å–µ–≥–æ: ${totalActive + totalCompleted + totalDismissed}\n\n`;

      message += `**–°–µ–≥–æ–¥–Ω—è:**\n`;
      message += `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${todayCompleted}\n\n`;

      if (nextReminder) {
        const nextDate = new Date(nextReminder.scheduledTime);
        const isToday = nextDate.toDateString() === new Date().toDateString();
        const isTomorrow =
          nextDate.toDateString() ===
          new Date(Date.now() + 24 * 60 * 60 * 1000).toDateString();

        let dateStr;
        if (isToday) {
          dateStr = '—Å–µ–≥–æ–¥–Ω—è';
        } else if (isTomorrow) {
          dateStr = '–∑–∞–≤—Ç—Ä–∞';
        } else {
          dateStr = nextDate.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'short',
          });
        }

        const timeStr = nextDate.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
        });

        message += `**–ë–ª–∏–∂–∞–π—à–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:**\n`;
        message += `üìù ${nextReminder.title}\n`;
        message += `‚è∞ ${dateStr} –≤ ${timeStr}`;
      } else {
        message += `**–ë–ª–∏–∂–∞–π—à–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:**\n`;
        message += `–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π`;
      }

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üîî –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data: 'reminders' },
            { text: '‚ûï –°–æ–∑–¥–∞—Ç—å', callback_data: 'create_reminder_help' },
          ],
          [
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'reminders' },
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' },
          ],
        ],
      };

      await ctx.editMessageTextWithMarkdown(message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      this.logger.error(`Error showing reminders stats: ${error}`);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'reminders' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    }
  }

  private async handleDeleteReminder(ctx: BotContext, reminderId: string) {
    try {
      // –ù–∞–π–¥–µ–º –∏ —É–¥–∞–ª–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
      const reminder = await this.prisma.reminder.findFirst({
        where: {
          id: reminderId,
          userId: ctx.userId, // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        },
      });

      if (!reminder) {
        await ctx.editMessageTextWithMarkdown(
          '‚ùå *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*\n\n–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîî –ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º', callback_data: 'reminders' }],
              ],
            },
          },
        );
        return;
      }

      // –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
      await this.prisma.reminder.delete({
        where: {
          id: reminderId,
        },
      });

      await ctx.editMessageTextWithMarkdown(
        `‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ*\n\nüìù "${reminder.title}" –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data: 'manage_reminders' },
                { text: 'üîî –ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º', callback_data: 'reminders' },
              ],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error(`Error deleting reminder: ${error}`);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'manage_reminders' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    }
  }

  private async showFocusAITips(ctx: BotContext) {
    try {
      await ctx.editMessageTextWithMarkdown(
        'ü§î *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ–æ–∫—É—Å–∞...*',
      );

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ñ–æ–∫—É—Å—É
      const aiTips = await this.aiContextService.generatePersonalizedMessage(
        ctx.userId,
        'focus_tips',
        '',
      );

      await ctx.editMessageTextWithMarkdown(
        `
ü§ñ *AI-—Å–æ–≤–µ—Ç—ã –ø–æ —Ñ–æ–∫—É—Å—É:*

${aiTips}

üí° *–•–æ—Ç–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å?* –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ —á–∞—Ç!
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üöÄ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é',
                  callback_data: 'start_pomodoro_session',
                },
              ],
              [{ text: 'üîô –ö —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—è–º', callback_data: 'menu_focus' }],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error('Error getting AI focus tips:', error);
      await ctx.editMessageTextWithMarkdown(
        `
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å AI-—Å–æ–≤–µ—Ç—ã*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ —á–∞—Ç!
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ö —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏—è–º', callback_data: 'menu_focus' }],
            ],
          },
        },
      );
    }
  }

  private async createPayment(
    ctx: BotContext,
    subscriptionType: 'PREMIUM',
    amount?: number,
  ) {
    try {
      const plans = this.paymentService.getSubscriptionPlans();

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞–Ω –ø–æ —Å—É–º–º–µ
      let plan;
      if (amount === 999) {
        plan = plans.PREMIUM_YEARLY;
      } else {
        plan = plans.PREMIUM_MONTHLY;
        amount = 199; // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Å—É–º–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è
      }

      await ctx.editMessageTextWithMarkdown('üí≥ *–°–æ–∑–¥–∞—é –ø–ª–∞—Ç–µ–∂...*');

      const paymentResult = await this.paymentService.createPayment({
        userId: ctx.userId,
        amount: plan.amount,
        description: plan.description,
        subscriptionType: subscriptionType,
        returnUrl: 'https://t.me/daily_check_bot',
      });

      const planName =
        amount === 999 ? 'Premium (–≥–æ–¥–æ–≤–∞—è)' : 'Premium (–º–µ—Å—è—á–Ω–∞—è)';

      await ctx.editMessageTextWithMarkdown(
        `
üíé *–û–ø–ª–∞—Ç–∞ ${planName}*

üí∞ **–°—É–º–º–∞:** ${plan.amount}‚ÇΩ
üìÖ **–ü–µ—Ä–∏–æ–¥:** ${plan.period}

**–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:**
${plan.features.map((feature) => `‚Ä¢ ${feature}`).join('\n')}

üîó –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å',
                  url: paymentResult.confirmationUrl,
                },
              ],
              [
                {
                  text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',
                  callback_data: `check_payment_${paymentResult.paymentId}`,
                },
              ],
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'upgrade_premium' }],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error('Error creating payment:', error);
      await ctx.editMessageTextWithMarkdown(
        `
‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'upgrade_premium' }],
            ],
          },
        },
      );
    }
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–≤–∞—è –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  private async getOrCreateUser(ctx: BotContext): Promise<User> {
    try {
      return await this.userService.findByTelegramId(ctx.userId);
    } catch (error) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
      const userData = {
        id: ctx.from?.id.toString() || ctx.userId,
        username: ctx.from?.username || undefined,
        firstName: ctx.from?.first_name || undefined,
        lastName: ctx.from?.last_name || undefined,
      };

      return await this.userService.findOrCreateUser(userData);
    }
  }

  /**
   * Handles XP purchases from the shop
   */
  private async handleXPPurchase(
    ctx: BotContext,
    itemType: 'theme' | 'badge' | 'emoji' | 'sticker' | 'feature',
    cost: number,
    itemName: string,
    itemId: string,
  ): Promise<void> {
    await ctx.answerCbQuery();

    try {
      const user = await this.userService.findByTelegramId(ctx.userId);

      // Check if user has enough XP
      if (user.totalXp < cost) {
        await ctx.editMessageTextWithMarkdown(
          `‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ XP*

–î–ª—è –ø–æ–∫—É–ø–∫–∏ "${itemName}" –Ω—É–∂–Ω–æ ${cost} XP.
–£ –≤–∞—Å: ${user.totalXp} XP
–ù—É–∂–Ω–æ –µ—â–µ: ${cost - user.totalXp} XP

üí™ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ XP!`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω', callback_data: 'xp_shop' }],
              ],
            },
          },
        );
        return;
      }

      // Check if user already owns this item
      const alreadyOwned = this.checkIfUserOwnsItem(user, itemType, itemId);

      if (alreadyOwned) {
        await ctx.editMessageTextWithMarkdown(
          `‚úÖ *–£–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ*

–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å "${itemName}".

–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω', callback_data: 'xp_shop' }],
              ],
            },
          },
        );
        return;
      }

      // Process purchase
      await this.processXPPurchase(user, itemType, itemId);

      // Update user XP
      await this.userService.updateStats(ctx.userId, {
        xpGained: -cost, // Subtract XP
      });

      await ctx.editMessageTextWithMarkdown(
        `üéâ *–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!*

–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏: "${itemName}"
–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${cost} XP
–û—Å—Ç–∞—Ç–æ–∫ XP: ${user.totalXp - cost}

${this.getItemActivationMessage(itemType)}`,
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üõçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', callback_data: 'xp_shop' },
                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' },
              ],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error(`Error processing XP purchase: ${error}`);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω', callback_data: 'xp_shop' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    }
  }

  /**
   * Check if user already owns a specific item
   */
  private checkIfUserOwnsItem(
    user: User,
    itemType: string,
    itemId: string,
  ): boolean {
    switch (itemType) {
      case 'theme':
        return user.unlockedThemes.includes(itemId);
      case 'badge':
      case 'emoji':
      case 'sticker':
        return user.stickers.includes(itemId);
      case 'feature':
        // For features, we could add a separate field or use stickers array
        return user.stickers.includes(`feature_${itemId}`);
      default:
        return false;
    }
  }

  /**
   * Process the actual purchase and update user data
   */
  private async processXPPurchase(
    user: User,
    itemType: string,
    itemId: string,
  ): Promise<void> {
    const updateData: Partial<User> = {};

    switch (itemType) {
      case 'theme':
        updateData.unlockedThemes = [...user.unlockedThemes, itemId];
        break;
      case 'badge':
      case 'emoji':
      case 'sticker':
        updateData.stickers = [...user.stickers, itemId];
        break;
      case 'feature':
        updateData.stickers = [...user.stickers, `feature_${itemId}`];
        break;
    }

    await this.userService.updateUser(user.id, updateData);
  }

  /**
   * Get activation message based on item type
   */
  private getItemActivationMessage(itemType: string): string {
    switch (itemType) {
      case 'theme':
        return 'üé® –¢–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.';
      case 'badge':
        return 'üèÜ –ó–Ω–∞—á–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å!';
      case 'emoji':
        return '‚ö° –≠–º–æ–¥–∑–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —á–∞—Ç–µ!';
      case 'sticker':
        return 'üåü –°—Ç–∏–∫–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é!';
      case 'feature':
        return 'üöÄ –§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!';
      default:
        return '‚ú® –ü–æ–∫—É–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!';
    }
  }

  private async completeHabit(ctx: BotContext, habitId: string) {
    try {
      // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ —á–µ—Ä–µ–∑ HabitService
      // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.editMessageTextWithMarkdown(
        `
‚úÖ *–ü—Ä–∏–≤—ã—á–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*

üéØ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –Ω–∞ –ø—É—Ç–∏ –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ–ª–µ–∑–Ω–æ–π –ø—Ä–∏–≤—ã—á–∫–∏.

üí° *–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!*
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üéØ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'habits_list' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error('Error completing habit:', error);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏',
      );
    }
  }

  private async quickCompleteHabit(ctx: BotContext, habitId: string) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–≤—ã—á–∫—É –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
      const habit = await this.habitService.findHabitById(habitId, ctx.userId);
      if (!habit) {
        await ctx.editMessageTextWithMarkdown('‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
      const { habit: updatedHabit, xpGained } =
        await this.habitService.completeHabit(habitId, ctx.userId);

      // –î–æ–±–∞–≤–ª—è–µ–º 20 XP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ XP)
      const user = await this.userService.findByTelegramId(ctx.userId);
      const totalXpGained = 20;
      await this.userService.updateUser(ctx.userId, {
        totalXp: (user.totalXp || 0) + totalXpGained,
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏
      const allHabits = await this.habitService.findHabitsByUserId(ctx.userId);
      const allCompleted = allHabits.every((h) => h.currentStreak > 0); // Simplified check

      // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø—Ä–∏–≤—ã—á–µ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
      await this.showHabitsMenu(ctx);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫ –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
      if (allCompleted && ctx.chat?.id) {
        setTimeout(async () => {
          try {
            await ctx.telegram.sendMessage(
              ctx.chat!.id,
              `üéÜüéáüéÜüéáüéÜ\n\nüèÜ **–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!** üèÜ\n\n‚ú® –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –í–°–ï –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! ‚ú®\n\n–í—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã! üåü\n\nüéÜüéáüéÜüéáüéÜ`,
              {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [
                      {
                        text: 'üéâ –°–ø–∞—Å–∏–±–æ!',
                        callback_data: 'celebration_thanks',
                      },
                    ],
                  ],
                },
              },
            );
          } catch (error) {
            this.logger.error('Error sending fireworks:', error);
          }
        }, 1000);
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ–º
        if (ctx.chat?.id) {
          setTimeout(async () => {
            try {
              await ctx.telegram.sendMessage(
                ctx.chat!.id,
                `üéâ **–ü—Ä–∏–≤—ã—á–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!**\n\nüéØ ${habit.title}\n‚≠ê +${totalXpGained} XP\nüî• –°–µ—Ä–∏—è: ${updatedHabit.currentStreak} –¥–Ω–µ–π\n\n–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí™`,
                { parse_mode: 'Markdown' },
              );
            } catch (error) {
              this.logger.error('Error sending completion message:', error);
            }
          }, 500);
        }
      }
    } catch (error) {
      this.logger.error('Error in quickCompleteHabit:', error);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏',
      );
    }
  }

  private async showAllHabitsList(ctx: BotContext) {
    try {
      const habits = await this.habitService.findHabitsByUserId(ctx.userId);

      if (habits.length === 0) {
        await ctx.editMessageTextWithMarkdown(`
üîÑ *–í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏*

–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é! üéØ
        `);
        return;
      }

      let message = `üîÑ *–í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ (${habits.length}):*\n\n`;
      message += `*–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:*`;

      // Create keyboard with all habits
      const keyboard = {
        inline_keyboard: [
          ...habits.map((habit) => [
            {
              text: `‚úÖ ${habit.title.substring(0, 35)}${habit.title.length > 35 ? '...' : ''}`,
              callback_data: `habit_complete_${habit.id}`,
            },
          ]),
          [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º', callback_data: 'habits_list' }],
        ],
      };

      await ctx.editMessageTextWithMarkdown(message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      this.logger.error('Error showing all habits list:', error);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫',
      );
    }
  }

  private async showHabitsManagement(ctx: BotContext) {
    try {
      const habits = await this.habitService.findHabitsByUserId(ctx.userId);

      if (habits.length === 0) {
        await ctx.editMessageTextWithMarkdown(
          `
üõ†Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏*

–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        `,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º',
                    callback_data: 'habits_list',
                  },
                ],
              ],
            },
          },
        );
        return;
      }

      let message = `üõ†Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏*\n\n`;
      message += `–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:`;

      // Create keyboard with all habits for deletion
      const keyboard = {
        inline_keyboard: [
          ...habits.map((habit) => [
            {
              text: `üóëÔ∏è ${habit.title.substring(0, 35)}${habit.title.length > 35 ? '...' : ''}`,
              callback_data: `habit_delete_${habit.id}`,
            },
          ]),
          [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º', callback_data: 'habits_list' }],
        ],
      };

      await ctx.editMessageTextWithMarkdown(message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      this.logger.error('Error showing habits management:', error);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∞–º–∏',
      );
    }
  }

  private async showHabitsNotificationsSettings(ctx: BotContext) {
    try {
      const habits = await this.habitService.findHabitsByUserId(ctx.userId);

      if (habits.length === 0) {
        await ctx.editMessageTextWithMarkdown(
          `
üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*

–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        `,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º',
                    callback_data: 'menu_habits',
                  },
                ],
              ],
            },
          },
        );
        return;
      }

      let message = `üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n`;
      message += `–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å—Ç–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n\n`;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
      const keyboardRows: any[] = [];

      for (const habit of habits.slice(0, 10)) {
        const frequencyText = this.getHabitFrequencyText(habit.frequency);
        keyboardRows.push([
          {
            text: `üîî ${habit.title.substring(0, 25)}${habit.title.length > 25 ? '...' : ''} (${frequencyText})`,
            callback_data: `habit_notification_${habit.id}`,
          },
        ]);
      }

      keyboardRows.push([
        { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º', callback_data: 'menu_habits' },
      ]);

      const keyboard = { inline_keyboard: keyboardRows };

      await ctx.editMessageTextWithMarkdown(message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      this.logger.error('Error showing habits notifications settings:', error);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
      );
    }
  }

  private getHabitFrequencyText(frequency: string): string {
    switch (frequency) {
      case 'DAILY':
        return '1 —Ä–∞–∑/–¥–µ–Ω—å';
      case 'WEEKLY':
        return '1 —Ä–∞–∑/–Ω–µ–¥–µ–ª—è';
      case 'CUSTOM':
        return '–ù–∞—Å—Ç—Ä–æ–π–∫–∞';
      default:
        return frequency;
    }
  }

  private async showHabitNotificationSettings(
    ctx: BotContext,
    habitId: string,
  ) {
    try {
      const habit = await this.habitService.findHabitById(habitId, ctx.userId);

      if (!habit) {
        await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      const currentFrequency = this.getHabitFrequencyText(habit.frequency);
      const reminderTime = habit.reminderTime || '09:00';

      let message = `üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n`;
      message += `üìù **–ü—Ä–∏–≤—ã—á–∫–∞:** ${habit.title}\n`;
      message += `‚è∞ **–¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞:** ${currentFrequency}\n`;
      message += `üïê **–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:** ${reminderTime}\n\n`;
      message += `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:`;

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: '‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è',
              callback_data: `habit_set_time_${habitId}`,
            },
            {
              text: 'ÔøΩ –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É',
              callback_data: `habit_set_frequency_${habitId}`,
            },
          ],
          [
            {
              text: 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
              callback_data: `set_habit_frequency_${habitId}_DISABLED`,
            },
          ],
          [
            {
              text: 'üîô –ù–∞–∑–∞–¥',
              callback_data: 'habits_notifications_settings',
            },
          ],
        ],
      };

      await ctx.editMessageTextWithMarkdown(message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      this.logger.error('Error showing habit notification settings:', error);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤—ã—á–∫–∏',
      );
    }
  }

  private async updateHabitFrequency(
    ctx: BotContext,
    habitId: string,
    frequency: string,
  ) {
    try {
      const habit = await this.habitService.findHabitById(habitId, ctx.userId);

      if (!habit) {
        await ctx.editMessageTextWithMarkdown('‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—É –ø—Ä–∏–≤—ã—á–∫–∏
      await this.habitService.updateHabit(habitId, ctx.userId, {
        frequency: frequency === 'DISABLED' ? 'CUSTOM' : frequency, // –î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º CUSTOM
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      } as any);

      const frequencyText = this.getFrequencyDisplayText(frequency);

      let message = `‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã*\n\n`;
      message += `üìù **–ü—Ä–∏–≤—ã—á–∫–∞:** ${habit.title}\n`;
      message += `‚è∞ **–ù–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:** ${frequencyText}\n\n`;

      if (frequency === 'DISABLED') {
        message += `üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã.`;
      } else {
        message += `üîî –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –Ω–æ–≤–æ–π —á–∞—Å—Ç–æ—Ç–æ–π.`;
      }

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥—Ä—É–≥—É—é –ø—Ä–∏–≤—ã—á–∫—É',
              callback_data: 'habits_notifications_settings',
            },
          ],
          [
            {
              text: 'üéØ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º',
              callback_data: 'menu_habits',
            },
          ],
        ],
      };

      await ctx.editMessageTextWithMarkdown(message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      this.logger.error('Error updating habit frequency:', error);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤—ã—á–∫–∏',
      );
    }
  }

  private getFrequencyDisplayText(frequency: string): string {
    switch (frequency) {
      case 'DAILY':
        return 'üìÖ 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å';
      case 'WEEKLY':
        return 'üìÖ 1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é';
      case 'TWICE_DAILY':
        return 'üîÑ 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å';
      case 'THREE_TIMES':
        return 'üîÑ 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å';
      case 'EVERY_2H':
        return '‚ö° –ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞';
      case 'DISABLED':
        return 'üîï –û—Ç–∫–ª—é—á–µ–Ω—ã';
      default:
        return frequency;
    }
  }

  private async showHabitFrequencySettings(ctx: BotContext, habitId: string) {
    try {
      const habit = await this.habitService.findHabitById(habitId, ctx.userId);

      if (!habit) {
        await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      const currentFrequency = this.getHabitFrequencyText(habit.frequency);

      let message = `üìÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å—Ç–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n`;
      message += `üìù **–ü—Ä–∏–≤—ã—á–∫–∞:** ${habit.title}\n`;
      message += `‚è∞ **–¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞:** ${currentFrequency}\n\n`;
      message += `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:`;

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: 'üìÖ 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å',
              callback_data: `set_habit_frequency_${habitId}_DAILY`,
            },
          ],
          [
            {
              text: 'üìÖ 1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é',
              callback_data: `set_habit_frequency_${habitId}_WEEKLY`,
            },
          ],
          [
            {
              text: 'üîÑ 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å',
              callback_data: `set_habit_frequency_${habitId}_TWICE_DAILY`,
            },
          ],
          [
            {
              text: 'üîÑ 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å',
              callback_data: `set_habit_frequency_${habitId}_THREE_TIMES`,
            },
          ],
          [
            {
              text: '‚ö° –ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ (–∞–∫—Ç–∏–≤–Ω–æ)',
              callback_data: `set_habit_frequency_${habitId}_EVERY_2H`,
            },
          ],
          [
            {
              text: 'üîô –ù–∞–∑–∞–¥',
              callback_data: `habit_notification_${habitId}`,
            },
          ],
        ],
      };

      await ctx.editMessageTextWithMarkdown(message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      this.logger.error('Error showing habit frequency settings:', error);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Å—Ç–æ—Ç—ã',
      );
    }
  }

  private async showHabitTimeSettings(ctx: BotContext, habitId: string) {
    try {
      const habit = await this.habitService.findHabitById(habitId, ctx.userId);

      if (!habit) {
        await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      const currentTime = habit.reminderTime || '09:00';

      let message = `üïê *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n`;
      message += `üìù **–ü—Ä–∏–≤—ã—á–∫–∞:** ${habit.title}\n`;
      message += `‚è∞ **–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:** ${currentTime}\n\n`;
      message += `–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –∏ –º–∏–Ω—É—Ç—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:`;

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: `üïê –í—ã–±—Ä–∞—Ç—å —á–∞—Å (${currentTime.split(':')[0]})`,
              callback_data: `select_hour_${habitId}`,
            },
            {
              text: `üïï –í—ã–±—Ä–∞—Ç—å –º–∏–Ω—É—Ç—ã (${currentTime.split(':')[1]})`,
              callback_data: `select_minute_${habitId}`,
            },
          ],
          [
            {
              text: '‚è∞ –°–≤–æ–µ –≤—Ä–µ–º—è (–≤–≤–æ–¥)',
              callback_data: `habit_custom_time_${habitId}`,
            },
          ],
          [
            {
              text: 'üîô –ù–∞–∑–∞–¥',
              callback_data: `habit_notification_${habitId}`,
            },
          ],
        ],
      };

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard,
      });
    } catch (error) {
      this.logger.error('Error showing habit time settings:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Ä–µ–º–µ–Ω–∏', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'habits_list' }],
          ],
        },
      });
    }
  }

  private async showHabitHourSelection(ctx: BotContext, habitId: string) {
    try {
      const habit = await this.habitService.findHabitById(habitId, ctx.userId);

      if (!habit) {
        await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      const currentTime = habit.reminderTime || '09:00';
      const currentHour = parseInt(currentTime.split(':')[0]);

      let message = `üïê *–í—ã–±–æ—Ä —á–∞—Å–∞*\n\n`;
      message += `üìù **–ü—Ä–∏–≤—ã—á–∫–∞:** ${habit.title}\n`;
      message += `‚è∞ **–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:** ${currentTime}\n\n`;
      message += `–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:`;

      const hours = [
        [6, 7, 8, 9],
        [10, 11, 12, 13],
        [14, 15, 16, 17],
        [18, 19, 20, 21],
        [22, 23, 0, 1],
      ];

      const keyboard = {
        inline_keyboard: [
          ...hours.map((row) =>
            row.map((hour) => ({
              text:
                hour === currentHour
                  ? `üîò ${hour.toString().padStart(2, '0')}`
                  : `‚ö™ ${hour.toString().padStart(2, '0')}`,
              callback_data: `habit_hour_${habitId}_${hour}`,
            })),
          ),
          [
            {
              text: 'üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤—Ä–µ–º–µ–Ω–∏',
              callback_data: `habit_set_time_${habitId}`,
            },
          ],
        ],
      };

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard,
      });
    } catch (error) {
      this.logger.error('Error showing hour selection:', error);
    }
  }

  private async showHabitMinuteSelection(ctx: BotContext, habitId: string) {
    try {
      const habit = await this.habitService.findHabitById(habitId, ctx.userId);

      if (!habit) {
        await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      let displayTime = habit.reminderTime || '09:00';

      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Å –≤ tempData, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (
        ctx.session.tempData?.selectedHour &&
        ctx.session.tempData?.habitId === habitId
      ) {
        const selectedHour = ctx.session.tempData.selectedHour;
        const currentMinute = displayTime.split(':')[1];
        displayTime = `${selectedHour}:${currentMinute}`;
      }

      const currentMinute = parseInt(displayTime.split(':')[1]);

      let message = `üïï *–í—ã–±–æ—Ä –º–∏–Ω—É—Ç*\n\n`;
      message += `üìù **–ü—Ä–∏–≤—ã—á–∫–∞:** ${habit.title}\n`;
      message += `‚è∞ **–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:** ${displayTime}\n\n`;
      message += `–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:`;

      const minutes = [
        [0, 15, 30, 45],
        [5, 20, 35, 50],
        [10, 25, 40, 55],
      ];

      const keyboard = {
        inline_keyboard: [
          ...minutes.map((row) =>
            row.map((minute) => ({
              text:
                minute === currentMinute
                  ? `üîò ${minute.toString().padStart(2, '0')}`
                  : `‚ö™ ${minute.toString().padStart(2, '0')}`,
              callback_data: `habit_minute_${habitId}_${minute}`,
            })),
          ),
          [
            {
              text: 'üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –≤—Ä–µ–º–µ–Ω–∏',
              callback_data: `habit_set_time_${habitId}`,
            },
          ],
        ],
      };

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard,
      });
    } catch (error) {
      this.logger.error('Error showing minute selection:', error);
    }
  }

  private async updateHabitTime(
    ctx: BotContext,
    habitId: string,
    time: string,
  ) {
    try {
      // Validate time format
      const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;
      if (!timeRegex.test(time)) {
        await ctx.editMessageTextWithMarkdown(
          '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30)',
        );
        return;
      }

      const habit = await this.habitService.findHabitById(habitId, ctx.userId);

      if (!habit) {
        await ctx.editMessageTextWithMarkdown('‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      // Update habit reminder time
      await this.habitService.updateHabit(habitId, ctx.userId, {
        reminderTime: time,
      } as any);

      let message = `‚úÖ *–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ*\n\n`;
      message += `üìù **–ü—Ä–∏–≤—ã—á–∫–∞:** ${habit.title}\n`;
      message += `‚è∞ **–ù–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:** ${time}\n\n`;
      message += `üîî –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ ${time}`;

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: '‚öôÔ∏è –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
              callback_data: `habit_notification_${habitId}`,
            },
          ],
          [
            {
              text: 'üéØ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º',
              callback_data: 'menu_habits',
            },
          ],
        ],
      };

      await ctx.editMessageTextWithMarkdown(message, {
        reply_markup: keyboard,
      });
    } catch (error) {
      this.logger.error('Error updating habit time:', error);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      );
    }
  }

  private async confirmHabitDeletion(ctx: BotContext, habitId: string) {
    try {
      const habit = await this.habitService.findHabitById(habitId, ctx.userId);

      if (!habit) {
        await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      await ctx.editMessageTextWithMarkdown(
        `
‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ*

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É:

üìù *${habit.title}*

‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å',
                  callback_data: `confirm_delete_habit_${habitId}`,
                },
                {
                  text: '‚ùå –û—Ç–º–µ–Ω–∞',
                  callback_data: `cancel_delete_habit_${habitId}`,
                },
              ],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error('Error confirming habit deletion:', error);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è',
      );
    }
  }

  private async deleteHabit(ctx: BotContext, habitId: string) {
    try {
      const habit = await this.habitService.findHabitById(habitId, ctx.userId);

      if (!habit) {
        await ctx.answerCbQuery('‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      await this.habitService.deleteHabit(habitId, ctx.userId);

      await ctx.editMessageTextWithMarkdown(
        `
‚úÖ *–ü—Ä–∏–≤—ã—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞*

–ü—Ä–∏–≤—ã—á–∫–∞ "${habit.title}" –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–≤—ã—á–∫–∞–º–∏',
                  callback_data: 'habits_manage',
                },
              ],
              [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error('Error deleting habit:', error);
      await ctx.editMessageTextWithMarkdown('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏', {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–≤—ã—á–∫–∞–º–∏',
                callback_data: 'habits_manage',
              },
            ],
          ],
        },
      });
    }
  }

  private async confirmTimezone(ctx: BotContext, timezone: string) {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.userService.updateUser(ctx.userId, {
        timezone: timezone,
      });

      await ctx.editMessageTextWithMarkdown(`
‚úÖ *–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!*

üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${timezone}

–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏!
      `);

      // Reset session step
      ctx.session.step = undefined;

      // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–º –¥–µ–π—Å—Ç–≤–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç–µ–ª —Å–¥–µ–ª–∞—Ç—å
      if (ctx.session.pendingAction === 'adding_task') {
        ctx.session.pendingAction = undefined;
        await this.startAddingTask(ctx);
      } else if (ctx.session.pendingAction === 'adding_habit') {
        ctx.session.pendingAction = undefined;
        ctx.session.step = 'adding_habit';
        await ctx.editMessageTextWithMarkdown(
          'üîÑ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:\n\n‚¨áÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∂–µ*',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
      } else {
        await this.showMainMenu(ctx);
      }
    } catch (error) {
      this.logger.error('Error confirming timezone:', error);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞',
      );
    }
  }

  private async showTimezoneList(ctx: BotContext) {
    const commonTimezones = [
      { name: '–ú–æ—Å–∫–≤–∞', tz: 'Europe/Moscow' },
      { name: '–°–ü–±', tz: 'Europe/Moscow' },
      { name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', tz: 'Asia/Yekaterinburg' },
      { name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', tz: 'Asia/Novosibirsk' },
      { name: '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', tz: 'Asia/Vladivostok' },
      { name: '–ê—Å—Ç–∞–Ω–∞', tz: 'Asia/Almaty' },
      { name: '–ö–∏–µ–≤', tz: 'Europe/Kiev' },
      { name: '–ú–∏–Ω—Å–∫', tz: 'Europe/Minsk' },
      { name: '–õ–æ–Ω–¥–æ–Ω', tz: 'Europe/London' },
      { name: '–ü–∞—Ä–∏–∂', tz: 'Europe/Paris' },
      { name: '–ù—å—é-–ô–æ—Ä–∫', tz: 'America/New_York' },
      { name: '–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å', tz: 'America/Los_Angeles' },
    ];

    await ctx.editMessageTextWithMarkdown(
      `
üïê *–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å*

–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π –∫ –≤–∞–º –≥–æ—Ä–æ–¥:`,
      {
        reply_markup: {
          inline_keyboard: [
            ...commonTimezones.map((city) => [
              {
                text: `üèôÔ∏è ${city.name}`,
                callback_data: `confirm_timezone_${city.tz}`,
              },
            ]),
            [{ text: 'üîô –í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é', callback_data: 'input_city' }],
          ],
        },
      },
    );
  }

  /**
   * Format time string with user's timezone
   */
  private formatTimeWithTimezone(date: Date, timezone?: string | null): string {
    return date.toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit',
      timeZone: timezone || 'Europe/Moscow',
    });
  }

  private formatDateWithTimezone(date: Date, timezone?: string | null): string {
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      timeZone: timezone || 'Europe/Moscow',
    });
  }

  /**
   * Start adding habit process from voice command
   */
  private async startAddingHabit(ctx: BotContext) {
    const user = await this.userService.findByTelegramId(ctx.userId);
    if (!user.timezone) {
      ctx.session.pendingAction = 'adding_habit';
      await this.askForTimezone(ctx);
      return;
    }

    ctx.session.step = 'adding_habit';
    await ctx.replyWithMarkdown(
      'üîÑ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—Ä—É—á–Ω—É—é:\n\n‚¨áÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∏–∂–µ*',
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üíß –ü–∏—Ç—å –≤–æ–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ 2 –ª–∏—Ç—Ä–∞',
                callback_data: 'habit_example_water',
              },
            ],
            [
              {
                text: 'üò¥ –õ–æ–∂–∏—Ç—å—Å—è —Å–ø–∞—Ç—å –¥–æ 23:00',
                callback_data: 'habit_example_sleep',
              },
            ],
            [
              {
                text: 'üö∂‚Äç‚ôÄÔ∏è –ü—Ä–æ–≥—É–ª–∫–∞ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º 20 –º–∏–Ω—É—Ç',
                callback_data: 'habit_example_walk',
              },
            ],
            [
              {
                text: 'üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É',
                callback_data: 'habit_custom_input',
              },
            ],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      },
    );
  }

  /**
   * Analyze voice transcription and intelligently create task/reminder/habit
   */
  private async analyzeAndCreateFromVoice(ctx: BotContext, text: string) {
    const lowercaseText = text.toLowerCase();

    // First check for reminder with specific time
    const isReminder = this.isReminderRequest(text);
    if (isReminder) {
      await this.processReminderFromText(ctx, text);
      return;
    }

    // Then check for habit patterns
    const isHabit = this.isHabitRequest(lowercaseText);
    if (isHabit) {
      const habitName = this.extractHabitName(text);
      await this.createHabitFromVoice(ctx, habitName);
      return;
    }

    // Check if it might be a reminder without specific time
    const mightBeReminder =
      /–Ω–∞–ø–æ–º–Ω–∏|–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ|–Ω–µ –∑–∞–±—ã—Ç—å|–≤—Å–ø–æ–º–Ω–∏—Ç—å|–ø–æ–º–Ω–∏/i.test(text);

    // If it's unclear what to do, ask the AI to classify and act automatically
    if (mightBeReminder || text.length > 10) {
      // Inform user that AI is processing
      await ctx.replyWithMarkdown('ü§ñ *–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...*');

      try {
        const prompt = `–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n{"intent":"reminder|task|habit|ask_ai","text":"...–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...","time":"...–µ—Å–ª–∏ –µ—Å—Ç—å, –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –ø—É—Å—Ç–æ"}\n\n–¢–µ–∫—Å—Ç: "${text.replace(/"/g, '\\"')}"`;

        const aiRaw = await this.openaiService.getAIResponse(prompt);

        // Try to extract JSON object from AI response
        let aiJson: any = null;
        try {
          const firstBrace = aiRaw.indexOf('{');
          const lastBrace = aiRaw.lastIndexOf('}');
          const jsonStr =
            firstBrace !== -1 && lastBrace !== -1
              ? aiRaw.slice(firstBrace, lastBrace + 1)
              : aiRaw;
          aiJson = JSON.parse(jsonStr);
        } catch (parseError) {
          this.logger.warn(
            'AI classification returned non-JSON, creating task as fallback',
            parseError,
          );
          // Fallback: try to create a task by default
          await this.createTaskFromText(ctx, text);
          return;
        }

        if (aiJson && aiJson.intent) {
          const intent = aiJson.intent;
          const normalizedText = aiJson.text || text;
          const detectedTime = aiJson.time || null;

          if (intent === 'reminder') {
            // If AI thinks it's a reminder but no time detected, create a task instead
            if (!detectedTime) {
              await this.createTaskFromText(ctx, normalizedText);
              return;
            }
            await this.processReminderFromText(ctx, normalizedText);
            return;
          }

          if (intent === 'task') {
            await this.createTaskFromText(ctx, normalizedText);
            return;
          }

          if (intent === 'habit') {
            const habitName = normalizedText;
            await this.createHabitFromVoice(ctx, habitName);
            return;
          }

          // If AI asked to escalate to human/AI-chat, show AI chat option
          if (intent === 'ask_ai') {
            await ctx.replyWithMarkdown(
              `üí¨ *–Ø –º–æ–≥—É –ø–æ–º–æ—á—å:*\n${await this.aiContextService.generatePersonalizedMessage(ctx.userId, 'motivation', normalizedText)}`,
            );
            return;
          }
        }

        // Fallback: if AI couldn't classify, create task by default
        await this.createTaskFromText(ctx, text);
        return;
      } catch (error) {
        this.logger.error(
          'Error during AI classification of voice text:',
          error,
        );
        // Fallback: create task if AI analysis fails completely
        await this.createTaskFromText(ctx, text);
        return;
      }
    }

    // Default: create task (for short text without specific patterns)
    const taskName = this.extractTaskName(text);
    await this.createTaskFromVoice(ctx, taskName);
  }

  private async showVoiceAnalysisOptions(ctx: BotContext, text: string) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    ctx.session.tempData = { voiceText: text };

    await ctx.replyWithMarkdown(
      `ü§î *–ß—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?*

–¢–µ–∫—Å—Ç: "${text}"

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É',
                callback_data: 'create_task_from_voice_text',
              },
            ],
            [
              {
                text: '‚è∞ –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
                callback_data: 'create_reminder_from_voice_text',
              },
            ],
            [
              {
                text: 'üîÑ –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É',
                callback_data: 'create_habit_from_voice_text',
              },
            ],
            [
              {
                text: 'üí¨ –°–ø—Ä–æ—Å–∏—Ç—å —É –ò–ò',
                callback_data: 'ai_chat_from_voice_text',
              },
            ],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      },
    );
  }

  private isHabitRequest(text: string): boolean {
    const habitPatterns = [
      /–ø—Ä–∏–≤—ã—á–∫–∞/i,
      /–∫–∞–∂–¥—ã–π\s+(–¥–µ–Ω—å|—á–∞—Å|—É—Ç—Ä–æ|–≤–µ—á–µ—Ä)/i,
      /–µ–∂–µ–¥–Ω–µ–≤–Ω–æ/i,
      /—Ä–µ–≥—É–ª—è—Ä–Ω–æ/i,
      /–ø–æ—Å—Ç–æ—è–Ω–Ω–æ/i,
      /–∫–∞–∂–¥–æ–µ\s+(—É—Ç—Ä–æ|–¥–µ–Ω—å|–≤–µ—á–µ—Ä)/i,
      /–ø–æ\s+\d+\s+—Ä–∞–∑/i,
      /\d+\s+—Ä–∞–∑\s+–≤\s+–¥–µ–Ω—å/i,
      /—É—Ç—Ä–æ–º\s+–¥–µ–ª–∞—Ç—å/i,
      /–≤–µ—á–µ—Ä–æ–º\s+–¥–µ–ª–∞—Ç—å/i,
      /–∫–∞–∂–¥—ã–π\s+—á–∞—Å/i,
      /^(–ø–∏—Ç—å|–¥–µ–ª–∞—Ç—å|—á–∏—Ç–∞—Ç—å|–∑–∞–Ω–∏–º–∞—Ç—å—Å—è|–º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å|–±–µ–≥–∞—Ç—å|—Ö–æ–¥–∏—Ç—å|—Å–ø–∞—Ç—å|–ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è|–µ—Å—Ç—å|–≥–æ—Ç–æ–≤–∏—Ç—å|—É–±–∏—Ä–∞—Ç—å—Å—è|–∏–∑—É—á–∞—Ç—å)\s+.*/i,
    ];

    return habitPatterns.some((pattern) => pattern.test(text));
  }

  private extractHabitName(text: string): string {
    return text
      .replace(/–¥–æ–±–∞–≤–∏—Ç—å\s*(–ø—Ä–∏–≤—ã—á–∫—É)?/gi, '')
      .replace(/–Ω–æ–≤–∞—è\s*–ø—Ä–∏–≤—ã—á–∫–∞/gi, '')
      .replace(/—Å–æ–∑–¥–∞—Ç—å\s*(–ø—Ä–∏–≤—ã—á–∫—É)?/gi, '')
      .replace(/^(–¥–µ–ª–∞—Ç—å|–ø–∏—Ç—å|—á–∏—Ç–∞—Ç—å|–∑–∞–Ω–∏–º–∞—Ç—å—Å—è|–≤—ã–ø–æ–ª–Ω—è—Ç—å)\s+/gi, '')
      .replace(/–∫–∞–∂–¥—ã–π\s*–¥–µ–Ω—å/gi, '')
      .replace(/–µ–∂–µ–¥–Ω–µ–≤–Ω–æ/gi, '')
      .replace(/—Ä–µ–≥—É–ª—è—Ä–Ω–æ/gi, '')
      .replace(/–∫–∞–∂–¥–æ–µ\s+(—É—Ç—Ä–æ|–¥–µ–Ω—å|–≤–µ—á–µ—Ä)/gi, '')
      .replace(/–ø–æ\s+\d+\s+—Ä–∞–∑/gi, '')
      .replace(/\d+\s+—Ä–∞–∑\s+–≤\s+–¥–µ–Ω—å/gi, '')
      .trim();
  }

  private extractTaskName(text: string): string {
    return text
      .replace(/–¥–æ–±–∞–≤–∏—Ç—å\s*(–∑–∞–¥–∞—á—É)?/gi, '')
      .replace(/–Ω–æ–≤–∞—è\s*–∑–∞–¥–∞—á–∞/gi, '')
      .replace(/—Å–æ–∑–¥–∞—Ç—å\s*(–∑–∞–¥–∞—á—É)?/gi, '')
      .replace(/^(—Å–¥–µ–ª–∞—Ç—å|–≤—ã–ø–æ–ª–Ω–∏—Ç—å|–Ω—É–∂–Ω–æ|–Ω–∞–¥–æ)\s+/gi, '')
      .replace(
        /\s+(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è|—á–µ—Ä–µ–∑\s+\d+\s+\w+|–≤\s+–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤–æ\s+–≤—Ç–æ—Ä–Ω–∏–∫|–≤\s+—Å—Ä–µ–¥—É|–≤\s+—á–µ—Ç–≤–µ—Ä–≥|–≤\s+–ø—è—Ç–Ω–∏—Ü—É|–≤\s+—Å—É–±–±–æ—Ç—É|–≤\s+–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ|–Ω–∞\s+—Å–ª–µ–¥—É—é—â–µ–π\s+–Ω–µ–¥–µ–ª–µ|–≤\s+—Å–ª–µ–¥—É—é—â–µ–º\s+–º–µ—Å—è—Ü–µ|–≤\s+—Å–ª–µ–¥—É—é—â–µ–º\s+–≥–æ–¥—É)$/gi,
        '',
      )
      .replace(/(–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è)\s+/gi, '')
      .replace(/—á–µ—Ä–µ–∑\s+\d+\s+\w+\s+/gi, '')
      .replace(/–Ω–∞\s+—Å–ª–µ–¥—É—é—â–µ–π\s+–Ω–µ–¥–µ–ª–µ\s+/gi, '')
      .replace(/–≤\s+—Å–ª–µ–¥—É—é—â–µ–º\s+(–º–µ—Å—è—Ü–µ|–≥–æ–¥—É)\s+/gi, '')
      .replace(
        /–≤\s+(–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥—É|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü—É|—Å—É–±–±–æ—Ç—É|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)\s+/gi,
        '',
      )
      .trim();
  }

  private async createHabitFromVoice(ctx: BotContext, habitName: string) {
    if (!habitName || habitName.length < 2) {
      await ctx.replyWithMarkdown(
        '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      );
      return;
    }

    try {
      await this.habitService.createHabit({
        userId: ctx.userId,
        title: habitName,
        description: undefined,
        frequency: 'DAILY',
        targetCount: 1,
      });

      await ctx.replyWithMarkdown(
        `‚úÖ *–ü—Ä–∏–≤—ã—á–∫–∞ "${habitName}" —Å–æ–∑–¥–∞–Ω–∞!*

üéØ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏".

*–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å - –∫–ª—é—á –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–∏–≤—ã—á–µ–∫!`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üéØ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'menu_habits' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error(`Error creating habit from voice: ${error}`);
      await ctx.replyWithMarkdown(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    }
  }

  private async createTaskFromVoice(ctx: BotContext, taskName: string) {
    if (!taskName || taskName.length < 2) {
      await ctx.replyWithMarkdown(
        '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      );
      return;
    }

    try {
      const user = await this.getOrCreateUser(ctx);

      // Check billing limits
      const limitCheck = await this.billingService.checkUsageLimit(
        ctx.userId,
        'dailyTasks',
      );

      if (!limitCheck.allowed) {
        await ctx.replyWithMarkdown(
          limitCheck.message || 'üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–¥–∞—á',
        );
        return;
      }

      const task = await this.taskService.createTask({
        userId: ctx.userId,
        title: taskName,
        description: undefined,
        priority: 'MEDIUM',
      });

      // Increment usage
      await this.billingService.incrementUsage(ctx.userId, 'dailyTasks');

      await ctx.replyWithMarkdown(
        `‚úÖ *–ó–∞–¥–∞—á–∞ "${taskName}" —Å–æ–∑–¥–∞–Ω–∞!*

üìã ID: ${task.id}

–ó–∞–¥–∞—á—É –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –∑–∞–¥–∞—á–∏".`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'menu_tasks' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error(`Error creating task from voice: ${error}`);
      await ctx.replyWithMarkdown(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    }
  }

  private mapDependencyType(type: string): string {
    const mappings: { [key: string]: string } = {
      smoking: 'SMOKING',
      alcohol: 'ALCOHOL',
      gambling: 'GAMBLING',
      sweets: 'SWEET',
      social: 'SOCIAL_MEDIA',
      gaming: 'GAMING',
      shopping: 'OTHER', // No specific enum for shopping, using OTHER
      custom: 'OTHER',
    };

    return mappings[type] || 'OTHER';
  }

  private mapEnumToCallbackType(enumType: string): string {
    const reverseMappings: { [key: string]: string } = {
      SMOKING: 'smoking',
      ALCOHOL: 'alcohol',
      GAMBLING: 'gambling',
      SWEET: 'sweets',
      SOCIAL_MEDIA: 'social',
      GAMING: 'gaming',
      OTHER: 'shopping', // Map OTHER back to shopping for existing handlers
    };

    return reverseMappings[enumType] || 'shopping';
  }

  private async startDailyMotivation(userId: string, dependencyType: string) {
    this.logger.log(
      `Starting daily motivation for user ${userId}, dependency: ${dependencyType}`,
    );

    try {
      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      const mappedType = this.mapDependencyType(dependencyType);
      const existing = await this.prisma.dependencySupport.findFirst({
        where: {
          userId: userId,
          type: mappedType as any,
        },
      });

      if (existing) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        await this.prisma.dependencySupport.update({
          where: { id: existing.id },
          data: {
            status: 'ACTIVE',
            updatedAt: new Date(),
          },
        });
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        await this.prisma.dependencySupport.create({
          data: {
            userId: userId,
            type: mappedType as any,
            status: 'ACTIVE',
            morningTime: '09:00',
            eveningTime: '21:00',
          },
        });
      }

      this.logger.log(`Dependency support record saved for user ${userId}`);

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ cron-–¥–∂–æ–±—ã –≤ NotificationService
      // –≤ 9:00 –∏ 21:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    } catch (error) {
      this.logger.error(`Error saving dependency support: ${error}`);
    }
  }

  // Handle long-term reminders (days, weeks, months, years)
  private async handleLongTermReminder(
    ctx: BotContext,
    reminderText: string,
    targetDate: Date,
    amount: number,
    unit: string,
  ): Promise<void> {
    if (!ctx.from) {
      console.error('No user context found for long-term reminder');
      return;
    }

    const userId = ctx.from.id;

    // Update user activity
    await this.updateUserActivity(userId.toString());

    const now = new Date();
    const timeDifference = targetDate.getTime() - now.getTime();
    const daysUntilReminder = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));

    let reminderMessage = '';
    let confirmationMessage = '';

    if (unit === 'specific') {
      // For expressions like "–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ", "–∑–∞–≤—Ç—Ä–∞", etc.
      confirmationMessage = `‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ*\n\nüìù ${reminderText}\nüìÖ ${targetDate.toLocaleDateString(
        'ru-RU',
        {
          weekday: 'long',
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
        },
      )}`;
    } else {
      // For "—á–µ—Ä–µ–∑ X –¥–Ω–µ–π/–Ω–µ–¥–µ–ª—å/–º–µ—Å—è—Ü–µ–≤/–ª–µ—Ç"
      const unitText = this.getUnitText(amount, unit);
      confirmationMessage = `‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ*\n\nüìù ${reminderText}\n‚è≥ –ß–µ—Ä–µ–∑ ${amount} ${unitText}\nüìÖ ${targetDate.toLocaleDateString(
        'ru-RU',
        {
          weekday: 'long',
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
        },
      )}`;
    }

    // Store long-term reminder (you may want to implement this in your database)
    // For now, we'll show the confirmation
    await ctx.replyWithMarkdown(confirmationMessage, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
        ],
      },
    });

    // Log the long-term reminder
    console.log(`Long-term reminder set for user ${userId}:`, {
      text: reminderText,
      targetDate: targetDate.toISOString(),
      amount,
      unit,
      daysUntil: daysUntilReminder,
    });
  }

  // Parse specific time expressions like "–∑–∞–≤—Ç—Ä–∞", "–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ", etc.
  private parseSpecificTimeExpressions(
    text: string,
  ): { targetDate: Date; reminderText: string } | null {
    const now = new Date();
    let targetDate = new Date(now);
    let matched = false;
    let matchedPattern = '';

    // Tomorrow patterns
    if (/–∑–∞–≤—Ç—Ä–∞/i.test(text)) {
      targetDate.setDate(targetDate.getDate() + 1);
      matched = true;
      matchedPattern = '–∑–∞–≤—Ç—Ä–∞';
    }
    // Day after tomorrow
    else if (/–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞/i.test(text)) {
      targetDate.setDate(targetDate.getDate() + 2);
      matched = true;
      matchedPattern = '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞';
    }
    // Next week
    else if (/–Ω–∞\s*—Å–ª–µ–¥—É—é—â–µ–π\s*–Ω–µ–¥–µ–ª–µ/i.test(text)) {
      const daysUntilNextWeek = 7 - now.getDay() + 1; // Next Monday
      targetDate.setDate(targetDate.getDate() + daysUntilNextWeek);
      matched = true;
      matchedPattern = '–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ';
    }
    // Next month
    else if (/–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–º–µ—Å—è—Ü–µ/i.test(text)) {
      targetDate.setMonth(targetDate.getMonth() + 1);
      targetDate.setDate(1); // First day of next month
      matched = true;
      matchedPattern = '–≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ';
    }
    // Next year
    else if (/–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–≥–æ–¥—É/i.test(text)) {
      targetDate.setFullYear(targetDate.getFullYear() + 1);
      targetDate.setMonth(0); // January
      targetDate.setDate(1); // First day of year
      matched = true;
      matchedPattern = '–≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É';
    }
    // This week patterns
    else if (/–Ω–∞\s*—ç—Ç–æ–π\s*–Ω–µ–¥–µ–ª–µ/i.test(text)) {
      // Keep current date but set to a reasonable time
      matched = true;
      matchedPattern = '–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ';
    }
    // This month patterns
    else if (/–≤\s*—ç—Ç–æ–º\s*–º–µ—Å—è—Ü–µ/i.test(text)) {
      // Keep current date but set to a reasonable time
      matched = true;
      matchedPattern = '–≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ';
    }

    if (!matched) {
      return null;
    }

    // Extract reminder text by removing the time expression
    const reminderText = text
      .replace(/–Ω–∞–ø–æ–º–Ω–∏\s*(–º–Ω–µ)?/gi, '')
      .replace(/–Ω–∞–ø–æ–º–Ω—é\s*(—Ç–µ–±–µ|–≤–∞–º)?/gi, '')
      .replace(
        /–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–Ω–∞\s*—Å–ª–µ–¥—É—é—â–µ–π\s*–Ω–µ–¥–µ–ª–µ|–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–º–µ—Å—è—Ü–µ|–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–≥–æ–¥—É|–Ω–∞\s*—ç—Ç–æ–π\s*–Ω–µ–¥–µ–ª–µ|–≤\s*—ç—Ç–æ–º\s*–º–µ—Å—è—Ü–µ/gi,
        '',
      )
      .trim();

    return { targetDate, reminderText };
  }

  // Get correct unit text for Russian language
  private getUnitText(amount: number, unit: string): string {
    const lastDigit = amount % 10;
    const lastTwoDigits = amount % 100;

    if (unit.includes('–¥–µ–Ω—å')) {
      if (lastTwoDigits >= 11 && lastTwoDigits <= 14) return '–¥–Ω–µ–π';
      if (lastDigit === 1) return '–¥–µ–Ω—å';
      if (lastDigit >= 2 && lastDigit <= 4) return '–¥–Ω—è';
      return '–¥–Ω–µ–π';
    }

    if (unit.includes('–Ω–µ–¥–µ–ª')) {
      if (lastTwoDigits >= 11 && lastTwoDigits <= 14) return '–Ω–µ–¥–µ–ª—å';
      if (lastDigit === 1) return '–Ω–µ–¥–µ–ª—é';
      if (lastDigit >= 2 && lastDigit <= 4) return '–Ω–µ–¥–µ–ª–∏';
      return '–Ω–µ–¥–µ–ª—å';
    }

    if (unit.includes('–º–µ—Å—è—Ü')) {
      if (lastTwoDigits >= 11 && lastTwoDigits <= 14) return '–º–µ—Å—è—Ü–µ–≤';
      if (lastDigit === 1) return '–º–µ—Å—è—Ü';
      if (lastDigit >= 2 && lastDigit <= 4) return '–º–µ—Å—è—Ü–∞';
      return '–º–µ—Å—è—Ü–µ–≤';
    }

    if (unit.includes('–≥–æ–¥') || unit.includes('–ª–µ—Ç')) {
      if (lastTwoDigits >= 11 && lastTwoDigits <= 14) return '–ª–µ—Ç';
      if (lastDigit === 1) return '–≥–æ–¥';
      if (lastDigit >= 2 && lastDigit <= 4) return '–≥–æ–¥–∞';
      return '–ª–µ—Ç';
    }

    return unit;
  }

  // Handle long-term tasks (days, weeks, months, years)
  private async handleLongTermTask(
    ctx: BotContext,
    taskText: string,
    targetDate: Date,
    amount: number,
    unit: string,
  ): Promise<void> {
    if (!ctx.from) {
      console.error('No user context found for long-term task');
      return;
    }

    const userId = ctx.from.id;

    // Update user activity
    await this.updateUserActivity(userId.toString());

    const now = new Date();
    const timeDifference = targetDate.getTime() - now.getTime();
    const daysUntilTask = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));

    let confirmationMessage = '';

    if (unit === 'specific') {
      // For expressions like "–∑–∞–≤—Ç—Ä–∞", "–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ", etc.
      confirmationMessage = `‚úÖ *–ó–∞–¥–∞—á–∞ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∞*\n\nüìù ${taskText}\nüìÖ –°—Ä–æ–∫: ${targetDate.toLocaleDateString(
        'ru-RU',
        {
          weekday: 'long',
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
        },
      )}`;
    } else {
      // For "—á–µ—Ä–µ–∑ X –¥–Ω–µ–π/–Ω–µ–¥–µ–ª—å/–º–µ—Å—è—Ü–µ–≤/–ª–µ—Ç"
      const unitText = this.getUnitText(amount, unit);
      confirmationMessage = `‚úÖ *–ó–∞–¥–∞—á–∞ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∞*\n\nüìù ${taskText}\n‚è≥ –°—Ä–æ–∫: —á–µ—Ä–µ–∑ ${amount} ${unitText}\nüìÖ ${targetDate.toLocaleDateString(
        'ru-RU',
        {
          weekday: 'long',
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
        },
      )}`;
    }

    // Create the task with deadline
    try {
      const user = await this.userService.findByTelegramId(userId.toString());

      if (!user.timezone) {
        ctx.session.step = 'waiting_for_task_title';
        ctx.session.tempData = {
          taskTitle: taskText,
          deadline: targetDate.toISOString(),
          isLongTerm: true,
        };
        await this.askForTimezone(ctx);
        return;
      }

      const task = await this.taskService.createTask({
        userId: userId.toString(),
        title: taskText.trim(),
        dueDate: targetDate,
      });

      await ctx.replyWithMarkdown(
        confirmationMessage +
          `\n\nüí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –∏ –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞.`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'tasks_list' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    } catch (error) {
      console.error(`Error creating long-term task: ${error}`);
      await ctx.replyWithMarkdown(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    }

    // Log the long-term task
    console.log(`Long-term task created for user ${userId}:`, {
      text: taskText,
      targetDate: targetDate.toISOString(),
      amount,
      unit,
      daysUntil: daysUntilTask,
    });
  }

  // Create task with specific deadline
  private async createTaskWithDeadline(
    ctx: BotContext,
    taskText: string,
    targetDate: Date,
  ): Promise<void> {
    if (!ctx.from) {
      console.error('No user context found for task with deadline');
      return;
    }

    const userId = ctx.from.id;

    try {
      const user = await this.userService.findByTelegramId(userId.toString());

      if (!user.timezone) {
        ctx.session.step = 'waiting_for_task_title';
        ctx.session.tempData = {
          taskTitle: taskText,
          deadline: targetDate.toISOString(),
        };
        await this.askForTimezone(ctx);
        return;
      }

      const task = await this.taskService.createTask({
        userId: userId.toString(),
        title: taskText.trim(),
        dueDate: targetDate,
      });

      const confirmationMessage = `‚úÖ *–ó–∞–¥–∞—á–∞ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∞*\n\nüìù ${taskText}\n‚è∞ –°—Ä–æ–∫: ${targetDate.toLocaleDateString(
        'ru-RU',
        {
          weekday: 'long',
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
        },
      )}`;

      await ctx.replyWithMarkdown(confirmationMessage, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏', callback_data: 'tasks_list' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      });

      // Update user activity
      await this.updateUserActivity(userId.toString());
    } catch (error) {
      console.error(`Error creating task with deadline: ${error}`);
      await ctx.replyWithMarkdown(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    }
  }

  // Parse specific time expressions for tasks (reusing reminder logic with task context)
  private parseSpecificTimeExpressionsForTasks(
    text: string,
  ): { targetDate: Date; taskText: string } | null {
    const now = new Date();
    let targetDate = new Date(now);
    let matched = false;
    let matchedPattern = '';

    // Tomorrow patterns
    if (/–∑–∞–≤—Ç—Ä–∞/i.test(text)) {
      targetDate.setDate(targetDate.getDate() + 1);
      matched = true;
      matchedPattern = '–∑–∞–≤—Ç—Ä–∞';
    }
    // Day after tomorrow
    else if (/–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞/i.test(text)) {
      targetDate.setDate(targetDate.getDate() + 2);
      matched = true;
      matchedPattern = '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞';
    }
    // Next week
    else if (/–Ω–∞\s*—Å–ª–µ–¥—É—é—â–µ–π\s*–Ω–µ–¥–µ–ª–µ/i.test(text)) {
      const daysUntilNextWeek = 7 - now.getDay() + 1; // Next Monday
      targetDate.setDate(targetDate.getDate() + daysUntilNextWeek);
      matched = true;
      matchedPattern = '–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ';
    }
    // Next month
    else if (/–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–º–µ—Å—è—Ü–µ/i.test(text)) {
      targetDate.setMonth(targetDate.getMonth() + 1);
      targetDate.setDate(1); // First day of next month
      matched = true;
      matchedPattern = '–≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ';
    }
    // Next year
    else if (/–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–≥–æ–¥—É/i.test(text)) {
      targetDate.setFullYear(targetDate.getFullYear() + 1);
      targetDate.setMonth(0); // January
      targetDate.setDate(1); // First day of year
      matched = true;
      matchedPattern = '–≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É';
    }

    if (!matched) {
      return null;
    }

    // Extract task text by removing the time expression
    const taskText = text
      .replace(
        /–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|–Ω–∞\s*—Å–ª–µ–¥—É—é—â–µ–π\s*–Ω–µ–¥–µ–ª–µ|–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–º–µ—Å—è—Ü–µ|–≤\s*—Å–ª–µ–¥—É—é—â–µ–º\s*–≥–æ–¥—É/gi,
        '',
      )
      .trim();

    return { targetDate, taskText };
  }

  /**
   * Send message to user by ID
   */
  async sendMessageToUser(userId: number, text: string, options?: any) {
    try {
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–∞–µ–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ
      const defaultOptions = {
        disable_notification: false,
        ...options,
      };
      await this.bot.telegram.sendMessage(userId, text, defaultOptions);
      this.logger.log(`Message sent to user ${userId}`);
    } catch (error) {
      this.logger.error(`Failed to send message to user ${userId}:`, error);
      throw error;
    }
  }

  /**
   * Complete habit from notification
   */
  private async completeHabitFromNotification(
    ctx: BotContext,
    habitId: string,
  ) {
    try {
      const userId = ctx.from?.id.toString();
      if (!userId) return;

      // Mark habit as completed
      const result = await this.habitService.completeHabit(habitId, userId);

      const message = `‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ "${result.habit.title}" –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\nüî• –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!\n\n‚≠ê –ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: ${result.xpGained}`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéØ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'habits_list' }],
          ],
        },
      });
    } catch (error) {
      this.logger.error('Error completing habit from notification:', error);
      await ctx.editMessageText(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      );
    }
  }

  /**
   * Snooze habit notification
   */
  private async snoozeHabitFromNotification(
    ctx: BotContext,
    habitId: string,
    minutes: number,
  ) {
    try {
      // Simple snooze implementation using setTimeout
      const delayMs = minutes * 60 * 1000;

      setTimeout(async () => {
        const habit = await this.prisma.habit.findUnique({
          where: { id: habitId },
          include: { user: true },
        });

        if (habit) {
          const message = `‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–≤—ã—á–∫–µ*\n\nüéØ ${habit.title}\n\n–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à—É –ø—Ä–∏–≤—ã—á–∫—É!`;
          const keyboard = {
            inline_keyboard: [
              [
                {
                  text: '‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª',
                  callback_data: `complete_habit_${habitId}`,
                },
                {
                  text: '‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 15 –º–∏–Ω',
                  callback_data: `snooze_habit_${habitId}_15`,
                },
              ],
              [
                {
                  text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                  callback_data: `habit_stats_${habitId}`,
                },
                {
                  text: '‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è',
                  callback_data: `skip_habit_${habitId}`,
                },
              ],
            ],
          };

          await this.sendMessageToUser(parseInt(habit.user.id), message, {
            parse_mode: 'Markdown',
            reply_markup: keyboard,
          });
        }
      }, delayMs);

      await ctx.editMessageText(
        `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ ${minutes} –º–∏–Ω—É—Ç.\n\n–ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –ø–æ–∑–∂–µ!`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üéØ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'habits_list' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error('Error snoozing habit notification:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.');
    }
  }

  /**
   * Show habit statistics from notification
   */
  private async showHabitStatsFromNotification(
    ctx: BotContext,
    habitId: string,
  ) {
    try {
      const habit = await this.prisma.habit.findUnique({
        where: { id: habitId },
      });

      if (!habit) {
        await ctx.editMessageText('‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return;
      }

      const streak = habit.currentStreak || 0;
      const bestStreak = habit.maxStreak || 0;
      const totalCompletions = habit.totalCompletions || 0;

      const message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–∫–∏ "${habit.title}"*

‚úÖ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: ${totalCompletions}
üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: ${streak} –¥–Ω–µ–π
üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: ${bestStreak} –¥–Ω–µ–π
üìÖ –ß–∞—Å—Ç–æ—Ç–∞: ${habit.frequency}

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ–π—á–∞—Å',
                callback_data: `complete_habit_${habitId}`,
              },
            ],
            [{ text: 'üéØ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'habits_list' }],
          ],
        },
      });
    } catch (error) {
      this.logger.error('Error showing habit stats from notification:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
    }
  }

  /**
   * Skip habit for today from notification
   */
  private async skipHabitFromNotification(ctx: BotContext, habitId: string) {
    try {
      const habit = await this.prisma.habit.findUnique({
        where: { id: habitId },
      });

      if (!habit) {
        await ctx.editMessageText('‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return;
      }

      // You might want to track skipped habits in your database
      // For now, just update the message

      const message = `‚è≠Ô∏è –ü—Ä–∏–≤—ã—á–∫–∞ "${habit.title}" –ø—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.

–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ó–∞–≤—Ç—Ä–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! üåÖ`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéØ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'habits_list' }],
          ],
        },
      });
    } catch (error) {
      this.logger.error('Error skipping habit from notification:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –ø—Ä–∏–≤—ã—á–∫–∏.');
    }
  }

  /**
   * Show reminder setup menu for a habit
   */
  private async showReminderSetup(ctx: BotContext, habitId: string) {
    try {
      const habit = await this.prisma.habit.findUnique({
        where: { id: habitId },
      });

      if (!habit) {
        await ctx.editMessageText('‚ùå –ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        return;
      }

      const message = `‚è∞ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*\n\nüéØ –ü—Ä–∏–≤—ã—á–∫–∞: ${habit.title}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:`;

      const keyboard = {
        inline_keyboard: [
          [
            {
              text: '‚è∞ –ö–∞–∂–¥—ã–π —á–∞—Å',
              callback_data: `set_reminder_${habitId}_hourly`,
            },
            {
              text: 'üïê –ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞',
              callback_data: `set_reminder_${habitId}_2hours`,
            },
          ],
          [
            {
              text: 'üïì –ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞',
              callback_data: `set_reminder_${habitId}_3hours`,
            },
            {
              text: 'üïï –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤',
              callback_data: `set_reminder_${habitId}_6hours`,
            },
          ],
          [
            {
              text: 'üåÖ –£—Ç—Ä–æ–º (09:00)',
              callback_data: `set_reminder_${habitId}_morning`,
            },
            {
              text: 'üåÜ –í–µ—á–µ—Ä–æ–º (19:00)',
              callback_data: `set_reminder_${habitId}_evening`,
            },
          ],
          [
            {
              text: 'üìÖ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å (12:00)',
              callback_data: `set_reminder_${habitId}_daily`,
            },
            {
              text: 'üóìÔ∏è –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é',
              callback_data: `set_reminder_${habitId}_weekly`,
            },
          ],
          [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≤—ã—á–∫–∞–º', callback_data: 'habits_list' }],
        ],
      };

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard,
      });
    } catch (error) {
      this.logger.error('Error showing reminder setup:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.');
    }
  }

  /**
   * Set habit reminder with specified interval
   */
  private async setHabitReminder(
    ctx: BotContext,
    habitId: string,
    interval: string,
  ) {
    try {
      let reminderTime = '';
      let intervalText = '';
      let nextReminder = '';

      const now = new Date();
      const currentTime = now.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
      });

      switch (interval) {
        case 'hourly':
          reminderTime = '–∫–∞–∂–¥—ã–π —á–∞—Å';
          intervalText = '–∫–∞–∂–¥—ã–π —á–∞—Å';
          const nextHour = new Date(now);
          nextHour.setHours(nextHour.getHours() + 1, 0, 0, 0);
          nextReminder = nextHour.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
          });
          break;
        case '2hours':
          reminderTime = '–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞';
          intervalText = '–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞';
          const next2Hours = new Date(now);
          next2Hours.setHours(next2Hours.getHours() + 2, 0, 0, 0);
          nextReminder = next2Hours.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
          });
          break;
        case '3hours':
          reminderTime = '–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞';
          intervalText = '–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞';
          const next3Hours = new Date(now);
          next3Hours.setHours(next3Hours.getHours() + 3, 0, 0, 0);
          nextReminder = next3Hours.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
          });
          break;
        case '6hours':
          reminderTime = '–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤';
          intervalText = '–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤';
          const next6Hours = new Date(now);
          next6Hours.setHours(next6Hours.getHours() + 6, 0, 0, 0);
          nextReminder = next6Hours.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
          });
          break;
        case 'morning':
          reminderTime = '09:00';
          intervalText = '—É—Ç—Ä–æ–º –≤ 9:00';
          const tomorrow = new Date(now);
          tomorrow.setDate(tomorrow.getDate() + 1);
          tomorrow.setHours(9, 0, 0, 0);
          nextReminder = `–∑–∞–≤—Ç—Ä–∞ –≤ ${tomorrow.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
          })}`;
          break;
        case 'evening':
          reminderTime = '19:00';
          intervalText = '–≤–µ—á–µ—Ä–æ–º –≤ 19:00';
          const evening = new Date(now);
          if (now.getHours() >= 19) {
            evening.setDate(evening.getDate() + 1);
          }
          evening.setHours(19, 0, 0, 0);
          const isToday = evening.getDate() === now.getDate();
          nextReminder = `${isToday ? '—Å–µ–≥–æ–¥–Ω—è' : '–∑–∞–≤—Ç—Ä–∞'} –≤ 19:00`;
          break;
        case 'daily':
          reminderTime = '12:00';
          intervalText = '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00';
          const noon = new Date(now);
          if (now.getHours() >= 12) {
            noon.setDate(noon.getDate() + 1);
          }
          noon.setHours(12, 0, 0, 0);
          const isTodayNoon = noon.getDate() === now.getDate();
          nextReminder = `${isTodayNoon ? '—Å–µ–≥–æ–¥–Ω—è' : '–∑–∞–≤—Ç—Ä–∞'} –≤ 12:00`;
          break;
        case 'weekly':
          reminderTime = '12:00';
          intervalText = '–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 12:00';
          const nextMonday = new Date(now);
          const daysUntilMonday = (1 - now.getDay() + 7) % 7 || 7;
          nextMonday.setDate(now.getDate() + daysUntilMonday);
          nextMonday.setHours(12, 0, 0, 0);
          nextReminder = `–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 12:00`;
          break;
      }

      // Update habit with reminder time
      const habit = await this.prisma.habit.update({
        where: { id: habitId },
        data: { reminderTime },
      });

      const message = `‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!*\n\nüéØ –ü—Ä–∏–≤—ã—á–∫–∞: ${habit.title}\n‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${intervalText}\n\nüïí –°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: **${nextReminder}**\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏!`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üß™ –¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
                callback_data: `complete_habit_${habitId}`,
              },
            ],
            [{ text: 'üéØ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏', callback_data: 'habits_list' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      });

      // Start the notification schedule for this habit
      try {
        const notificationService =
          require('../services/notification.service').NotificationService;
        if (notificationService) {
          // Simulate updating reminder in notification service
          this.logger.log(
            `Starting notifications for habit ${habitId} with interval ${intervalText}`,
          );
        }
      } catch (error) {
        this.logger.warn(
          'Could not start notifications immediately:',
          error.message,
        );
      }

      this.logger.log(
        `Reminder set for habit ${habitId}: ${intervalText} - Next: ${nextReminder}`,
      );
    } catch (error) {
      this.logger.error('Error setting habit reminder:', error);
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.');
    }
  }

  /**
   * Calculate next reminder time based on reminder setting
   */
  private calculateNextReminderTime(reminderTime: string): string {
    const now = new Date();

    if (reminderTime.includes('–∫–∞–∂–¥—ã–π —á–∞—Å') || reminderTime === 'hourly') {
      const nextHour = new Date(now);
      nextHour.setHours(nextHour.getHours() + 1, 0, 0, 0);
      return nextHour.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
      });
    }

    if (reminderTime.includes('–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞') || reminderTime === '2hours') {
      const next2Hours = new Date(now);
      next2Hours.setHours(next2Hours.getHours() + 2, 0, 0, 0);
      return next2Hours.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
      });
    }

    if (reminderTime.includes('–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞') || reminderTime === '3hours') {
      const next3Hours = new Date(now);
      next3Hours.setHours(next3Hours.getHours() + 3, 0, 0, 0);
      return next3Hours.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
      });
    }

    if (reminderTime.includes('–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤') || reminderTime === '6hours') {
      const next6Hours = new Date(now);
      next6Hours.setHours(next6Hours.getHours() + 6, 0, 0, 0);
      return next6Hours.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit',
      });
    }

    // Check for specific times like "09:00", "19:00"
    const timeMatch = reminderTime.match(/(\d{1,2}):(\d{2})/);
    if (timeMatch) {
      const [, hours, minutes] = timeMatch;
      const targetTime = new Date(now);
      targetTime.setHours(parseInt(hours), parseInt(minutes), 0, 0);

      if (targetTime <= now) {
        targetTime.setDate(targetTime.getDate() + 1);
        return `–∑–∞–≤—Ç—Ä–∞ –≤ ${targetTime.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`;
      } else {
        return `—Å–µ–≥–æ–¥–Ω—è –≤ ${targetTime.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`;
      }
    }

    return '–≤—Ä–µ–º—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
  }

  /**
   * Extract time interval information from task text
   */
  private extractTimeIntervalFromText(
    text: string,
  ): { interval: string; nextTime: string } | null {
    const now = new Date();
    const lowerText = text.toLowerCase();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    if (lowerText.includes('–∫–∞–∂–¥—ã–π —á–∞—Å') || lowerText.includes('–µ–∂–µ—á–∞—Å–Ω–æ')) {
      const nextHour = new Date(now);
      nextHour.setHours(nextHour.getHours() + 1, 0, 0, 0);
      return {
        interval: '–∫–∞–∂–¥—ã–π —á–∞—Å',
        nextTime: nextHour.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
        }),
      };
    }

    if (
      lowerText.includes('–∫–∞–∂–¥—ã–µ –¥–≤–∞ —á–∞—Å–∞') ||
      lowerText.includes('–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞')
    ) {
      const next2Hours = new Date(now);
      next2Hours.setHours(next2Hours.getHours() + 2, 0, 0, 0);
      return {
        interval: '–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞',
        nextTime: next2Hours.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
        }),
      };
    }

    if (
      lowerText.includes('–∫–∞–∂–¥—ã–µ —Ç—Ä–∏ —á–∞—Å–∞') ||
      lowerText.includes('–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞')
    ) {
      const next3Hours = new Date(now);
      next3Hours.setHours(next3Hours.getHours() + 3, 0, 0, 0);
      return {
        interval: '–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞',
        nextTime: next3Hours.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
        }),
      };
    }

    if (
      lowerText.includes('–∫–∞–∂–¥—ã–µ —á–µ—Ç—ã—Ä–µ —á–∞—Å–∞') ||
      lowerText.includes('–∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞')
    ) {
      const next4Hours = new Date(now);
      next4Hours.setHours(next4Hours.getHours() + 4, 0, 0, 0);
      return {
        interval: '–∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞',
        nextTime: next4Hours.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
        }),
      };
    }

    if (
      lowerText.includes('–∫–∞–∂–¥—ã–µ –ø—è—Ç—å —á–∞—Å–æ–≤') ||
      lowerText.includes('–∫–∞–∂–¥—ã–µ 5 —á–∞—Å–æ–≤')
    ) {
      const next5Hours = new Date(now);
      next5Hours.setHours(next5Hours.getHours() + 5, 0, 0, 0);
      return {
        interval: '–∫–∞–∂–¥—ã–µ 5 —á–∞—Å–æ–≤',
        nextTime: next5Hours.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
        }),
      };
    }

    if (
      lowerText.includes('–∫–∞–∂–¥—ã–µ —à–µ—Å—Ç—å —á–∞—Å–æ–≤') ||
      lowerText.includes('–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤')
    ) {
      const next6Hours = new Date(now);
      next6Hours.setHours(next6Hours.getHours() + 6, 0, 0, 0);
      return {
        interval: '–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤',
        nextTime: next6Hours.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
        }),
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω—É—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    if (
      lowerText.includes('–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É') ||
      lowerText.includes('–∫–∞–∂–¥–∞—è –º–∏–Ω—É—Ç–∞')
    ) {
      const nextMin = new Date(now);
      nextMin.setMinutes(nextMin.getMinutes() + 1);
      return {
        interval: '–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É',
        nextTime: nextMin.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
        }),
      };
    }

    if (
      lowerText.includes('–∫–∞–∂–¥—ã–µ –¥–≤–µ –º–∏–Ω—É—Ç—ã') ||
      lowerText.includes('–∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã')
    ) {
      const next2Min = new Date(now);
      next2Min.setMinutes(next2Min.getMinutes() + 2);
      return {
        interval: '–∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã',
        nextTime: next2Min.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
        }),
      };
    }

    if (
      lowerText.includes('–∫–∞–∂–¥—ã–µ —Ç—Ä–∏ –º–∏–Ω—É—Ç—ã') ||
      lowerText.includes('–∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã')
    ) {
      const next3Min = new Date(now);
      next3Min.setMinutes(next3Min.getMinutes() + 3);
      return {
        interval: '–∫–∞–∂–¥—ã–µ 3 –º–∏–Ω—É—Ç—ã',
        nextTime: next3Min.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
        }),
      };
    }

    if (
      lowerText.includes('–∫–∞–∂–¥—ã–µ –ø—è—Ç—å –º–∏–Ω—É—Ç') ||
      lowerText.includes('–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç')
    ) {
      const next5Min = new Date(now);
      next5Min.setMinutes(next5Min.getMinutes() + 5);
      return {
        interval: '–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç',
        nextTime: next5Min.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
        }),
      };
    }

    if (
      lowerText.includes('–∫–∞–∂–¥—ã–µ –¥–µ—Å—è—Ç—å –º–∏–Ω—É—Ç') ||
      lowerText.includes('–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç')
    ) {
      const next10Min = new Date(now);
      next10Min.setMinutes(next10Min.getMinutes() + 10);
      return {
        interval: '–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç',
        nextTime: next10Min.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
        }),
      };
    }

    if (
      lowerText.includes('–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç') ||
      lowerText.includes('–∫–∞–∂–¥—É—é —á–µ—Ç–≤–µ—Ä—Ç—å —á–∞—Å–∞')
    ) {
      const next15Min = new Date(now);
      next15Min.setMinutes(next15Min.getMinutes() + 15);
      return {
        interval: '–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç',
        nextTime: next15Min.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
        }),
      };
    }

    if (
      lowerText.includes('–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç') ||
      lowerText.includes('–∫–∞–∂–¥—ã–µ –ø–æ–ª—á–∞—Å–∞')
    ) {
      const next30Min = new Date(now);
      next30Min.setMinutes(next30Min.getMinutes() + 30);
      return {
        interval: '–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç',
        nextTime: next30Min.toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit',
        }),
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    if (lowerText.includes('–∫–∞–∂–¥—ã–π –¥–µ–Ω—å') || lowerText.includes('–µ–∂–µ–¥–Ω–µ–≤–Ω–æ')) {
      const tomorrow = new Date(now);
      tomorrow.setDate(tomorrow.getDate() + 1);
      tomorrow.setHours(9, 0, 0, 0); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Ç—Ä–æ–º –≤ 9:00
      return {
        interval: '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
        nextTime: `–∑–∞–≤—Ç—Ä–∞ –≤ ${tomorrow.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}`,
      };
    }

    return null;
  }

  private async handleIntervalReminder(
    ctx: BotContext,
    reminderText: string,
    intervalMinutes: number,
  ): Promise<void> {
    try {
      // Check billing limits for interval reminders
      const limitCheck = await this.billingService.checkUsageLimit(
        ctx.userId,
        'dailyReminders',
      );

      if (!limitCheck.allowed) {
        await ctx.replyWithMarkdown(
          limitCheck.message || 'üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üíé –û–±–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ Premium',
                    callback_data: 'upgrade_premium',
                  },
                ],
                [{ text: 'üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã', callback_data: 'show_limits' }],
              ],
            },
          },
        );
        return;
      }

      // Check if user already has an interval reminder running
      const existingReminder = this.activeIntervalReminders.get(ctx.userId);
      if (existingReminder) {
        await ctx.replyWithMarkdown(
          `
‚ö†Ô∏è *–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*

üìù –¢–µ–∫—É—â–µ–µ: "${existingReminder.reminderText}"
‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ ${existingReminder.intervalMinutes} –º–∏–Ω
üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${existingReminder.count} —Ä–∞–∑

–•–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–æ–≤—ã–º?
          `,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: '‚úÖ –ó–∞–º–µ–Ω–∏—Ç—å',
                    callback_data: `replace_interval_${intervalMinutes}_${Buffer.from(reminderText).toString('base64')}`,
                  },
                  {
                    text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
                    callback_data: 'cancel_interval_setup',
                  },
                ],
                [
                  {
                    text: 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ',
                    callback_data: 'stop_interval_reminder',
                  },
                ],
              ],
            },
          },
        );
        return;
      }

      // Start the interval reminder
      await this.startIntervalReminder(ctx, reminderText, intervalMinutes);
    } catch (error) {
      this.logger.error('Error handling interval reminder:', error);
      await ctx.replyWithMarkdown(`
‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è*

–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.
      `);
    }
  }

  private async startIntervalReminder(
    ctx: BotContext,
    reminderText: string,
    intervalMinutes: number,
  ): Promise<void> {
    try {
      const startTime = new Date();
      let count = 0;

      // Create interval
      const intervalId = setInterval(
        async () => {
          count++;
          try {
            await ctx.telegram.sendMessage(
              ctx.userId,
              `üîî *–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #${count}*\n\n${reminderText}\n\n‚è±Ô∏è –°–ª–µ–¥—É—é—â–µ–µ —á–µ—Ä–µ–∑ ${intervalMinutes} –º–∏–Ω`,
              {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [
                      {
                        text: 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
                        callback_data: 'stop_interval_reminder',
                      },
                    ],
                  ],
                },
              },
            );

            // Update count in the map
            const reminder = this.activeIntervalReminders.get(ctx.userId);
            if (reminder) {
              reminder.count = count;
            }
          } catch (error) {
            this.logger.error('Error sending interval reminder:', error);
            // If error sending, stop the interval
            this.stopIntervalReminder(ctx.userId);
          }
        },
        intervalMinutes * 60 * 1000,
      );

      // Store the interval reminder
      this.activeIntervalReminders.set(ctx.userId, {
        intervalId,
        reminderText,
        intervalMinutes,
        startTime,
        count: 0,
      });

      // Increment usage counter
      await this.billingService.incrementUsage(ctx.userId, 'dailyReminders');

      // Get current usage for display
      const usageInfo = await this.billingService.checkUsageLimit(
        ctx.userId,
        'dailyReminders',
      );

      const intervalText =
        intervalMinutes < 60
          ? `${intervalMinutes} –º–∏–Ω—É—Ç`
          : `${Math.floor(intervalMinutes / 60)} —á–∞—Å${intervalMinutes === 60 ? '' : '–∞'}`;

      await ctx.replyWithMarkdown(
        `
üîÑ *–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!*

üìù **–¢–µ–∫—Å—Ç:** ${reminderText}
‚è±Ô∏è **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** –∫–∞–∂–¥—ã–µ ${intervalText}
üïê **–ù–∞—á–∞—Ç–æ:** ${startTime.toLocaleTimeString('ru-RU')}

üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** ${usageInfo.current}${usageInfo.limit === -1 ? '' : `/${usageInfo.limit}`} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

üîî –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ${intervalText}!
        `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
                  callback_data: 'stop_interval_reminder',
                },
                {
                  text: 'üìä –°—Ç–∞—Ç—É—Å',
                  callback_data: 'interval_status',
                },
              ],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error('Error starting interval reminder:', error);
      throw error;
    }
  }

  private stopIntervalReminder(userId: string): boolean {
    const reminder = this.activeIntervalReminders.get(userId);
    if (reminder) {
      clearInterval(reminder.intervalId);
      this.activeIntervalReminders.delete(userId);
      return true;
    }
    return false;
  }

  private async handleQuickReminderTime(
    ctx: BotContext,
    amount: number,
    unit: string,
  ) {
    if (!ctx.session.pendingReminder) {
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è');
      return;
    }

    const reminderData = ctx.session.pendingReminder;
    const reminderText = reminderData.text;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    const now = new Date();
    let targetTime = new Date(now);

    if (unit === '–º–∏–Ω—É—Ç') {
      targetTime.setMinutes(targetTime.getMinutes() + amount);
    } else if (unit === '—á–∞—Å' || unit === '—á–∞—Å–∞') {
      targetTime.setHours(targetTime.getHours() + amount);
    }

    const hours = targetTime.getHours().toString().padStart(2, '0');
    const minutes = targetTime.getMinutes().toString().padStart(2, '0');

    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    ctx.session.pendingReminder = undefined;
    ctx.session.waitingForReminderTime = false;

    // –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    await this.handleReminderRequest(ctx, reminderText, hours, minutes);
  }

  private async handleTomorrowReminder(
    ctx: BotContext,
    hours: string,
    minutes: string,
    timeText: string,
  ) {
    if (!ctx.session.pendingReminder) {
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è');
      return;
    }

    const reminderData = ctx.session.pendingReminder;
    const reminderText = reminderData.text;

    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    ctx.session.pendingReminder = undefined;
    ctx.session.waitingForReminderTime = false;

    // –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    await this.handleReminderRequest(ctx, reminderText, hours, minutes);
  }

  private async askForCustomReminderTime(ctx: BotContext) {
    if (!ctx.session.pendingReminder) {
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è');
      return;
    }

    await this.showHourSelection(ctx);
  }

  private async showHourSelection(ctx: BotContext) {
    await ctx.editMessageTextWithMarkdown(
      `üìù *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* "${ctx.session.pendingReminder?.text}"

üïê *–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:*`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '08:00', callback_data: 'select_hour_08' },
              { text: '09:00', callback_data: 'select_hour_09' },
              { text: '10:00', callback_data: 'select_hour_10' },
            ],
            [
              { text: '11:00', callback_data: 'select_hour_11' },
              { text: '12:00', callback_data: 'select_hour_12' },
              { text: '13:00', callback_data: 'select_hour_13' },
            ],
            [
              { text: '14:00', callback_data: 'select_hour_14' },
              { text: '15:00', callback_data: 'select_hour_15' },
              { text: '16:00', callback_data: 'select_hour_16' },
            ],
            [
              { text: '17:00', callback_data: 'select_hour_17' },
              { text: '18:00', callback_data: 'select_hour_18' },
              { text: '19:00', callback_data: 'select_hour_19' },
            ],
            [
              { text: '20:00', callback_data: 'select_hour_20' },
              { text: '21:00', callback_data: 'select_hour_21' },
              { text: '22:00', callback_data: 'select_hour_22' },
            ],
            [{ text: 'üî¢ –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è', callback_data: 'select_other_hour' }],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_reminder' }],
          ],
        },
      },
    );
  }

  private async showMinuteSelection(ctx: BotContext, selectedHour: string) {
    if (!ctx.session.pendingReminder) {
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Å –≤ tempData
    ctx.session.tempData = { selectedHour };

    await ctx.editMessageTextWithMarkdown(
      `üìù *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* "${ctx.session.pendingReminder?.text}"

üïê *–í—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Å:* ${selectedHour}:00

‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:*`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: ':00', callback_data: 'select_minute_00' },
              { text: ':15', callback_data: 'select_minute_15' },
              { text: ':30', callback_data: 'select_minute_30' },
              { text: ':45', callback_data: 'select_minute_45' },
            ],
            [
              { text: ':05', callback_data: 'select_minute_05' },
              { text: ':10', callback_data: 'select_minute_10' },
              { text: ':20', callback_data: 'select_minute_20' },
              { text: ':25', callback_data: 'select_minute_25' },
            ],
            [
              { text: ':35', callback_data: 'select_minute_35' },
              { text: ':40', callback_data: 'select_minute_40' },
              { text: ':50', callback_data: 'select_minute_50' },
              { text: ':55', callback_data: 'select_minute_55' },
            ],
            [
              {
                text: 'üîô –ù–∞–∑–∞–¥ –∫ —á–∞—Å–∞–º',
                callback_data: 'back_to_hour_selection',
              },
            ],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_reminder' }],
          ],
        },
      },
    );
  }

  private async createHabitFromExample(ctx: BotContext, habitName: string) {
    try {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
      const habit = await this.habitService.createHabit({
        userId: ctx.userId,
        title: habitName,
        description: `–∫–∞–∂–¥—ã–π –¥–µ–Ω—å`,
        frequency: 'DAILY',
        targetCount: 1,
      });

      // Increment usage counter for habits
      await this.billingService.incrementUsage(ctx.userId, 'dailyHabits');

      // Get current usage for display
      const usageInfo = await this.billingService.checkUsageLimit(
        ctx.userId,
        'dailyHabits',
      );

      const user = await this.userService.findByTelegramId(ctx.userId);

      const keyboardForOnboarding = {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ùì –î–∞–ª–µ–µ –∫ FAQ', callback_data: 'onboarding_next_faq' }],
          ],
        },
      };

      const keyboardDefault = {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
                callback_data: `habit_set_reminder_${habit.id}`,
              },
            ],
            [
              {
                text: 'üéØ –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏',
                callback_data: 'habits_list',
              },
              {
                text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                callback_data: 'back_to_menu',
              },
            ],
          ],
        },
      };

      const replyKeyboard =
        user && user.onboardingPassed === false
          ? keyboardForOnboarding
          : keyboardDefault;

      await ctx.editMessageTextWithMarkdown(
        `
‚úÖ *–ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!*

üéØ **–ù–∞–∑–≤–∞–Ω–∏–µ:** ${habitName}
üìÖ **–û–ø–∏—Å–∞–Ω–∏–µ:** –∫–∞–∂–¥—ã–π –¥–µ–Ω—å

üìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** ${usageInfo.current}${usageInfo.limit === -1 ? '' : `/${usageInfo.limit}`} –ø—Ä–∏–≤—ã—á–µ–∫

üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –º–µ–Ω—é –ø—Ä–∏–≤—ã—á–µ–∫.
        `,
        replyKeyboard,
      );

      ctx.session.step = undefined;
    } catch (error) {
      this.logger.error('Error creating habit from example:', error);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå *–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    }
  }

  private async showPomodoroMenu(ctx: BotContext) {
    const activeSession = this.activePomodoroSessions.get(ctx.userId);

    if (activeSession) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
      await this.showActivePomodoroSession(ctx, activeSession);
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ–Ω—é –ø–æ–º–æ–¥–æ—Ä–æ
    const message = `
üçÖ *–¢–µ—Ö–Ω–∏–∫–∞ –ü–æ–º–æ–¥–æ—Ä–æ*

–¢–µ—Ö–Ω–∏–∫–∞ Pomodoro (–º–µ—Ç–æ–¥ –ø–æ–º–∏–¥–æ—Ä–∞) ‚Äî –º–µ—Ç–æ–¥ —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏–º —Å—Ç—É–¥–µ–Ω—Ç–æ–º –§—Ä–∞–Ω—á–µ—Å–∫–æ –ß–∏—Ä–∏–ª–ª–æ –≤ 1980-—Ö –≥–æ–¥–∞—Ö.

–ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–±–æ—Ä–æ—Ç—å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—é

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
‚è∞ 25 –º–∏–Ω—É—Ç —Ñ–æ–∫—É—Å–∞ –Ω–∞ –∑–∞–¥–∞—á–µ
‚òï 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö
üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å 4 —Ä–∞–∑–∞
üèñÔ∏è –ë–æ–ª—å—à–æ–π –ø–µ—Ä–µ—Ä—ã–≤ 15-30 –º–∏–Ω—É—Ç

*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*
    `;

    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üöÄ –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é',
              callback_data: 'start_pomodoro_session',
            },
          ],
          [
            {
              text: 'üìä –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–π',
              callback_data: 'pomodoro_history',
            },
            {
              text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
              callback_data: 'pomodoro_settings',
            },
          ],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
        ],
      },
    };

    // Check if this is a callback query (can edit) or command (need to reply)
    if (ctx.callbackQuery) {
      await ctx.editMessageTextWithMarkdown(message, keyboard);
    } else {
      await ctx.replyWithMarkdown(message, keyboard);
    }
  }

  private async showActivePomodoroSession(ctx: BotContext, session: any) {
    const currentTime = new Date();
    const totalElapsed =
      currentTime.getTime() -
      session.startTime.getTime() -
      (session.totalPausedTime || 0);
    const elapsed = Math.floor(totalElapsed / (1000 * 60));
    const remaining = Math.max(0, 25 - elapsed);

    let message: string;
    let keyboard: any;

    if (session.pausedAt) {
      // –°–µ—Å—Å–∏—è –Ω–∞ –ø–∞—É–∑–µ
      const remainingMinutes = remaining;
      const remainingSeconds = Math.max(
        0,
        Math.floor((25 * 60 * 1000 - totalElapsed) / 1000) % 60,
      );

      message = `
‚è∏Ô∏è *–°–µ—Å—Å–∏—è –Ω–∞ –ø–∞—É–∑–µ*

‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: ${remainingMinutes}:${remainingSeconds.toString().padStart(2, '0')}
‚ö° –ü—Ä–æ—à–ª–æ: ${elapsed} –º–∏–Ω
üéØ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞

*–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?*
      `;

      keyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                callback_data: 'resume_pomodoro',
              },
              {
                text: '‚èπÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å',
                callback_data: 'stop_pomodoro',
              },
            ],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
          ],
        },
      };
    } else if (session.breakTimer) {
      // –ê–∫—Ç–∏–≤–µ–Ω –ø–µ—Ä–µ—Ä—ã–≤
      message = `
‚òï *–í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞*

üéâ –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
‚è∞ –ò–¥–µ—Ç 5-–º–∏–Ω—É—Ç–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤
üí™ –†–∞–∑–æ–º–Ω–∏—Ç–µ—Å—å –∏ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ

*–ü–µ—Ä–µ—Ä—ã–≤ —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è*
      `;

      keyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üöÄ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é',
                callback_data: 'start_pomodoro_session',
              },
            ],
            [
              {
                text: 'üìä –ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–π',
                callback_data: 'pomodoro_history',
              },
            ],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
          ],
        },
      };
    } else {
      // –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞
      const user = await this.getOrCreateUser(ctx);
      const endTime = new Date(
        session.startTime.getTime() +
          (session.totalPausedTime || 0) +
          25 * 60 * 1000,
      );
      const endTimeFormatted = user.timezone
        ? this.formatTimeWithTimezone(endTime, user.timezone)
        : endTime.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
          });

      message = `
üçÖ *–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞*

‚è∞ **–¢–∞–π–º–µ—Ä**: –æ—Å—Ç–∞–ª–æ—Å—å ${remaining} –º–∏–Ω (–¥–æ ${endTimeFormatted})
‚ö° **–ü—Ä–æ—à–ª–æ**: ${elapsed} –º–∏–Ω
üéØ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ
üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å!

üîî **–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ—Ç**
      `;

      keyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚è∏Ô∏è –ü–∞—É–∑–∞',
                callback_data: 'pause_pomodoro',
              },
              {
                text: '‚èπÔ∏è –°—Ç–æ–ø',
                callback_data: 'stop_pomodoro',
              },
            ],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'start' }],
          ],
        },
      };
    }

    // Check if this is a callback query (can edit) or command (need to reply)
    if (ctx.callbackQuery) {
      await ctx.editMessageTextWithMarkdown(message, keyboard);
    } else {
      await ctx.replyWithMarkdown(message, keyboard);
    }
  }

  /**
   * Check if habit is skipped for today (checks HabitSkip table)
   */
  async isHabitSkippedToday(
    habitId: string,
    userId?: string,
  ): Promise<boolean> {
    // userId is optional for backward compatibility, but should be provided for accuracy
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const tomorrow = new Date(today);
    tomorrow.setDate(today.getDate() + 1);

    // Find skip for this habit and user for today
    const skip = await this.prisma.habitSkip.findFirst({
      where: {
        habitId,
        ...(userId ? { userId } : {}),
        skipDate: {
          gte: today,
          lt: tomorrow,
        },
      },
    });
    return !!skip;
  }

  // Helper methods for quick reminder creation
  private async createReminderWithRelativeTime(
    ctx: BotContext,
    amount: number,
    unit: 'hours' | 'minutes',
  ) {
    try {
      if (!ctx.session.tempData?.taskTitle) {
        throw new Error('No task title found in session');
      }

      const taskTitle = ctx.session.tempData.taskTitle;
      const now = new Date();
      const reminderTime = new Date(now);

      if (unit === 'hours') {
        reminderTime.setHours(reminderTime.getHours() + amount);
      } else {
        reminderTime.setMinutes(reminderTime.getMinutes() + amount);
      }

      const hours = reminderTime.getHours().toString().padStart(2, '0');
      const minutes = reminderTime.getMinutes().toString().padStart(2, '0');

      await this.handleReminderRequest(ctx, taskTitle, hours, minutes);
    } catch (error) {
      this.logger.error('Error creating reminder with relative time:', error);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    }
  }

  private async createReminderWithSpecificTime(
    ctx: BotContext,
    time: string,
    tomorrow: boolean = false,
  ) {
    try {
      if (!ctx.session.tempData?.taskTitle) {
        throw new Error('No task title found in session');
      }

      const taskTitle = ctx.session.tempData.taskTitle;
      const [hours, minutes] = time.split(':');

      // If tomorrow is true, we might need to handle date logic
      // For now, just pass the time to handleReminderRequest
      // The existing method should handle the time properly

      await this.handleReminderRequest(ctx, taskTitle, hours, minutes);
    } catch (error) {
      this.logger.error('Error creating reminder with specific time:', error);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    }
  }

  private async handleReminderTimeInputFromTask(
    ctx: BotContext,
    timeInput: string,
  ) {
    try {
      if (!ctx.session.tempData?.taskTitle) {
        await ctx.replyWithMarkdown(
          '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
            },
          },
        );
        return;
      }

      const taskTitle = ctx.session.tempData.taskTitle;

      // Parse different time formats
      const timeMatch = timeInput.match(/(\d{1,2}):(\d{2})/);
      if (timeMatch) {
        const hours = timeMatch[1];
        const minutes = timeMatch[2];

        // Clear the session
        ctx.session.step = undefined;
        ctx.session.tempData = undefined;

        await this.handleReminderRequest(ctx, taskTitle, hours, minutes);
        return;
      }

      // Handle relative time (—á–µ—Ä–µ–∑ X —á–∞—Å–æ–≤/–º–∏–Ω—É—Ç)
      const relativeMatch = timeInput.match(
        /—á–µ—Ä–µ–∑\s*(\d+)\s*(—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã)/i,
      );
      if (relativeMatch) {
        const amount = parseInt(relativeMatch[1]);
        const unit = relativeMatch[2];
        const isHours = unit.startsWith('—á–∞—Å');

        const now = new Date();
        if (isHours) {
          now.setHours(now.getHours() + amount);
        } else {
          now.setMinutes(now.getMinutes() + amount);
        }

        const hours = now.getHours().toString().padStart(2, '0');
        const minutes = now.getMinutes().toString().padStart(2, '0');

        // Clear the session
        ctx.session.step = undefined;
        ctx.session.tempData = undefined;

        await this.handleReminderRequest(ctx, taskTitle, hours, minutes);
        return;
      }

      // If we can't parse the time, ask again
      await ctx.replyWithMarkdown(
        `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n\nüìù **"${taskTitle}"**\n\n–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∞:\n‚Ä¢ \`15:30\` - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è\n‚Ä¢ \`—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞\` - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error('Error handling reminder time input from task:', error);

      // Clear the session on error
      ctx.session.step = undefined;
      ctx.session.tempData = undefined;

      await ctx.replyWithMarkdown(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
            ],
          },
        },
      );
    }
  }

  private async showSystemInfo(ctx: BotContext) {
    try {
      const user = await this.userService.findByTelegramId(ctx.userId);

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö/–º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
      const dependencySupport = await this.prisma.dependencySupport.findFirst({
        where: { userId: user.id, status: 'ACTIVE' },
      });

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      const activeReminders = await this.prisma.reminder.findMany({
        where: {
          userId: user.id,
          status: 'ACTIVE',
          scheduledTime: { gte: new Date() },
        },
        orderBy: { scheduledTime: 'asc' },
        take: 5,
      });

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
      const habitsWithReminders = await this.prisma.habit.findMany({
        where: {
          userId: user.id,
          isActive: true,
          reminderTime: { not: null },
        },
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let infoMessage = `üîç *–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n`;

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      infoMessage += `üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:**\n`;
      infoMessage += `‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.timezone || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n`;
      infoMessage += `‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞: ${user.subscriptionType === 'PREMIUM' ? 'üíé Premium' : 'üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è'}\n\n`;

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
      if (dependencySupport) {
        infoMessage += `üéØ **–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–∫—Ç–∏–≤–Ω–∞:**\n`;
        infoMessage += `‚Ä¢ –¢–∏–ø: ${this.getDependencyTypeRussian(dependencySupport.type)}\n`;
        infoMessage += `‚Ä¢ –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ ${dependencySupport.morningTime || '09:00'}\n`;
        infoMessage += `‚Ä¢ –í–µ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ ${dependencySupport.eveningTime || '21:00'}\n`;
        infoMessage += `‚Ä¢ –û–±–µ—â–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${dependencySupport.totalPromises || 0}\n`;
        infoMessage += `‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: ${Math.floor((Date.now() - dependencySupport.createdAt.getTime()) / (1000 * 60 * 60 * 24))} –¥–Ω–µ–π\n\n`;

        // –í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const now = new Date();
        const currentHour = now.getHours();
        const nextMorning = new Date();
        const nextEvening = new Date();

        if (currentHour < 9) {
          nextMorning.setHours(9, 0, 0, 0);
          infoMessage += `‚è∞ **–°–ª–µ–¥—É—é—â–µ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:** —Å–µ–≥–æ–¥–Ω—è –≤ 09:00\n\n`;
        } else if (currentHour < 21) {
          nextEvening.setHours(21, 0, 0, 0);
          infoMessage += `‚è∞ **–°–ª–µ–¥—É—é—â–∞—è –≤–µ—á–µ—Ä–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:** —Å–µ–≥–æ–¥–Ω—è –≤ 21:00\n\n`;
        } else {
          nextMorning.setDate(nextMorning.getDate() + 1);
          nextMorning.setHours(9, 0, 0, 0);
          infoMessage += `‚è∞ **–°–ª–µ–¥—É—é—â–µ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:** –∑–∞–≤—Ç—Ä–∞ –≤ 09:00\n\n`;
        }
      } else {
        infoMessage += `üéØ **–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:** –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞\n`;
        infoMessage += `üí° –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "–ë–æ—Ä—å–±–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"\n\n`;
      }

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö
      if (activeReminders.length > 0) {
        infoMessage += `‚è∞ **–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (${activeReminders.length}):**\n`;
        activeReminders.forEach((reminder, index) => {
          if (index < 3) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
            const date = reminder.scheduledTime.toLocaleDateString('ru-RU');
            const time = reminder.scheduledTime.toLocaleTimeString('ru-RU', {
              hour: '2-digit',
              minute: '2-digit',
            });
            infoMessage += `‚Ä¢ ${reminder.title} - ${date} –≤ ${time}\n`;
          }
        });
        if (activeReminders.length > 3) {
          infoMessage += `‚Ä¢ ... –∏ –µ—â—ë ${activeReminders.length - 3}\n`;
        }
        infoMessage += `\n`;
      } else {
        infoMessage += `‚è∞ **–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:** –Ω–µ—Ç\n\n`;
      }

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
      if (habitsWithReminders.length > 0) {
        infoMessage += `üîÑ **–ü—Ä–∏–≤—ã—á–∫–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ (${habitsWithReminders.length}):**\n`;
        habitsWithReminders.forEach((habit) => {
          infoMessage += `‚Ä¢ ${habit.title} - ${habit.reminderTime}\n`;
        });
        infoMessage += `\n`;
      } else {
        infoMessage += `üîÑ **–ü—Ä–∏–≤—ã—á–∫–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:** –Ω–µ—Ç\n\n`;
      }

      // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      infoMessage += `üîß **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n`;
      infoMessage += `‚Ä¢ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: ${new Date().toLocaleString('ru-RU')}\n`;
      infoMessage += `‚Ä¢ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: 2.0.0\n`;

      await ctx.replyWithMarkdown(infoMessage, {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üéØ –ë–æ—Ä—å–±–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏',
                callback_data: 'choose_dependency',
              },
              { text: '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', callback_data: 'reminders_menu' },
            ],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      });
    } catch (error) {
      this.logger.error('Error showing system info:', error);
      await ctx.replyWithMarkdown(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ.',
      );
    }
  }

  private getDependencyTypeRussian(type: string): string {
    const types = {
      SMOKING: '–ö—É—Ä–µ–Ω–∏–µ',
      ALCOHOL: '–ê–ª–∫–æ–≥–æ–ª—å',
      GAMBLING: '–ê–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã',
      SWEET: '–°–ª–∞–¥–∫–æ–µ',
      SOCIAL_MEDIA: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏',
      GAMING: '–ò–≥—Ä—ã',
      OTHER: '–î—Ä—É–≥–æ–µ',
    };
    return types[type] || type;
  }

  private async testMotivationSystem(ctx: BotContext) {
    try {
      const user = await this.userService.findByTelegramId(ctx.userId);
      const dependencySupport = await this.prisma.dependencySupport.findFirst({
        where: { userId: user.id, status: 'ACTIVE' },
      });

      if (!dependencySupport) {
        await ctx.replyWithMarkdown(
          '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n' +
            '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ—ë —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "–ë–æ—Ä—å–±–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏".',
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üéØ –ë–æ—Ä—å–±–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏',
                    callback_data: 'choose_dependency',
                  },
                ],
              ],
            },
          },
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É NotificationService
      const now = new Date();
      const testMessage =
        `üß™ **–¢–µ—Å—Ç–æ–≤–æ–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**\n\n` +
        `üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –±–µ–∑ ${this.getDependencyTypeRussian(dependencySupport.type).toLowerCase()} - —ç—Ç–æ –ø–æ–±–µ–¥–∞!\n\n` +
        `üí™ –¢—ã —Å–º–æ–∂–µ—à—å —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —ç—Ç–∏–º!\n\n` +
        `‚è∞ –í—Ä–µ–º—è: ${now.toLocaleTimeString('ru-RU')}\n` +
        `üìÖ –î–∞—Ç–∞: ${now.toLocaleDateString('ru-RU')}\n\n` +
        `‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç!\n` +
        `üïò –°–ª–µ–¥—É—é—â–µ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ${dependencySupport.morningTime}\n` +
        `üïò –°–ª–µ–¥—É—é—â–∞—è –≤–µ—á–µ—Ä–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ ${dependencySupport.eveningTime}`;

      await ctx.replyWithMarkdown(testMessage, {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'ü§ù –û–±–µ—â–∞—é —Å–∞–º —Å–µ–±–µ',
                callback_data: `morning_promise_${this.mapEnumToCallbackType(dependencySupport.type)}`,
              },
            ],
            [{ text: 'üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data: 'info' }],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      });

      this.logger.log(`Test motivation sent to user ${ctx.userId}`);
    } catch (error) {
      this.logger.error('Error testing motivation system:', error);
      await ctx.replyWithMarkdown(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –º–æ—Ç–∏–≤–∞—Ü–∏–∏.',
      );
    }
  }

  /**
   * Show main statistics
   */
  private async showMainStatistics(ctx: BotContext) {
    try {
      const user = await this.getOrCreateUser(ctx);

      // Get today's date in user's timezone
      const today = new Date();
      const userTimezone = user.timezone || 'Europe/Moscow';
      const todayStr = today.toLocaleDateString('ru-RU', {
        timeZone: userTimezone,
      });

      // Get current date bounds for today's statistics
      const startOfToday = new Date();
      startOfToday.setHours(0, 0, 0, 0);
      const endOfToday = new Date();
      endOfToday.setHours(23, 59, 59, 999);

      // Get statistics from database
      const [
        completedTasksCount,
        totalTasksCount,
        habitStats,
        todayTasksCount,
        todayHabitsCount,
      ] = await Promise.all([
        // Completed tasks total
        this.prisma.task.count({
          where: {
            userId: user.id,
            status: 'COMPLETED',
          },
        }),
        // Total tasks
        this.prisma.task.count({
          where: {
            userId: user.id,
          },
        }),
        // Get habit statistics
        this.prisma.habit.aggregate({
          where: {
            userId: user.id,
          },
          _sum: {
            totalCompletions: true,
          },
          _count: {
            id: true,
          },
        }),
        // Today's completed tasks
        this.prisma.task.count({
          where: {
            userId: user.id,
            completedAt: {
              gte: startOfToday,
              lte: endOfToday,
            },
          },
        }),
        // Today's habit completions - we'll approximate this by counting habits with recent activity
        this.prisma.habit.count({
          where: {
            userId: user.id,
            updatedAt: {
              gte: startOfToday,
              lte: endOfToday,
            },
          },
        }),
      ]);

      const totalHabitsCount = habitStats._count.id || 0;
      const completedHabitsCount = habitStats._sum.totalCompletions || 0;

      // Calculate completion rates
      const taskCompletionRate =
        totalTasksCount > 0
          ? Math.round((completedTasksCount / totalTasksCount) * 100)
          : 0;
      const habitCompletionRate =
        totalHabitsCount > 0
          ? Math.round((completedHabitsCount / totalHabitsCount) * 100)
          : 0;

      // Get user's current level and XP
      const totalXP = user.totalXp || 0;
      const level = user.level || 1;

      // Calculate XP for current level (each level requires level * 100 XP)
      let xpRequiredForCurrentLevel = 0;
      for (let i = 1; i < level; i++) {
        xpRequiredForCurrentLevel += i * 100;
      }

      const xpForNextLevel = level * 100; // XP needed to reach next level
      const currentLevelXP = Math.max(0, totalXP - xpRequiredForCurrentLevel); // XP progress within current level
      const xpToNextLevel = Math.max(0, xpForNextLevel - currentLevelXP);

      // Create progress bar
      const progressRatio =
        xpForNextLevel > 0 ? currentLevelXP / xpForNextLevel : 0;
      const progressBarLength = 10;
      const filledBars = Math.floor(progressRatio * progressBarLength);
      const emptyBars = progressBarLength - filledBars;
      const progressBar = '‚ñà'.repeat(filledBars) + '‚ñë'.repeat(emptyBars);

      const message = `
üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**
‚≠ê –û–±—â–∏–π –æ–ø—ã—Ç: ${totalXP} XP
üéñÔ∏è –£—Ä–æ–≤–µ–Ω—å: ${level}

üéØ **–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è:**
\`${progressBar}\` ${Math.round(progressRatio * 100)}%
üìà ${currentLevelXP}/${xpForNextLevel} XP –¥–æ ${level + 1} —É—Ä–æ–≤–Ω—è
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ${xpToNextLevel} XP

üìÖ –í —Å–∏—Å—Ç–µ–º–µ —Å: ${user.createdAt.toLocaleDateString('ru-RU')}

üìù **–ó–∞–¥–∞—á–∏:**
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedTasksCount} –∏–∑ ${totalTasksCount}
üìä –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${taskCompletionRate}%
üéØ –°–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${todayTasksCount}

üîÑ **–ü—Ä–∏–≤—ã—á–∫–∏:**
‚úÖ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: ${completedHabitsCount}
üìã –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–≤—ã—á–µ–∫: ${totalHabitsCount}
üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${habitCompletionRate}%
üéØ –°–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${todayHabitsCount}

üìÖ **–°–µ–≥–æ–¥–Ω—è (${todayStr}):**
${
  todayTasksCount > 0 || todayHabitsCount > 0
    ? `üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å! –í—ã–ø–æ–ª–Ω–µ–Ω–æ ${todayTasksCount + todayHabitsCount} –¥–µ–π—Å—Ç–≤–∏–π`
    : 'üî¥ –ü–æ–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –±—ã–ª–æ'
}

üí° *–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è XP!*
      `;

      await ctx.editMessageTextWithMarkdown(message, {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üéØ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                callback_data: 'progress_stats',
              },
            ],
            [
              {
                text: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
                callback_data: 'achievements',
              },
            ],
            [
              {
                text: 'üîô –ù–∞–∑–∞–¥',
                callback_data: 'back_to_menu',
              },
            ],
          ],
        },
      });
    } catch (error) {
      this.logger.error('Error showing main statistics:', error);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üîô –ù–∞–∑–∞–¥',
                  callback_data: 'back_to_menu',
                },
              ],
            ],
          },
        },
      );
    }
  }

  async showDetailedStatistics(ctx: any) {
    try {
      const user = await this.prisma.user.findUnique({
        where: { id: ctx.userId },
      });

      if (!user) {
        await ctx.editMessageTextWithMarkdown(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        });
        return;
      }

      // Get today's date for progress display
      const today = new Date();
      const todayStart = new Date(
        today.getFullYear(),
        today.getMonth(),
        today.getDate(),
      );
      const todayEnd = new Date(todayStart.getTime() + 24 * 60 * 60 * 1000);

      // Get task statistics
      const taskStats = await this.prisma.task.aggregate({
        where: { userId: user.id },
        _count: {
          id: true,
        },
      });

      const completedTaskStats = await this.prisma.task.aggregate({
        where: {
          userId: user.id,
          status: 'COMPLETED',
        },
        _count: {
          id: true,
        },
      });

      const todayTaskStats = await this.prisma.task.aggregate({
        where: {
          userId: user.id,
          createdAt: {
            gte: todayStart,
            lt: todayEnd,
          },
        },
        _count: {
          id: true,
        },
      });

      // Get habit statistics
      const habitStats = await this.prisma.habit.aggregate({
        where: { userId: user.id },
        _count: {
          id: true,
        },
      });

      const habitCompletionStats = await this.prisma.habit.aggregate({
        where: { userId: user.id },
        _sum: {
          totalCompletions: true,
        },
      });

      const todayHabitStats = await this.prisma.habit.aggregate({
        where: {
          userId: user.id,
          createdAt: {
            gte: todayStart,
            lt: todayEnd,
          },
        },
        _count: {
          id: true,
        },
      });

      const totalTasks = taskStats._count.id || 0;
      const completedTasks = completedTaskStats._count.id || 0;
      const todayTasks = todayTaskStats._count.id || 0;

      const totalHabits = habitStats._count.id || 0;
      const completedHabits = habitCompletionStats._sum.totalCompletions || 0;
      const todayHabits = todayHabitStats._count.id || 0;

      const completionRate =
        totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;
      const habitCompletionRate =
        totalHabits > 0
          ? Math.round((completedHabits / (totalHabits * 30)) * 100)
          : 0; // Assuming 30 days average

      const todayStr = today.toLocaleDateString('ru-RU');

      await ctx.editMessageTextWithMarkdown(
        `
üéØ *–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üìä **–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚≠ê –û–ø—ã—Ç: ${user.totalXp} XP
üéñÔ∏è –£—Ä–æ–≤–µ–Ω—å: ${user.level}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.createdAt.toLocaleDateString('ru-RU')}

üìù **–ó–∞–¥–∞—á–∏:**
üìù –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: ${totalTasks}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedTasks}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${completionRate}%
üéØ –°–µ–≥–æ–¥–Ω—è —Å–æ–∑–¥–∞–Ω–æ: ${todayTasks}

üîÑ **–ü—Ä–∏–≤—ã—á–∫–∏:**
üí™ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: ${totalHabits}
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: ${completedHabits}
üìà –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${habitCompletionRate}%
üéØ –°–µ–≥–æ–¥–Ω—è —Å–æ–∑–¥–∞–Ω–æ: ${todayHabits}

üìà **–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:** ${todayStr}
${todayTasks > 0 || todayHabits > 0 ? 'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å!' : 'üî¥ –ü–æ–∫–∞ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'}

üéÆ **–°–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!**
üåÖ –†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞ (–ø–æ–¥—ä–µ–º –¥–æ 7:00)
üèÉ –°–ø—Ä–∏–Ω—Ç–µ—Ä –∑–∞–¥–∞—á (–≤—ã–ø–æ–ª–Ω–∏—Ç—å 5 –∑–∞–¥–∞—á –ø–æ–¥—Ä—è–¥)
üî• –°–µ—Ä–∏—è —É—Å–ø–µ—Ö–æ–≤ (–≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–Ω—è)  
üéØ –°–Ω–∞–π–ø–µ—Ä —Ü–µ–ª–µ–π (–ø–æ–ø–∞—Å—Ç—å –≤ –¥–µ–¥–ª–∞–π–Ω)

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è XP! üöÄ
      `,
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üìä –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                  callback_data: 'my_progress',
                },
                { text: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data: 'achievements' },
              ],
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    } catch (error) {
      this.logger.error('Error showing detailed statistics:', error);
      await ctx.editMessageTextWithMarkdown(
        `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'more_functions' }],
            ],
          },
        },
      );
    }
  }

  private async showHabitsStatistics(ctx: BotContext) {
    try {
      const habits = await this.habitService.findHabitsByUserId(ctx.userId);
      const user = await this.userService.findByTelegramId(ctx.userId);

      if (habits.length === 0) {
        await ctx.editMessageTextWithMarkdown(
          `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\nüí° –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üéØ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É', callback_data: 'habits_add' }],
                [{ text: 'üîô –ö –ø—Ä–∏–≤—ã—á–∫–∞–º', callback_data: 'menu_habits' }],
              ],
            },
          },
        );
        return;
      }

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const totalCompletions = habits.reduce(
        (sum, h) => sum + (h.totalCompletions || 0),
        0,
      );
      const avgCompletions = Math.round(totalCompletions / habits.length);
      const maxStreak = Math.max(...habits.map((h) => h.maxStreak || 0));
      const activeHabits = habits.filter((h) => h.isActive).length;

      // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é —É—Å–ø–µ—à–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É
      const topHabit = habits.reduce((top, current) =>
        (current.totalCompletions || 0) > (top.totalCompletions || 0)
          ? current
          : top,
      );

      let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫*\n\n`;
      message += `üéØ **–û–±—â–∏–π –æ–±–∑–æ—Ä:**\n`;
      message += `üìã –í—Å–µ–≥–æ –ø—Ä–∏–≤—ã—á–µ–∫: ${habits.length}\n`;
      message += `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeHabits}\n`;
      message += `üèÜ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: ${totalCompletions}\n`;
      message += `üìà –°—Ä–µ–¥–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${avgCompletions}\n`;
      message += `üî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: ${maxStreak} –¥–Ω–µ–π\n\n`;

      message += `üëë **–¢–æ–ø –ø—Ä–∏–≤—ã—á–∫–∞:**\n`;
      message += `üéØ ${topHabit.title}\n`;
      message += `‚úÖ ${topHabit.totalCompletions || 0} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π\n`;
      message += `üî• –°–µ—Ä–∏—è: ${topHabit.currentStreak || 0} –¥–Ω–µ–π\n\n`;

      message += `üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;

      for (const habit of habits.slice(0, 5)) {
        const progress = this.getHabitProgressAnimation(
          habit.totalCompletions || 0,
        );
        message += `\nüéØ **${habit.title}**\n`;
        message += `${progress}\n`;
        message += `‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: ${habit.totalCompletions || 0}\n`;
        message += `üî• –°–µ—Ä–∏—è: ${habit.currentStreak}/${habit.maxStreak} –¥–Ω–µ–π\n`;
      }

      if (habits.length > 5) {
        message += `\n*... –∏ –µ—â–µ ${habits.length - 5} –ø—Ä–∏–≤—ã—á–µ–∫*`;
      }

      await ctx.editMessageTextWithMarkdown(message, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üéØ –ö –ø—Ä–∏–≤—ã—á–∫–∞–º', callback_data: 'menu_habits' },
              { text: 'üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'my_progress' },
            ],
            [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
          ],
        },
      });
    } catch (error) {
      this.logger.error('Error in showHabitsStatistics:', error);
      await ctx.editMessageTextWithMarkdown(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫',
      );
    }
  }
}
