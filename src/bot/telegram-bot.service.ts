import {
  Injectable,
  Logger,
  OnModuleInit,
  OnModuleDestroy,
} from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf, session } from 'telegraf';
import { BotContext } from './bot-context.interface';
import { UserService } from '../services/user.service';
import { OpenAIService } from '../services/openai.service';

@Injectable()
export class TelegramBotService implements OnModuleInit, OnModuleDestroy {
  private readonly logger = new Logger(TelegramBotService.name);
  private bot: Telegraf<BotContext>;

  constructor(
    private readonly configService: ConfigService,
    private readonly userService: UserService,
    private readonly openaiService: OpenAIService,
  ) {
    const token = this.configService.get<string>('bot.token');
    if (!token) {
      throw new Error('BOT_TOKEN is not provided');
    }

    this.bot = new Telegraf<BotContext>(token);
    this.setupMiddleware();
    this.setupHandlers();
  }

  private setupMiddleware() {
    // Session middleware
    this.bot.use(
      session({
        defaultSession: () => ({
          step: undefined,
          data: {},
          waitingForInput: false,
          currentAction: undefined,
          tempData: {},
        }),
      }),
    );

    // User context middleware
    this.bot.use(async (ctx, next) => {
      if (ctx.from) {
        ctx.userId = ctx.from.id.toString();

        // Ensure user exists in database
        await this.userService.findOrCreateUser({
          id: ctx.from.id.toString(),
          username: ctx.from.username,
          firstName: ctx.from.first_name,
          lastName: ctx.from.last_name,
        });
      }

      // Add helper methods
      ctx.replyWithMarkdown = (text: string, extra: any = {}) => {
        return ctx.reply(text, { parse_mode: 'Markdown', ...extra });
      };

      ctx.editMessageTextWithMarkdown = (text: string, extra: any = {}) => {
        return ctx.editMessageText(text, { parse_mode: 'Markdown', ...extra });
      };

      return next();
    });
  }

  private setupHandlers() {
    // Start command
    this.bot.start(async (ctx) => {
      const user = await this.userService.findByTelegramId(ctx.userId);

      if (!user.onboardingPassed) {
        await this.startOnboarding(ctx);
      } else {
        await this.showMainMenu(ctx);
      }
    }); // Help command
    this.bot.help(async (ctx) => {
      await ctx.replyWithMarkdown(`
ü§ñ *DailyCheck Bot - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/tasks - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
/habits - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
/mood - –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
/focus - –°–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏

*–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*
üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É
üîÑ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
üòä –û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
‚è∞ –°–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu
      `);
    });

    // Main menu command
    this.bot.command('menu', async (ctx) => {
      await this.showMainMenu(ctx);
    });

    // Onboarding callback handlers
    this.bot.action('onboarding_start', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showOnboardingStep2(ctx);
    });

    this.bot.action('onboarding_examples', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(`
üìã *–ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, —á—Ç–æ —è —É–º–µ—é:*

*–ó–∞–¥–∞—á–∏:*
‚Ä¢ "–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ"
‚Ä¢ "–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é"
‚Ä¢ "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤—Ä–∞—á—É"

*–ü—Ä–∏–≤—ã—á–∫–∏:*
‚Ä¢ "–ü–∏—Ç—å 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã"
‚Ä¢ "–î–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É"
‚Ä¢ "–ß–∏—Ç–∞—Ç—å 30 –º–∏–Ω—É—Ç"

*–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:*
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ —à–∫–∞–ª–µ 1-10
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      `);

      setTimeout(async () => {
        await this.showOnboardingStep2(ctx);
      }, 3000);
    });

    this.bot.action('onboarding_add_habit', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(`
‚úçÔ∏è *–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –ø–µ—Ä–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏.*

–ù–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ –ü–∏—Ç—å –≤–æ–¥—É –∫–∞–∂–¥—ã–π —á–∞—Å
‚Ä¢ –î–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É —É—Ç—Ä–æ–º
‚Ä¢ –ß–∏—Ç–∞—Ç—å –ø–µ—Ä–µ–¥ —Å–Ω–æ–º

*–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:*
      `);
      ctx.session.step = 'onboarding_waiting_habit';
    });

    this.bot.action('onboarding_skip_habit', async (ctx) => {
      await ctx.answerCbQuery();
      await this.showOnboardingStep3(ctx);
    });

    this.bot.action('onboarding_complete', async (ctx) => {
      await ctx.answerCbQuery();

      // Mark onboarding as completed
      await this.userService.updateUser(ctx.userId, {
        onboardingPassed: true,
      });

      await ctx.replyWithMarkdown(`
üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!*

–¢–µ–ø–µ—Ä—å —Ç—ã –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Å Ticky AI!

üöÄ –ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
      `);

      setTimeout(async () => {
        await this.showMainMenu(ctx);
      }, 2000);
    });

    // Handle text input during onboarding
    this.bot.on('text', async (ctx) => {
      const user = await this.userService.findByTelegramId(ctx.userId);

      // Check if user needs to provide timezone first
      if (
        !user.timezone &&
        (ctx.session.step === 'adding_task' ||
          ctx.session.step === 'adding_habit')
      ) {
        await this.askForTimezone(ctx);
        return;
      }

      // Handle timezone setting
      if (ctx.session.step === 'waiting_for_city') {
        await this.handleCityInput(ctx, ctx.message.text);
        return;
      }

      if (ctx.session.step === 'onboarding_waiting_habit') {
        const habitName = ctx.message.text;

        // Here you would typically save the habit to database
        // For now, just acknowledge and continue

        await ctx.replyWithMarkdown(`
‚úÖ *–û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–∏–≤—ã—á–∫–∞: "${habitName}"*

–ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.

üéØ –ü—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É...
        `);

        setTimeout(async () => {
          await this.showOnboardingStep3(ctx);
        }, 2000);
      }
    });

    // Main menu callback handlers
    this.bot.action('menu_tasks', async (ctx) => {
      await ctx.answerCbQuery();

      const user = await this.userService.findByTelegramId(ctx.userId);
      if (!user.timezone) {
        ctx.session.step = 'adding_task';
        await this.askForTimezone(ctx);
      } else {
        await ctx.replyWithMarkdown(
          'üìù *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
        );
      }
    });

    this.bot.action('menu_habits', async (ctx) => {
      await ctx.answerCbQuery();

      const user = await this.userService.findByTelegramId(ctx.userId);
      if (!user.timezone) {
        ctx.session.step = 'adding_habit';
        await this.askForTimezone(ctx);
      } else {
        await ctx.replyWithMarkdown(
          'üîÑ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
        );
      }
    });

    this.bot.action('menu_mood', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown(
        'üòä *–û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
      );
    });

    this.bot.action('menu_focus', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown('‚è∞ *–°–µ—Å—Å–∏—è —Ñ–æ–∫—É—Å–∞* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    });

    this.bot.action('menu_stats', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown('üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    });

    this.bot.action('menu_settings', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown('‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    });

    this.bot.action('menu_achievements', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown('üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    });

    this.bot.action('menu_ai', async (ctx) => {
      await ctx.answerCbQuery();
      await ctx.replyWithMarkdown('üí° *–ò–ò –ü–æ–º–æ—â–Ω–∏–∫* - —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
    });

    // Error handling
    this.bot.catch((err, ctx) => {
      this.logger.error(`Bot error for ${ctx.updateType}:`, err);
      ctx.reply(
        'üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
      );
    });
  }

  async onModuleInit() {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    this.launch().catch((error) => {
      this.logger.error('Failed to launch bot:', error);
    });
  }

  async onModuleDestroy() {
    await this.stop();
  }

  private async startOnboarding(ctx: BotContext) {
    // Step 1: Welcome
    await this.showOnboardingStep1(ctx);
  }

  private async showOnboardingStep1(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üöÄ –ù–∞—á–∞—Ç—å', callback_data: 'onboarding_start' },
          {
            text: 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã',
            callback_data: 'onboarding_examples',
          },
        ],
      ],
    };

    await ctx.replyWithMarkdown(
      `ü§ñ *–ü—Ä–∏–≤–µ—Ç! –Ø Ticky AI ‚Äî —Ç–≤–æ–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º –∏ –∑–∞–¥–∞—á–∞–º —Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π.*`,
      { reply_markup: keyboard },
    );

    ctx.session.step = 'onboarding_welcome';
  }

  private async showOnboardingStep2(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [
          {
            text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É',
            callback_data: 'onboarding_add_habit',
          },
          { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'onboarding_skip_habit' },
        ],
      ],
    };

    await ctx.replyWithMarkdown(
      `
üöÄ *–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç*

–î–∞–≤–∞–π –¥–æ–±–∞–≤–∏–º —Ç–≤–æ—é –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É!
–ù–∞–ø—Ä–∏–º–µ—Ä: "–ü–∏—Ç—å –≤–æ–¥—É"

*–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:*
    `,
      { reply_markup: keyboard },
    );

    ctx.session.step = 'onboarding_quick_start';
  }

  private async showOnboardingStep3(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [{ text: '‚úÖ –ü–æ–Ω—è—Ç–Ω–æ!', callback_data: 'onboarding_complete' }],
      ],
    };

    await ctx.replyWithMarkdown(
      `
üìö *–ú–∏–Ω–∏-FAQ*

*–ß–¢–û –£–ú–ï–ï–¢ –ë–û–¢?*

‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∏
‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
‚Ä¢ –í–æ–≤–ª–µ–∫–∞—Ç—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∏
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö

üéØ –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å?
    `,
      { reply_markup: keyboard },
    );

    ctx.session.step = 'onboarding_faq';
  }

  private async showMainMenu(ctx: BotContext) {
    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìù –ó–∞–¥–∞—á–∏', callback_data: 'menu_tasks' },
          { text: 'üîÑ –ü—Ä–∏–≤—ã—á–∫–∏', callback_data: 'menu_habits' },
        ],
        [
          { text: 'üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', callback_data: 'menu_mood' },
          { text: '‚è∞ –§–æ–∫—É—Å', callback_data: 'menu_focus' },
        ],
        [
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'menu_stats' },
          { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'menu_settings' },
        ],
        [
          { text: 'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data: 'menu_achievements' },
          { text: 'üí° –ò–ò –ü–æ–º–æ—â–Ω–∏–∫', callback_data: 'menu_ai' },
        ],
      ],
    };

    const user = await this.userService.findByTelegramId(ctx.userId);

    await ctx.replyWithMarkdown(
      `
üéØ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é DailyCheck*

–ü—Ä–∏–≤–µ—Ç, ${this.userService.getDisplayName(user)}! üëã

*–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–≥–æ–¥–Ω—è:*
üìù –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${user.todayTasks}
üîÑ –ü—Ä–∏–≤—ã—á–µ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${user.todayHabits}
‚ö° –£—Ä–æ–≤–µ–Ω—å: ${user.level} (XP: ${user.totalXp})
üî• –°—Ç—Ä–∏–∫: ${user.currentStreak} –¥–Ω–µ–π

–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?
    `,
      { reply_markup: keyboard },
    );
  }

  async launch() {
    try {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
      this.bot
        .launch()
        .then(() => {
          this.logger.log('üöÄ Telegram bot launched successfully');
        })
        .catch((error) => {
          this.logger.error('‚ùå Failed to launch Telegram bot:', error);
        });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
      this.logger.log('ü§ñ Telegram bot launch initiated');
    } catch (error) {
      this.logger.error('‚ùå Error during bot initialization:', error);
      throw error;
    }
  }

  async stop() {
    this.bot.stop('SIGINT');
    this.logger.log('üõë Telegram bot stopped');
  }

  getBotInstance(): Telegraf<BotContext> {
    return this.bot;
  }

  private async askForTimezone(ctx: BotContext) {
    await ctx.replyWithMarkdown(`
üåç *–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏ –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.*

üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:
(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù—å—é-–ô–æ—Ä–∫, –õ–æ–Ω–¥–æ–Ω)
    `);

    ctx.session.step = 'waiting_for_city';
  }

  private async handleCityInput(ctx: BotContext, cityName: string) {
    await ctx.replyWithMarkdown('üîç *–û–ø—Ä–µ–¥–µ–ª—è—é —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å...*');

    const result = await this.openaiService.getTimezoneByCity(cityName);

    if (!result) {
      await ctx.replyWithMarkdown(`
‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –≥–æ—Ä–æ–¥–∞ "${cityName}"*

üìç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ:
      `);
      return;
    }

    // Save timezone and city to database
    await this.userService.updateUser(ctx.userId, {
      timezone: result.timezone,
      city: result.normalizedCity,
    });

    await ctx.replyWithMarkdown(`
‚úÖ *–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!*

üèôÔ∏è –ì–æ—Ä–æ–¥: ${result.normalizedCity}
üïê –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${result.timezone}

–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –ø—Ä–∏–≤—ã—á–∫–∏!
    `);

    // Reset session step
    ctx.session.step = undefined;

    // Show main menu or continue with the original action
    await this.showMainMenu(ctx);
  }
}
