import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../database/prisma.service';

export interface FreePlanLimits {
  habits: number;
  tasks: number;
  aiRequests: number;
  pomodoroSessions: number;
  dependencies: number;
}

export interface SubscriptionInfo {
  isPremium: boolean;
  limits: FreePlanLimits;
  usage: {
    habits: number;
    tasks: number;
    aiRequests: number;
    pomodoroSessions: number;
    dependencies: number;
  };
  resetDate: Date; // –î–∞—Ç–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)
}

@Injectable()
export class SubscriptionService {
  private readonly logger = new Logger(SubscriptionService.name);

  private readonly FREE_PLAN_LIMITS: FreePlanLimits = {
    habits: 3,
    tasks: 5,
    aiRequests: 5,
    pomodoroSessions: 3,
    dependencies: 1,
  };

  constructor(private readonly prisma: PrismaService) {}

  async getSubscriptionInfo(userId: string): Promise<SubscriptionInfo> {
    try {
      const user = await this.prisma.user.findUnique({
        where: { id: userId },
        include: {
          habits: true,
          tasks: true,
          dependencySupport: { where: { status: 'ACTIVE' } },
        },
      });

      if (!user) {
        throw new Error(`User ${userId} not found`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã
      await this.resetDailyLimitsIfNeeded(userId);

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
      const today = new Date();
      today.setHours(0, 0, 0, 0);

      const todayUsage = {
        habits: user.habits.length,
        tasks: user.tasks.length,
        aiRequests: (user as any).dailyAiRequests || 0,
        pomodoroSessions: (user as any).dailyPomodoroSessions || 0,
        dependencies: user.dependencySupport.length,
      };

      const nextReset = new Date(today);
      nextReset.setDate(nextReset.getDate() + 1);

      return {
        isPremium: (user as any).isPremium || false,
        limits: this.FREE_PLAN_LIMITS,
        usage: todayUsage,
        resetDate: nextReset,
      };
    } catch (error) {
      this.logger.error(
        `Error getting subscription info for user ${userId}:`,
        error,
      );
      throw error;
    }
  }

  async checkLimit(
    userId: string,
    type: keyof FreePlanLimits,
  ): Promise<{
    allowed: boolean;
    current: number;
    limit: number;
    remaining: number;
  }> {
    const subscriptionInfo = await this.getSubscriptionInfo(userId);

    if (subscriptionInfo.isPremium) {
      return {
        allowed: true,
        current: subscriptionInfo.usage[type],
        limit: -1, // –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º
        remaining: -1,
      };
    }

    const current = subscriptionInfo.usage[type];
    const limit = subscriptionInfo.limits[type];
    const remaining = Math.max(0, limit - current);

    return {
      allowed: current < limit,
      current,
      limit,
      remaining,
    };
  }

  async incrementUsage(
    userId: string,
    type: keyof FreePlanLimits,
  ): Promise<void> {
    try {
      const subscriptionInfo = await this.getSubscriptionInfo(userId);

      if (subscriptionInfo.isPremium) {
        return; // –ù–µ –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      switch (type) {
        case 'aiRequests':
          await this.prisma.user.update({
            where: { id: userId },
            data: {
              dailyAiRequests: { increment: 1 },
            } as any,
          });
          break;
        case 'pomodoroSessions':
          await this.prisma.user.update({
            where: { id: userId },
            data: {
              dailyPomodoroSessions: { increment: 1 },
            } as any,
          });
          break;
        // –î–ª—è habits, tasks, dependencies —Å—á–µ—Ç—á–∏–∫ —É–∂–µ –µ—Å—Ç—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π)
      }

      this.logger.log(`Incremented ${type} usage for user ${userId}`);
    } catch (error) {
      this.logger.error(`Error incrementing usage for user ${userId}:`, error);
      throw error;
    }
  }

  private async resetDailyLimitsIfNeeded(userId: string): Promise<void> {
    try {
      const user = await this.prisma.user.findUnique({
        where: { id: userId },
      });

      if (!user) return;

      const today = new Date();
      today.setHours(0, 0, 0, 0);

      const lastReset = (user as any).lastDailyReset
        ? new Date((user as any).lastDailyReset)
        : null;

      // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–±—Ä–æ—Å –±—ã–ª –Ω–µ —Å–µ–≥–æ–¥–Ω—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
      if (!lastReset || lastReset < today) {
        await this.prisma.user.update({
          where: { id: userId },
          data: {
            dailyAiRequests: 0,
            dailyPomodoroSessions: 0,
            lastDailyReset: today,
          } as any,
        });

        this.logger.log(`Reset daily limits for user ${userId}`);
      }
    } catch (error) {
      this.logger.error(
        `Error resetting daily limits for user ${userId}:`,
        error,
      );
    }
  }

  getLimitMessage(
    type: keyof FreePlanLimits,
    current: number,
    limit: number,
  ): string {
    const typeNames = {
      habits: '–ø—Ä–∏–≤—ã—á–µ–∫',
      tasks: '–∑–∞–¥–∞—á',
      aiRequests: '–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò',
      pomodoroSessions: '—Å–µ—Å—Å–∏–π –ø–æ–º–æ–¥–æ—Ä–æ',
      dependencies: '–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
    };

    return `üö´ *–õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç*\n\n–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ ${typeNames[type]} –≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏: ${current}/${limit}\n\nüíé **–ü–æ–ª—É—á–∏—Ç–µ Premium –¥–ª—è:**\n‚Ä¢ ‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ${typeNames[type]}\n‚Ä¢ üöÄ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n‚Ä¢ ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞`;
  }

  getUsageInfo(
    current: number,
    limit: number,
    type: keyof FreePlanLimits,
  ): string {
    if (limit === -1) return '‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ'; // Premium

    const typeNames = {
      habits: '–ø—Ä–∏–≤—ã—á–µ–∫',
      tasks: '–∑–∞–¥–∞—á',
      aiRequests: '–∑–∞–ø—Ä–æ—Å–æ–≤ –ò–ò',
      pomodoroSessions: '—Å–µ—Å—Å–∏–π –ø–æ–º–æ–¥–æ—Ä–æ',
      dependencies: '–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
    };

    const remaining = Math.max(0, limit - current);
    return `${current}/${limit} ${typeNames[type]} (–æ—Å—Ç–∞–ª–æ—Å—å: ${remaining})`;
  }

  async showSubscriptionStatus(ctx: any): Promise<void> {
    try {
      const info = await this.getSubscriptionInfo(ctx.userId);

      let message = info.isPremium
        ? `üíé **Premium —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–µ–Ω**\n\n‚ôæÔ∏è –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!\nüöÄ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!`
        : `üÜì **–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è**\n\nüìä **–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n`;

      if (!info.isPremium) {
        message += `üéØ –ü—Ä–∏–≤—ã—á–∫–∏: ${this.getUsageInfo(info.usage.habits, info.limits.habits, 'habits')}\n`;
        message += `üìù –ó–∞–¥–∞—á–∏: ${this.getUsageInfo(info.usage.tasks, info.limits.tasks, 'tasks')}\n`;
        message += `ü§ñ –ò–ò –∑–∞–ø—Ä–æ—Å—ã: ${this.getUsageInfo(info.usage.aiRequests, info.limits.aiRequests, 'aiRequests')}\n`;
        message += `üçÖ –ü–æ–º–æ–¥–æ—Ä–æ: ${this.getUsageInfo(info.usage.pomodoroSessions, info.limits.pomodoroSessions, 'pomodoroSessions')}\n`;
        message += `üé≠ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${this.getUsageInfo(info.usage.dependencies, info.limits.dependencies, 'dependencies')}\n\n`;
        message += `üîÑ –õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤—è—Ç—Å—è: ${info.resetDate.toLocaleDateString('ru-RU')}\n\n`;
        message += `üíé **Premium –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**\n`;
        message += `‚Ä¢ ‚ôæÔ∏è –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –∑–∞–¥–∞—á–∏\n`;
        message += `‚Ä¢ ü§ñ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –ò–ò\n`;
        message += `‚Ä¢ üçÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Ñ–æ–∫—É—Å–∞\n`;
        message += `‚Ä¢ üé≠ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏\n`;
        message += `‚Ä¢ ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n`;
      }

      await ctx.replyWithMarkdown(message, {
        reply_markup: {
          inline_keyboard: info.isPremium
            ? [[{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }]]
            : [
                [{ text: 'üíé –ü–æ–ª—É—á–∏—Ç—å Premium', callback_data: 'get_premium' }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_menu' }],
              ],
        },
      });
    } catch (error) {
      this.logger.error(`Error showing subscription status:`, error);
      await ctx.replyWithMarkdown(
        '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ',
      );
    }
  }
}
